{
  "address": "0x5d7A7c08Fa8f2eD91A440dB4989327b79CB12B28",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifyFields",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifyMessage",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "provided",
          "type": "uint256"
        }
      ],
      "name": "InsufficientFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "optionType",
          "type": "uint16"
        }
      ],
      "name": "InvalidOptionType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "ArbitraryMessageReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "ReadReceived",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "BLOCK_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_CONFIG_VF",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "confirmations",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "toReadFrom",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_CONFIG_VM",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "confirmations",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "toReadFrom",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONSERVATIVE_CONFIG",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "gasLimit",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "messageSize",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fieldsSize",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_CONFIG",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "gasLimit",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "messageSize",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fieldsSize",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINNET_PREFIX",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPTIMISTIC_CONFIG",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "gasLimit",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "messageSize",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fieldsSize",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "READ_CHANNEL_EID_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "READ_CHANNEL_ID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "READ_FROM_ENDPOINT_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "READ_FROM_ENDPOINT_ID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "READ_TO_ENDPOINT_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "READ_TO_ENDPOINT_ID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TESTNET_PREFIX",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "_calldataReadLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        }
      ],
      "name": "allowInitializePath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getVFIdToData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "verifyType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "vfId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "mainnet",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Point",
              "name": "publicKey",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "r",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Signature",
              "name": "signature",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "messageHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "prefix",
              "type": "string"
            },
            {
              "internalType": "uint256[]",
              "name": "fields",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct VerifyFieldsStateCompressed",
          "name": "state",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getVMIdToData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "verifyType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "vmId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "mainnet",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Point",
              "name": "publicKey",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "r",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Signature",
              "name": "signature",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "messageHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "prefix",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "message",
              "type": "string"
            }
          ],
          "internalType": "struct VerifyMessageStateCompressed",
          "name": "state",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isComposeMsgSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TYPE",
          "name": "verifyType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "calldataSize",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "gasLimit",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "payInLzToken",
          "type": "bool"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "gasLimit",
              "type": "uint128"
            },
            {
              "internalType": "uint32",
              "name": "calldataSize",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct QuoteResult",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TYPE",
          "name": "verifyType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "enum MODE",
          "name": "mode",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "payInLzToken",
          "type": "bool"
        }
      ],
      "name": "quoteAuto",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "gasLimit",
              "type": "uint128"
            },
            {
              "internalType": "uint32",
              "name": "calldataSize",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct QuoteResult",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TYPE",
          "name": "verifyType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "enum MODE",
          "name": "mode",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "payInLzToken",
          "type": "bool"
        }
      ],
      "name": "readBytesCompressedAuto",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct MessagingReceipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TYPE",
          "name": "verifyType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "calldataSize",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "gasLimit",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "payInLzToken",
          "type": "bool"
        }
      ],
      "name": "readBytesCompressedManual",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct MessagingReceipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_channelId",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setReadChannel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "confirmations",
          "type": "uint16"
        }
      ],
      "name": "updateBlockConfirmations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "gasLimit",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "messageSizeBytes",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fieldsSizeBytes",
          "type": "uint32"
        }
      ],
      "name": "updateConservativeModeParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "gasLimit",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "messageSizeBytes",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fieldsSizeBytes",
          "type": "uint32"
        }
      ],
      "name": "updateDefaultModeParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "gasLimit",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "messageSizeBytes",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fieldsSizeBytes",
          "type": "uint32"
        }
      ],
      "name": "updateOptimisticModeParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "updateReadChannelId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "updateReadFromEndpointAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "updateReadFromEndpointId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "updateReadToEndpointAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "updateReadToEndpointId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "updateVerifyFieldsContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "updateVerifyMessageContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vfIdToData",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "verifyType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "vfId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "mainnet",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct Point",
          "name": "publicKey",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "r",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "s",
              "type": "uint256"
            }
          ],
          "internalType": "struct Signature",
          "name": "signature",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "messageHash",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "prefix",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vmIdToData",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "verifyType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "vmId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "mainnet",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct Point",
          "name": "publicKey",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "r",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "s",
              "type": "uint256"
            }
          ],
          "internalType": "struct Signature",
          "name": "signature",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "messageHash",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "prefix",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x569bfcc9be2a2318d579e85b1c0e37b5ecf0e9d4e3a8036113210c723de0c177",
  "receipt": {
    "to": null,
    "from": "0x22b4fD82537573614340314f29bCb2fab182f409",
    "contractAddress": "0x5d7A7c08Fa8f2eD91A440dB4989327b79CB12B28",
    "transactionIndex": 133,
    "gasUsed": "3143115",
    "logsBloom": "0x
    "blockHash": "0x05eb82c3ed91cfca59697aec044a9eb8e28d437699c5dc9cbe22d09dca7a009a",
    "transactionHash": "0x569bfcc9be2a2318d579e85b1c0e37b5ecf0e9d4e3a8036113210c723de0c177",
    "logs": [
      {
        "transactionIndex": 133,
        "blockNumber": 21589598,
        "transactionHash": "0x569bfcc9be2a2318d579e85b1c0e37b5ecf0e9d4e3a8036113210c723de0c177",
        "address": "0x5d7A7c08Fa8f2eD91A440dB4989327b79CB12B28",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000022b4fd82537573614340314f29bcb2fab182f409"
        ],
        "data": "0x",
        "logIndex": 324,
        "blockHash": "0x05eb82c3ed91cfca59697aec044a9eb8e28d437699c5dc9cbe22d09dca7a009a"
      },
      {
        "transactionIndex": 133,
        "blockNumber": 21589598,
        "transactionHash": "0x569bfcc9be2a2318d579e85b1c0e37b5ecf0e9d4e3a8036113210c723de0c177",
        "address": "0x1a44076050125825900e736c501f859c50fE728c",
        "topics": [
          "0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981"
        ],
        "data": "0x0000000000000000000000005d7a7c08fa8f2ed91a440db4989327b79cb12b2800000000000000000000000022b4fd82537573614340314f29bcb2fab182f409",
        "logIndex": 325,
        "blockHash": "0x05eb82c3ed91cfca59697aec044a9eb8e28d437699c5dc9cbe22d09dca7a009a"
      }
    ],
    "blockNumber": 21589598,
    "cumulativeGasUsed": "13827356",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1a44076050125825900e736c501f859c50fE728c",
    "0x22b4fD82537573614340314f29bCb2fab182f409",
    "0x643aDFd52cB8c0cb4c3850BF97468b0EFBE71b25",
    "0xB352B0dE8AF1e27a0fc927c1aD38BdB1bc4FCf40"
  ],
  "numDeployments": 1,
  "solcInputHash": "5918c32b9a7025e75e36301bedaab855",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifyFields\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifyMessage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"}],\"name\":\"InsufficientFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"optionType\",\"type\":\"uint16\"}],\"name\":\"InvalidOptionType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"ArbitraryMessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"ReadReceived\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BLOCK_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_CONFIG_VF\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"confirmations\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"toReadFrom\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_CONFIG_VM\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"confirmations\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"toReadFrom\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONSERVATIVE_CONFIG\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"gasLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"messageSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fieldsSize\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CONFIG\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"gasLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"messageSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fieldsSize\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINNET_PREFIX\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPTIMISTIC_CONFIG\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"gasLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"messageSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fieldsSize\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"READ_CHANNEL_EID_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"READ_CHANNEL_ID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"READ_FROM_ENDPOINT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"READ_FROM_ENDPOINT_ID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"READ_TO_ENDPOINT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"READ_TO_ENDPOINT_ID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TESTNET_PREFIX\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"_calldataReadLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getVFIdToData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"verifyType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vfId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mainnet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Point\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"fields\",\"type\":\"uint256[]\"}],\"internalType\":\"struct VerifyFieldsStateCompressed\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getVMIdToData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"verifyType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vmId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mainnet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Point\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"internalType\":\"struct VerifyMessageStateCompressed\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TYPE\",\"name\":\"verifyType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"calldataSize\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"gasLimit\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"payInLzToken\",\"type\":\"bool\"}],\"name\":\"quote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"gasLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"calldataSize\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct QuoteResult\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TYPE\",\"name\":\"verifyType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum MODE\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"payInLzToken\",\"type\":\"bool\"}],\"name\":\"quoteAuto\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"gasLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"calldataSize\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct QuoteResult\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TYPE\",\"name\":\"verifyType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum MODE\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"payInLzToken\",\"type\":\"bool\"}],\"name\":\"readBytesCompressedAuto\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TYPE\",\"name\":\"verifyType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"calldataSize\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"gasLimit\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"payInLzToken\",\"type\":\"bool\"}],\"name\":\"readBytesCompressedManual\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_channelId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setReadChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"confirmations\",\"type\":\"uint16\"}],\"name\":\"updateBlockConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"gasLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"messageSizeBytes\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fieldsSizeBytes\",\"type\":\"uint32\"}],\"name\":\"updateConservativeModeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"gasLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"messageSizeBytes\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fieldsSizeBytes\",\"type\":\"uint32\"}],\"name\":\"updateDefaultModeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"gasLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"messageSizeBytes\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fieldsSizeBytes\",\"type\":\"uint32\"}],\"name\":\"updateOptimisticModeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"updateReadChannelId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"updateReadFromEndpointAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"updateReadFromEndpointId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"updateReadToEndpointAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"updateReadToEndpointId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"updateVerifyFieldsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"updateVerifyMessageContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vfIdToData\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"verifyType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vfId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mainnet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Point\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vmIdToData\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"verifyType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vmId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mainnet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Point\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Inherits from OAppRead for cross-chain messaging and Ownable for access controlDefault configuration for ETH origin chain and ARB target chain.\",\"errors\":{\"InsufficientFee(uint256,uint256)\":[{\"params\":{\"provided\":\"The provided fee amount\",\"required\":\"The required fee amount\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"ArbitraryMessageReceived((uint32,bytes32,uint64),bytes)\":{\"params\":{\"message\":\"The received message data\",\"origin\":\"Origin information of the message\"}}},\"kind\":\"dev\",\"methods\":{\"_calldataReadLzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"This function can only be called by the contract itself through this._calldataReadLzReceive().      It's used as a bridge to convert memory parameters to calldata when needed.\",\"params\":{\"_executor\":\"The executor address for the message.\",\"_extraData\":\"Additional data passed with the message.\",\"_guid\":\"The unique identifier for the received message.\",\"_message\":\"The encoded message data that needs to be processed.\",\"_origin\":\"The origin information containing the source Endpoint ID.\"}},\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"constructor\":{\"params\":{\"_delegate\":\"Address of the delegate\",\"_endpoint\":\"Address of the LayerZero endpoint\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quote(uint8,uint256,uint32,uint128,bool)\":{\"params\":{\"calldataSize\":\"Size of calldata\",\"gasLimit\":\"Gas limit for the transaction\",\"id\":\"Verification ID\",\"payInLzToken\":\"Whether to pay in LayerZero tokens\",\"verifyType\":\"Type of verification\"},\"returns\":{\"_0\":\"QuoteResult Result containing gas and fee information\"}},\"quoteAuto(uint8,uint256,uint8,bool)\":{\"params\":{\"id\":\"Verification ID\",\"mode\":\"Whether to use optimistic mode\",\"payInLzToken\":\"Whether to pay in LayerZero tokens\",\"verifyType\":\"Type of verification\"},\"returns\":{\"_0\":\"QuoteResult Result containing gas and fee information\"}},\"readBytesCompressedAuto(uint8,uint256,uint8,bool)\":{\"params\":{\"id\":\"Verification ID\",\"mode\":\"Whether to use conservative/default/optimistic mode\",\"payInLzToken\":\"Whether to pay in LayerZero tokens\",\"verifyType\":\"Type of verification\"},\"returns\":{\"_0\":\"MessagingReceipt Receipt of the message transaction\"}},\"readBytesCompressedManual(uint8,uint256,uint32,uint128,bool)\":{\"params\":{\"calldataSize\":\"Size of calldata\",\"gasLimit\":\"Gas limit for the transaction\",\"id\":\"Verification ID\",\"payInLzToken\":\"Whether to pay in LayerZero tokens\",\"verifyType\":\"Type of verification\"},\"returns\":{\"_0\":\"MessagingReceipt Receipt of the message transaction\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"BLOCK_CONFIRMATIONS\":{\"details\":\"Read block confirmations required\"},\"CONSERVATIVE_CONFIG\":{\"details\":\"Decoding gas - 714k(Fields)\"},\"DEFAULT_CONFIG\":{\"details\":\"Decoding gas - 1.4m(Fields)\"},\"OPTIMISTIC_CONFIG\":{\"details\":\"Decoding gas - 2.5m(Fields)\"},\"READ_FROM_ENDPOINT_ID\":{\"details\":\"Target chain - Reading from.\"},\"READ_TO_ENDPOINT_ID\":{\"details\":\"Origin chain - Reading to.\"}},\"title\":\"PallasVerificationReceiever\",\"version\":1},\"userdoc\":{\"errors\":{\"InsufficientFee(uint256,uint256)\":[{\"notice\":\"Error thrown when the provided fee is insufficient\"}]},\"events\":{\"ArbitraryMessageReceived((uint32,bytes32,uint64),bytes)\":{\"notice\":\"Emitted when an arbitrary message is received.         All _lzReceive() calls apart from read responses.\"},\"ReadReceived((uint32,bytes32,uint64),bytes)\":{\"notice\":\"Emitted when a valid read is received.\"}},\"kind\":\"user\",\"methods\":{\"CHAIN_CONFIG_VF()\":{\"notice\":\"Read configuration for vf and vm\"},\"CONSERVATIVE_CONFIG()\":{\"notice\":\"Conservative gas limit for transactions (100 Chars/20 Fields)\"},\"DEFAULT_CONFIG()\":{\"notice\":\"Default gas limit for transactions (250 Chars/50 Fields)\"},\"MAINNET_PREFIX()\":{\"notice\":\"Signature prefix for mainnet network mode\"},\"OPTIMISTIC_CONFIG()\":{\"notice\":\"Optimistic gas limit for transactions (500 Chars/100 Fields)\"},\"TESTNET_PREFIX()\":{\"notice\":\"Signature prefix for testnet network mode\"},\"_calldataReadLzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"notice\":\"A helper function to convert memory data to calldata for _readLzReceive.\"},\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"constructor\":{\"notice\":\"Constructor for PallasVerificationReceiever\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"getVFIdToData(uint256)\":{\"notice\":\"To get Verify Fields mapping value\"},\"getVMIdToData(uint256)\":{\"notice\":\"To get Verify Message mapping value\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"quote(uint8,uint256,uint32,uint128,bool)\":{\"notice\":\"Gets quote for transaction with manual parameters\"},\"quoteAuto(uint8,uint256,uint8,bool)\":{\"notice\":\"Gets automatic quote for transaction\"},\"readBytesCompressedAuto(uint8,uint256,uint8,bool)\":{\"notice\":\"Reads compressed bytes with automatic parameters\"},\"readBytesCompressedManual(uint8,uint256,uint32,uint128,bool)\":{\"notice\":\"Reads compressed bytes with manual parameters\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"},\"updateVerifyFieldsContract(address)\":{\"notice\":\"=========================================================================== ADMIN STORAGE UPDATE FUNCTIONS ============================================ ===========================================================================\"},\"vfIdToData(uint256)\":{\"notice\":\"Mapping of verification field IDs to their compressed data\"},\"vmIdToData(uint256)\":{\"notice\":\"Mapping of verification message IDs to their compressed data\"}},\"notice\":\"Contract for receiving and processing cross-chain verification data\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/PallasVerificationReceiever.sol\":\"PallasVerificationReceiever\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@layerzerolabs/lz-evm-messagelib-v2/contracts/libs/ExecutorOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\\\";\\n\\nlibrary ExecutorOptions {\\n    using CalldataBytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 1;\\n\\n    uint8 internal constant OPTION_TYPE_LZRECEIVE = 1;\\n    uint8 internal constant OPTION_TYPE_NATIVE_DROP = 2;\\n    uint8 internal constant OPTION_TYPE_LZCOMPOSE = 3;\\n    uint8 internal constant OPTION_TYPE_ORDERED_EXECUTION = 4;\\n    uint8 internal constant OPTION_TYPE_LZREAD = 5;\\n\\n    error Executor_InvalidLzReceiveOption();\\n    error Executor_InvalidNativeDropOption();\\n    error Executor_InvalidLzComposeOption();\\n    error Executor_InvalidLzReadOption();\\n\\n    /// @dev decode the next executor option from the options starting from the specified cursor\\n    /// @param _options [executor_id][executor_option][executor_id][executor_option]...\\n    ///        executor_option = [option_size][option_type][option]\\n    ///        option_size = len(option_type) + len(option)\\n    ///        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @param _cursor the cursor to start decoding from\\n    /// @return optionType the type of the option\\n    /// @return option the option of the executor\\n    /// @return cursor the cursor to start decoding the next executor option\\n    function nextExecutorOption(\\n        bytes calldata _options,\\n        uint256 _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor);\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint256 startCursor = cursor + 1; // skip option type\\n            uint256 endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n\\n    function decodeLzReceiveOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\\n        if (_option.length != 16 && _option.length != 32) revert Executor_InvalidLzReceiveOption();\\n        gas = _option.toU128(0);\\n        value = _option.length == 32 ? _option.toU128(16) : 0;\\n    }\\n\\n    function decodeNativeDropOption(bytes calldata _option) internal pure returns (uint128 amount, bytes32 receiver) {\\n        if (_option.length != 48) revert Executor_InvalidNativeDropOption();\\n        amount = _option.toU128(0);\\n        receiver = _option.toB32(16);\\n    }\\n\\n    function decodeLzComposeOption(\\n        bytes calldata _option\\n    ) internal pure returns (uint16 index, uint128 gas, uint128 value) {\\n        if (_option.length != 18 && _option.length != 34) revert Executor_InvalidLzComposeOption();\\n        index = _option.toU16(0);\\n        gas = _option.toU128(2);\\n        value = _option.length == 34 ? _option.toU128(18) : 0;\\n    }\\n\\n    function decodeLzReadOption(\\n        bytes calldata _option\\n    ) internal pure returns (uint128 gas, uint32 calldataSize, uint128 value) {\\n        if (_option.length != 20 && _option.length != 36) revert Executor_InvalidLzReadOption();\\n        gas = _option.toU128(0);\\n        calldataSize = _option.toU32(16);\\n        value = _option.length == 36 ? _option.toU128(20) : 0;\\n    }\\n\\n    function encodeLzReceiveOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n    }\\n\\n    function encodeNativeDropOption(uint128 _amount, bytes32 _receiver) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_amount, _receiver);\\n    }\\n\\n    function encodeLzComposeOption(uint16 _index, uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_index, _gas) : abi.encodePacked(_index, _gas, _value);\\n    }\\n\\n    function encodeLzReadOption(\\n        uint128 _gas,\\n        uint32 _calldataSize,\\n        uint128 _value\\n    ) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas, _calldataSize) : abi.encodePacked(_gas, _calldataSize, _value);\\n    }\\n}\\n\",\"keccak256\":\"0x441b723f2f597be2ec2bb361fcf3f11852c23534db1cfa7d2ffff7e61d228e3c\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { BytesLib } from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport { BitMap256 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\\\";\\nimport { CalldataBytesLib } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\\\";\\n\\nlibrary DVNOptions {\\n    using CalldataBytesLib for bytes;\\n    using BytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 2;\\n    uint8 internal constant OPTION_TYPE_PRECRIME = 1;\\n\\n    error DVN_InvalidDVNIdx();\\n    error DVN_InvalidDVNOptions(uint256 cursor);\\n\\n    /// @dev group dvn options by its idx\\n    /// @param _options [dvn_id][dvn_option][dvn_id][dvn_option]...\\n    ///        dvn_option = [option_size][dvn_idx][option_type][option]\\n    ///        option_size = len(dvn_idx) + len(option_type) + len(option)\\n    ///        dvn_id: uint8, dvn_idx: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @return dvnOptions the grouped options, still share the same format of _options\\n    /// @return dvnIndices the dvn indices\\n    function groupDVNOptionsByIdx(\\n        bytes memory _options\\n    ) internal pure returns (bytes[] memory dvnOptions, uint8[] memory dvnIndices) {\\n        if (_options.length == 0) return (dvnOptions, dvnIndices);\\n\\n        uint8 numDVNs = getNumDVNs(_options);\\n\\n        // if there is only 1 dvn, we can just return the whole options\\n        if (numDVNs == 1) {\\n            dvnOptions = new bytes[](1);\\n            dvnOptions[0] = _options;\\n\\n            dvnIndices = new uint8[](1);\\n            dvnIndices[0] = _options.toUint8(3); // dvn idx\\n            return (dvnOptions, dvnIndices);\\n        }\\n\\n        // otherwise, we need to group the options by dvn_idx\\n        dvnIndices = new uint8[](numDVNs);\\n        dvnOptions = new bytes[](numDVNs);\\n        unchecked {\\n            uint256 cursor = 0;\\n            uint256 start = 0;\\n            uint8 lastDVNIdx = 255; // 255 is an invalid dvn_idx\\n\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                // optionLength asserted in getNumDVNs (skip check)\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n\\n                // dvnIdx asserted in getNumDVNs (skip check)\\n                uint8 dvnIdx = _options.toUint8(cursor);\\n\\n                // dvnIdx must equal to the lastDVNIdx for the first option\\n                // so it is always skipped in the first option\\n                // this operation slices out options whenever the scan finds a different lastDVNIdx\\n                if (lastDVNIdx == 255) {\\n                    lastDVNIdx = dvnIdx;\\n                } else if (dvnIdx != lastDVNIdx) {\\n                    uint256 len = cursor - start - 3; // 3 is for worker_id and option_length\\n                    bytes memory opt = _options.slice(start, len);\\n                    _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, opt);\\n\\n                    // reset the start and lastDVNIdx\\n                    start += len;\\n                    lastDVNIdx = dvnIdx;\\n                }\\n\\n                cursor += optionLength;\\n            }\\n\\n            // skip check the cursor here because the cursor is asserted in getNumDVNs\\n            // if we have reached the end of the options, we need to process the last dvn\\n            uint256 size = cursor - start;\\n            bytes memory op = _options.slice(start, size);\\n            _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, op);\\n\\n            // revert dvnIndices to start from 0\\n            for (uint8 i = 0; i < numDVNs; ++i) {\\n                --dvnIndices[i];\\n            }\\n        }\\n    }\\n\\n    function _insertDVNOptions(\\n        bytes[] memory _dvnOptions,\\n        uint8[] memory _dvnIndices,\\n        uint8 _dvnIdx,\\n        bytes memory _newOptions\\n    ) internal pure {\\n        // dvnIdx starts from 0 but default value of dvnIndices is 0,\\n        // so we tell if the slot is empty by adding 1 to dvnIdx\\n        if (_dvnIdx == 255) revert DVN_InvalidDVNIdx();\\n        uint8 dvnIdxAdj = _dvnIdx + 1;\\n\\n        for (uint256 j = 0; j < _dvnIndices.length; ++j) {\\n            uint8 index = _dvnIndices[j];\\n            if (dvnIdxAdj == index) {\\n                _dvnOptions[j] = abi.encodePacked(_dvnOptions[j], _newOptions);\\n                break;\\n            } else if (index == 0) {\\n                // empty slot, that means it is the first time we see this dvn\\n                _dvnIndices[j] = dvnIdxAdj;\\n                _dvnOptions[j] = _newOptions;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev get the number of unique dvns\\n    /// @param _options the format is the same as groupDVNOptionsByIdx\\n    function getNumDVNs(bytes memory _options) internal pure returns (uint8 numDVNs) {\\n        uint256 cursor = 0;\\n        BitMap256 bitmap;\\n\\n        // find number of unique dvn_idx\\n        unchecked {\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n                if (optionLength < 2) revert DVN_InvalidDVNOptions(cursor); // at least 1 byte for dvn_idx and 1 byte for option_type\\n\\n                uint8 dvnIdx = _options.toUint8(cursor);\\n\\n                // if dvnIdx is not set, increment numDVNs\\n                // max num of dvns is 255, 255 is an invalid dvn_idx\\n                // The order of the dvnIdx is not required to be sequential, as enforcing the order may weaken\\n                // the composability of the options. e.g. if we refrain from enforcing the order, an OApp that has\\n                // already enforced certain options can append additional options to the end of the enforced\\n                // ones without restrictions.\\n                if (dvnIdx == 255) revert DVN_InvalidDVNIdx();\\n                if (!bitmap.get(dvnIdx)) {\\n                    ++numDVNs;\\n                    bitmap = bitmap.set(dvnIdx);\\n                }\\n\\n                cursor += optionLength;\\n            }\\n        }\\n        if (cursor != _options.length) revert DVN_InvalidDVNOptions(cursor);\\n    }\\n\\n    /// @dev decode the next dvn option from _options starting from the specified cursor\\n    /// @param _options the format is the same as groupDVNOptionsByIdx\\n    /// @param _cursor the cursor to start decoding\\n    /// @return optionType the type of the option\\n    /// @return option the option\\n    /// @return cursor the cursor to start decoding the next option\\n    function nextDVNOption(\\n        bytes calldata _options,\\n        uint256 _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor + 1); // skip dvn_idx\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint256 startCursor = cursor + 2; // skip option type and dvn_idx\\n            uint256 endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2beee03cdf59a9bc72e94d08b69cb2e908725f4ceabb48651494938100e21e35\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/libs/ReadCmdCodecV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nstruct EVMCallRequestV1 {\\n    uint16 appRequestLabel; // Label identifying the application or type of request (can be use in lzCompute)\\n    uint32 targetEid; // Target endpoint ID (representing a target blockchain)\\n    bool isBlockNum; // True if the request = block number, false if timestamp\\n    uint64 blockNumOrTimestamp; // Block number or timestamp to use in the request\\n    uint16 confirmations; // Number of block confirmations on top of the requested block number or timestamp before the view function can be called\\n    address to; // Address of the target contract on the target chain\\n    bytes callData; // Calldata for the contract call\\n}\\n\\nstruct EVMCallComputeV1 {\\n    uint8 computeSetting; // Compute setting (0 = map only, 1 = reduce only, 2 = map reduce)\\n    uint32 targetEid; // Target endpoint ID (representing a target blockchain)\\n    bool isBlockNum; // True if the request = block number, false if timestamp\\n    uint64 blockNumOrTimestamp; // Block number or timestamp to use in the request\\n    uint16 confirmations; // Number of block confirmations on top of the requested block number or timestamp before the view function can be called\\n    address to; // Address of the target contract on the target chain\\n}\\n\\nlibrary ReadCmdCodecV1 {\\n    using SafeCast for uint256;\\n\\n    uint16 internal constant CMD_VERSION = 1;\\n\\n    uint8 internal constant REQUEST_VERSION = 1;\\n    uint16 internal constant RESOLVER_TYPE_SINGLE_VIEW_EVM_CALL = 1;\\n\\n    uint8 internal constant COMPUTE_VERSION = 1;\\n    uint16 internal constant COMPUTE_TYPE_SINGLE_VIEW_EVM_CALL = 1;\\n\\n    error InvalidVersion();\\n    error InvalidType();\\n\\n    function decode(\\n        bytes calldata _cmd\\n    )\\n        internal\\n        pure\\n        returns (uint16 appCmdLabel, EVMCallRequestV1[] memory evmCallRequests, EVMCallComputeV1 memory compute)\\n    {\\n        uint256 offset = 0;\\n        uint16 cmdVersion = uint16(bytes2(_cmd[offset:offset + 2]));\\n        offset += 2;\\n        if (cmdVersion != CMD_VERSION) revert InvalidVersion();\\n\\n        appCmdLabel = uint16(bytes2(_cmd[offset:offset + 2]));\\n        offset += 2;\\n\\n        (evmCallRequests, offset) = decodeRequestsV1(_cmd, offset);\\n\\n        // decode the compute if it exists\\n        if (offset < _cmd.length) {\\n            (compute, ) = decodeEVMCallComputeV1(_cmd, offset);\\n        }\\n    }\\n\\n    function decodeRequestsV1(\\n        bytes calldata _cmd,\\n        uint256 _offset\\n    ) internal pure returns (EVMCallRequestV1[] memory evmCallRequests, uint256 newOffset) {\\n        newOffset = _offset;\\n        uint16 requestCount = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n\\n        evmCallRequests = new EVMCallRequestV1[](requestCount);\\n        for (uint16 i = 0; i < requestCount; i++) {\\n            uint8 requestVersion = uint8(_cmd[newOffset]);\\n            newOffset += 1;\\n            if (requestVersion != REQUEST_VERSION) revert InvalidVersion();\\n\\n            uint16 appRequestLabel = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n            newOffset += 2;\\n\\n            uint16 resolverType = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n            newOffset += 2;\\n\\n            if (resolverType == RESOLVER_TYPE_SINGLE_VIEW_EVM_CALL) {\\n                (EVMCallRequestV1 memory request, uint256 nextOffset) = decodeEVMCallRequestV1(\\n                    _cmd,\\n                    newOffset,\\n                    appRequestLabel\\n                );\\n                newOffset = nextOffset;\\n                evmCallRequests[i] = request;\\n            } else {\\n                revert InvalidType();\\n            }\\n        }\\n    }\\n\\n    function decodeEVMCallRequestV1(\\n        bytes calldata _cmd,\\n        uint256 _offset,\\n        uint16 _appRequestLabel\\n    ) internal pure returns (EVMCallRequestV1 memory request, uint256 newOffset) {\\n        newOffset = _offset;\\n        request.appRequestLabel = _appRequestLabel;\\n\\n        uint16 requestSize = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n        request.targetEid = uint32(bytes4(_cmd[newOffset:newOffset + 4]));\\n        newOffset += 4;\\n        request.isBlockNum = uint8(_cmd[newOffset]) == 1;\\n        newOffset += 1;\\n        request.blockNumOrTimestamp = uint64(bytes8(_cmd[newOffset:newOffset + 8]));\\n        newOffset += 8;\\n        request.confirmations = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n        request.to = address(bytes20(_cmd[newOffset:newOffset + 20]));\\n        newOffset += 20;\\n        uint16 callDataSize = requestSize - 35;\\n        request.callData = _cmd[newOffset:newOffset + callDataSize];\\n        newOffset += callDataSize;\\n    }\\n\\n    function decodeEVMCallComputeV1(\\n        bytes calldata _cmd,\\n        uint256 _offset\\n    ) internal pure returns (EVMCallComputeV1 memory compute, uint256 newOffset) {\\n        newOffset = _offset;\\n        uint8 computeVersion = uint8(_cmd[newOffset]);\\n        newOffset += 1;\\n        if (computeVersion != COMPUTE_VERSION) revert InvalidVersion();\\n        uint16 computeType = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n        if (computeType != COMPUTE_TYPE_SINGLE_VIEW_EVM_CALL) revert InvalidType();\\n\\n        compute.computeSetting = uint8(_cmd[newOffset]);\\n        newOffset += 1;\\n        compute.targetEid = uint32(bytes4(_cmd[newOffset:newOffset + 4]));\\n        newOffset += 4;\\n        compute.isBlockNum = uint8(_cmd[newOffset]) == 1;\\n        newOffset += 1;\\n        compute.blockNumOrTimestamp = uint64(bytes8(_cmd[newOffset:newOffset + 8]));\\n        newOffset += 8;\\n        compute.confirmations = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n        compute.to = address(bytes20(_cmd[newOffset:newOffset + 20]));\\n        newOffset += 20;\\n    }\\n\\n    function decodeCmdAppLabel(bytes calldata _cmd) internal pure returns (uint16) {\\n        uint256 offset = 0;\\n        uint16 cmdVersion = uint16(bytes2(_cmd[offset:offset + 2]));\\n        offset += 2;\\n        if (cmdVersion != CMD_VERSION) revert InvalidVersion();\\n\\n        return uint16(bytes2(_cmd[offset:offset + 2]));\\n    }\\n\\n    function decodeRequestV1AppRequestLabel(bytes calldata _request) internal pure returns (uint16) {\\n        uint256 offset = 0;\\n        uint8 requestVersion = uint8(_request[offset]);\\n        offset += 1;\\n        if (requestVersion != REQUEST_VERSION) revert InvalidVersion();\\n\\n        return uint16(bytes2(_request[offset:offset + 2]));\\n    }\\n\\n    function encode(\\n        uint16 _appCmdLabel,\\n        EVMCallRequestV1[] memory _evmCallRequests,\\n        EVMCallComputeV1 memory _evmCallCompute\\n    ) internal pure returns (bytes memory) {\\n        bytes memory cmd = encode(_appCmdLabel, _evmCallRequests);\\n        if (_evmCallCompute.targetEid != 0) {\\n            // if eid is 0, it means no compute\\n            cmd = appendEVMCallComputeV1(cmd, _evmCallCompute);\\n        }\\n        return cmd;\\n    }\\n\\n    function encode(\\n        uint16 _appCmdLabel,\\n        EVMCallRequestV1[] memory _evmCallRequests\\n    ) internal pure returns (bytes memory) {\\n        bytes memory cmd = abi.encodePacked(CMD_VERSION, _appCmdLabel, _evmCallRequests.length.toUint16());\\n        for (uint256 i = 0; i < _evmCallRequests.length; i++) {\\n            cmd = appendEVMCallRequestV1(cmd, _evmCallRequests[i]);\\n        }\\n        return cmd;\\n    }\\n\\n    // todo: optimize this with Buffer\\n    function appendEVMCallRequestV1(\\n        bytes memory _cmd,\\n        EVMCallRequestV1 memory _request\\n    ) internal pure returns (bytes memory) {\\n        bytes memory newCmd = abi.encodePacked(\\n            _cmd,\\n            REQUEST_VERSION,\\n            _request.appRequestLabel,\\n            RESOLVER_TYPE_SINGLE_VIEW_EVM_CALL,\\n            (_request.callData.length + 35).toUint16(),\\n            _request.targetEid\\n        );\\n        return\\n            abi.encodePacked(\\n                newCmd,\\n                _request.isBlockNum,\\n                _request.blockNumOrTimestamp,\\n                _request.confirmations,\\n                _request.to,\\n                _request.callData\\n            );\\n    }\\n\\n    function appendEVMCallComputeV1(\\n        bytes memory _cmd,\\n        EVMCallComputeV1 memory _compute\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _cmd,\\n                COMPUTE_VERSION,\\n                COMPUTE_TYPE_SINGLE_VIEW_EVM_CALL,\\n                _compute.computeSetting,\\n                _compute.targetEid,\\n                _compute.isBlockNum,\\n                _compute.blockNumOrTimestamp,\\n                _compute.confirmations,\\n                _compute.to\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x2e622cf35b8636487540cb467cdc131d14c502ad057a00e9306485cb32f226cd\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary AddressCast {\\n    error AddressCast_InvalidSizeForAddress();\\n    error AddressCast_InvalidAddress();\\n\\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\\n        result = bytes32(_addressBytes);\\n        unchecked {\\n            uint256 offset = 32 - _addressBytes.length;\\n            result = result >> (offset * 8);\\n        }\\n    }\\n\\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\\n        result = bytes32(uint256(uint160(_address)));\\n    }\\n\\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\\n        if (_size == 0 || _size > 32) revert AddressCast_InvalidSizeForAddress();\\n        result = new bytes(_size);\\n        unchecked {\\n            uint256 offset = 256 - _size * 8;\\n            assembly {\\n                mstore(add(result, 32), shl(offset, _addressBytes32))\\n            }\\n        }\\n    }\\n\\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\\n        result = address(uint160(uint256(_addressBytes32)));\\n    }\\n\\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\\n        result = address(bytes20(_addressBytes));\\n    }\\n}\\n\",\"keccak256\":\"0x2ebbcaaab3554edcd41b581f1a72ac1806afbfb8047d0d47ff098f9af30d6deb\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary CalldataBytesLib {\\n    function toU8(bytes calldata _bytes, uint256 _start) internal pure returns (uint8) {\\n        return uint8(_bytes[_start]);\\n    }\\n\\n    function toU16(bytes calldata _bytes, uint256 _start) internal pure returns (uint16) {\\n        unchecked {\\n            uint256 end = _start + 2;\\n            return uint16(bytes2(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU32(bytes calldata _bytes, uint256 _start) internal pure returns (uint32) {\\n        unchecked {\\n            uint256 end = _start + 4;\\n            return uint32(bytes4(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU64(bytes calldata _bytes, uint256 _start) internal pure returns (uint64) {\\n        unchecked {\\n            uint256 end = _start + 8;\\n            return uint64(bytes8(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU128(bytes calldata _bytes, uint256 _start) internal pure returns (uint128) {\\n        unchecked {\\n            uint256 end = _start + 16;\\n            return uint128(bytes16(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU256(bytes calldata _bytes, uint256 _start) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return uint256(bytes32(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toAddr(bytes calldata _bytes, uint256 _start) internal pure returns (address) {\\n        unchecked {\\n            uint256 end = _start + 20;\\n            return address(bytes20(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toB32(bytes calldata _bytes, uint256 _start) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return bytes32(_bytes[_start:end]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c0db161cef6603c3b256d4220f489419e7478ef775e52a80056654129c61875\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/BitMaps.sol\\npragma solidity ^0.8.20;\\n\\ntype BitMap256 is uint256;\\n\\nusing BitMaps for BitMap256 global;\\n\\nlibrary BitMaps {\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap256 bitmap, uint8 index) internal pure returns (bool) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.unwrap(bitmap) & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap256 bitmap, uint8 index) internal pure returns (BitMap256) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.wrap(BitMap256.unwrap(bitmap) | mask);\\n    }\\n}\\n\",\"keccak256\":\"0xaad3c72ef43480d2253fd48b394e8fb7286d009991d2bc4e61be58ce48ac5ee9\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppRead.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { AddressCast } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\\\";\\n\\nimport { OApp } from \\\"./OApp.sol\\\";\\n\\nabstract contract OAppRead is OApp {\\n    constructor(address _endpoint, address _delegate) OApp(_endpoint, _delegate) {}\\n\\n    // -------------------------------\\n    // Only Owner\\n    function setReadChannel(uint32 _channelId, bool _active) public virtual onlyOwner {\\n        _setPeer(_channelId, _active ? AddressCast.toBytes32(address(this)) : bytes32(0));\\n    }\\n}\\n\",\"keccak256\":\"0x1d738b541a31716e81305f09084cf22c000ab6233dcb96db315026fc88062ff6\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OptionsBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { BytesLib } from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { ExecutorOptions } from \\\"@layerzerolabs/lz-evm-messagelib-v2/contracts/libs/ExecutorOptions.sol\\\";\\nimport { DVNOptions } from \\\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol\\\";\\n\\n/**\\n * @title OptionsBuilder\\n * @dev Library for building and encoding various message options.\\n */\\nlibrary OptionsBuilder {\\n    using SafeCast for uint256;\\n    using BytesLib for bytes;\\n\\n    // Constants for options types\\n    uint16 internal constant TYPE_1 = 1; // legacy options type 1\\n    uint16 internal constant TYPE_2 = 2; // legacy options type 2\\n    uint16 internal constant TYPE_3 = 3;\\n\\n    // Custom error message\\n    error InvalidSize(uint256 max, uint256 actual);\\n    error InvalidOptionType(uint16 optionType);\\n\\n    // Modifier to ensure only options of type 3 are used\\n    modifier onlyType3(bytes memory _options) {\\n        if (_options.toUint16(0) != TYPE_3) revert InvalidOptionType(_options.toUint16(0));\\n        _;\\n    }\\n\\n    /**\\n     * @dev Creates a new options container with type 3.\\n     * @return options The newly created options container.\\n     */\\n    function newOptions() internal pure returns (bytes memory) {\\n        return abi.encodePacked(TYPE_3);\\n    }\\n\\n    /**\\n     * @dev Adds an executor LZ receive option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _gas The gasLimit used on the lzReceive() function in the OApp.\\n     * @param _value The msg.value passed to the lzReceive() function in the OApp.\\n     * @return options The updated options container.\\n     *\\n     * @dev When multiples of this option are added, they are summed by the executor\\n     * eg. if (_gas: 200k, and _value: 1 ether) AND (_gas: 100k, _value: 0.5 ether) are sent in an option to the LayerZeroEndpoint,\\n     * that becomes (300k, 1.5 ether) when the message is executed on the remote lzReceive() function.\\n     */\\n    function addExecutorLzReceiveOption(\\n        bytes memory _options,\\n        uint128 _gas,\\n        uint128 _value\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeLzReceiveOption(_gas, _value);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_LZRECEIVE, option);\\n    }\\n\\n    /**\\n     * @dev Adds an executor native drop option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _amount The amount for the native value that is airdropped to the 'receiver'.\\n     * @param _receiver The receiver address for the native drop option.\\n     * @return options The updated options container.\\n     *\\n     * @dev When multiples of this option are added, they are summed by the executor on the remote chain.\\n     */\\n    function addExecutorNativeDropOption(\\n        bytes memory _options,\\n        uint128 _amount,\\n        bytes32 _receiver\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeNativeDropOption(_amount, _receiver);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_NATIVE_DROP, option);\\n    }\\n\\n    // /**\\n    //  * @dev Adds an executor native drop option to the existing options.\\n    //  * @param _options The existing options container.\\n    //  * @param _amount The amount for the native value that is airdropped to the 'receiver'.\\n    //  * @param _receiver The receiver address for the native drop option.\\n    //  * @return options The updated options container.\\n    //  *\\n    //  * @dev When multiples of this option are added, they are summed by the executor on the remote chain.\\n    //  */\\n    function addExecutorLzReadOption(\\n        bytes memory _options,\\n        uint128 _gas,\\n        uint32 _size,\\n        uint128 _value\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeLzReadOption(_gas, _size, _value);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_LZREAD, option);\\n    }\\n\\n    /**\\n     * @dev Adds an executor LZ compose option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _index The index for the lzCompose() function call.\\n     * @param _gas The gasLimit for the lzCompose() function call.\\n     * @param _value The msg.value for the lzCompose() function call.\\n     * @return options The updated options container.\\n     *\\n     * @dev When multiples of this option are added, they are summed PER index by the executor on the remote chain.\\n     * @dev If the OApp sends N lzCompose calls on the remote, you must provide N incremented indexes starting with 0.\\n     * ie. When your remote OApp composes (N = 3) messages, you must set this option for index 0,1,2\\n     */\\n    function addExecutorLzComposeOption(\\n        bytes memory _options,\\n        uint16 _index,\\n        uint128 _gas,\\n        uint128 _value\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeLzComposeOption(_index, _gas, _value);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_LZCOMPOSE, option);\\n    }\\n\\n    /**\\n     * @dev Adds an executor ordered execution option to the existing options.\\n     * @param _options The existing options container.\\n     * @return options The updated options container.\\n     */\\n    function addExecutorOrderedExecutionOption(\\n        bytes memory _options\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_ORDERED_EXECUTION, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @dev Adds a DVN pre-crime option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _dvnIdx The DVN index for the pre-crime option.\\n     * @return options The updated options container.\\n     */\\n    function addDVNPreCrimeOption(\\n        bytes memory _options,\\n        uint8 _dvnIdx\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return addDVNOption(_options, _dvnIdx, DVNOptions.OPTION_TYPE_PRECRIME, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @dev Adds an executor option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _optionType The type of the executor option.\\n     * @param _option The encoded data for the executor option.\\n     * @return options The updated options container.\\n     */\\n    function addExecutorOption(\\n        bytes memory _options,\\n        uint8 _optionType,\\n        bytes memory _option\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _options,\\n                ExecutorOptions.WORKER_ID,\\n                _option.length.toUint16() + 1, // +1 for optionType\\n                _optionType,\\n                _option\\n            );\\n    }\\n\\n    /**\\n     * @dev Adds a DVN option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _dvnIdx The DVN index for the DVN option.\\n     * @param _optionType The type of the DVN option.\\n     * @param _option The encoded data for the DVN option.\\n     * @return options The updated options container.\\n     */\\n    function addDVNOption(\\n        bytes memory _options,\\n        uint8 _dvnIdx,\\n        uint8 _optionType,\\n        bytes memory _option\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _options,\\n                DVNOptions.WORKER_ID,\\n                _option.length.toUint16() + 2, // +2 for optionType and dvnIdx\\n                _dvnIdx,\\n                _optionType,\\n                _option\\n            );\\n    }\\n\\n    /**\\n     * @dev Encodes legacy options of type 1.\\n     * @param _executionGas The gasLimit value passed to lzReceive().\\n     * @return legacyOptions The encoded legacy options.\\n     */\\n    function encodeLegacyOptionsType1(uint256 _executionGas) internal pure returns (bytes memory) {\\n        if (_executionGas > type(uint128).max) revert InvalidSize(type(uint128).max, _executionGas);\\n        return abi.encodePacked(TYPE_1, _executionGas);\\n    }\\n\\n    /**\\n     * @dev Encodes legacy options of type 2.\\n     * @param _executionGas The gasLimit value passed to lzReceive().\\n     * @param _nativeForDst The amount of native air dropped to the receiver.\\n     * @param _receiver The _nativeForDst receiver address.\\n     * @return legacyOptions The encoded legacy options of type 2.\\n     */\\n    function encodeLegacyOptionsType2(\\n        uint256 _executionGas,\\n        uint256 _nativeForDst,\\n        bytes memory _receiver // @dev Use bytes instead of bytes32 in legacy type 2 for _receiver.\\n    ) internal pure returns (bytes memory) {\\n        if (_executionGas > type(uint128).max) revert InvalidSize(type(uint128).max, _executionGas);\\n        if (_nativeForDst > type(uint128).max) revert InvalidSize(type(uint128).max, _nativeForDst);\\n        if (_receiver.length > 32) revert InvalidSize(32, _receiver.length);\\n        return abi.encodePacked(TYPE_2, _executionGas, _nativeForDst, _receiver);\\n    }\\n}\\n\",\"keccak256\":\"0xd40d91e8173cdb5bb821b4594f806b99344d5fd605bc6f2cf0fb21d5ab2500e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"contracts/PallasTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title PallasTypes\\n * @dev Common types used in Pallas operations\\n */\\n\\n/// @title Point Structure\\n/// @notice Represents a point on an elliptic curve with x and y coordinates\\n/// @dev Used for public key and signature operations\\nstruct Point {\\n    uint256 x;\\n    uint256 y;\\n}\\n\\n/// @title Compressed Point Structure\\n/// @notice Represents a compressed form of an elliptic curve point\\n/// @dev Uses x-coordinate and a boolean flag instead of full coordinates\\nstruct PointCompressed {\\n    uint256 x;\\n    bool isOdd;\\n}\\n\\n/// @title Digital Signature Structure\\n/// @notice Represents a digital signature with its components\\n/// @dev Used for cryptographic signature verification\\nstruct Signature {\\n    uint256 r;\\n    uint256 s;\\n}\\n\\n/// @title Projective Point Structure\\n/// @notice Represents a point in projective coordinates\\n/// @dev Used for efficient elliptic curve operations\\nstruct ProjectivePoint {\\n    uint256 x;\\n    uint256 y;\\n    uint256 z;\\n}\\n\\n/// @title Verify Fields State Structure\\n/// @notice Holds the state for field array signature verification process\\n/// @dev Used to track the progress and store intermediate results during verification\\nstruct VerifyFieldsState {\\n    /// @notice Indicates if the state has been properly initialized\\n    bool init;\\n    /// @notice Network flag - true for mainnet, false for testnet\\n    bool mainnet;\\n    /// @notice Final verification result\\n    bool isValid;\\n    /// @notice Tracks the current step of verification (0-6)\\n    uint8 atStep;\\n    /// @notice The public key point (x,y) being verified against\\n    Point publicKey;\\n    /// @notice The signature containing r (x-coordinate) and s (scalar)\\n    Signature signature;\\n    /// @notice Hash of the fields array with prefix ('e' value)\\n    uint256 messageHash;\\n    /// @notice Public key converted to curve point format\\n    Point pkInGroup;\\n    /// @notice Result of scalar multiplication s*G\\n    Point sG;\\n    /// @notice Result of scalar multiplication e*pkInGroup\\n    Point ePk;\\n    /// @notice Final computed point R = sG - ePk\\n    Point R;\\n    /// @notice Network-specific prefix for message hashing\\n    string prefix;\\n    /// @notice Array of field elements to verify\\n    uint256[] fields;\\n}\\n\\n/// @title Verification Fields State Compressed Structure.\\n/// @notice Holds only the primary state for message signature verification process\\nstruct VerifyFieldsStateCompressed {\\n    /// @notice Indicates the type. 1 for Message, 2 for Fields. Helpful when reading\\n    uint8 verifyType;\\n    /// @notice The unique id\\n    uint256 vfId;\\n    /// @notice Network flag - true for mainnet, false for testnet\\n    bool mainnet;\\n    /// @notice Final verification result\\n    bool isValid;\\n    /// @notice The public key point (x,y) being verified against\\n    Point publicKey;\\n    /// @notice The signature containing r (x-coordinate) and s (scalar)\\n    Signature signature;\\n    /// @notice Hash of the fields array with prefix ('e' value)\\n    uint256 messageHash;\\n    /// @notice Network-specific prefix for message hashing\\n    string prefix;\\n    /// @notice Array of field elements to verify\\n    uint256[] fields;\\n}\\n\\n/// @title Verification Message State Structure\\n/// @notice Holds the state for message signature verification process\\n/// @dev Used to track the progress and store intermediate results during verification\\nstruct VerifyMessageState {\\n    /// @notice Indicates if the state has been properly initialized\\n    bool init;\\n    /// @notice Network flag - true for mainnet, false for testnet\\n    bool mainnet;\\n    /// @notice Final verification result\\n    bool isValid;\\n    /// @notice Tracks the current step of verification (0-6)\\n    uint8 atStep;\\n    /// @notice The public key point (x,y) being verified against\\n    Point publicKey;\\n    /// @notice The signature containing r (x-coordinate) and s (scalar)\\n    Signature signature;\\n    /// @notice Stores the computed hash of the message\\n    uint256 messageHash;\\n    /// @notice Public key converted to group form\\n    Point pkInGroup;\\n    /// @notice Result of scalar multiplication s*G\\n    Point sG;\\n    /// @notice Result of scalar multiplication e*pkInGroup\\n    Point ePk;\\n    /// @notice Final computed point R = sG - ePk\\n    Point R;\\n    /// @notice The message being verified\\n    string message;\\n    /// @notice Network-specific prefix for message hashing\\n    string prefix;\\n}\\n\\n/// @title Verification Message State Compressed Structure.\\n/// @notice Holds only the primary state for message signature verification process\\nstruct VerifyMessageStateCompressed {\\n    /// @notice Indicates the type. 1 for Message, 2 for Fields. Helpful when reading\\n    uint8 verifyType;\\n    /// @notice The unique id\\n    uint256 vmId;\\n    /// @notice Network flag - true for mainnet, false for testnet\\n    bool mainnet;\\n    /// @notice Final verification result\\n    bool isValid;\\n    /// @notice The public key point (x,y) being verified against\\n    Point publicKey;\\n    /// @notice The signature containing r (x-coordinate) and s (scalar)\\n    Signature signature;\\n    /// @notice Stores the computed hash of the message\\n    uint256 messageHash;\\n    /// @notice Network-specific prefix for message hashing\\n    string prefix;\\n    /// @notice The message being verified\\n    string message;\\n}\\n\",\"keccak256\":\"0x4a25aa92925368250b50c58fd7760e79e507d54bfba340ebc477166cec7cfbfa\",\"license\":\"MIT\"},\"contracts/bridge/PallasVerificationReceiever.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ICORE_FieldsVerification.sol\\\";\\nimport \\\"../interfaces/ICORE_MessageVerification.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { OAppRead } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OAppRead.sol\\\";\\nimport { OptionsBuilder } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OptionsBuilder.sol\\\";\\nimport { MessagingFee, MessagingReceipt, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { ReadCmdCodecV1, EVMCallComputeV1, EVMCallRequestV1 } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/libs/ReadCmdCodecV1.sol\\\";\\n\\n/// @title ChainConfig\\n/// @notice Configuration structure for chain-specific settings\\n/// @param confirmations Number of confirmations required\\n/// @param toReadFrom Address to read from\\nstruct ChainConfig {\\n    uint16 confirmations;\\n    address toReadFrom;\\n}\\n\\n/// @notice Structure to hold quote calculation results\\n/// @param gasLimit Gas limit for the transaction\\n/// @param calldataSize Size of the calldata\\n/// @param nativeFee Fee in native currency\\n/// @param lzTokenFee Fee in LayerZero tokens\\nstruct QuoteResult {\\n    uint128 gasLimit;\\n    uint32 calldataSize;\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\n/// @notice Structure to hold read configs\\n/// @param gasLimit Gas limit for the transaction\\n/// @param messageSize Size of the original string(bytes)\\n/// @param fieldsSize Size of the original fields array(bytes)\\nstruct ModeConfig {\\n    uint128 gasLimit;\\n    uint32 messageSize;\\n    uint32 fieldsSize;\\n}\\n\\n/// @notice To decide the type incoming read bytes.\\nenum TYPE {\\n    VERIFY_PLACEHOLDER_DO_NOT_USE,\\n    VERIFY_MESSAGE,\\n    VERIFY_FIELDS\\n}\\n\\n/// @notice Type of automatic modes. Helps decide ModeConfig.\\nenum MODE {\\n    CONSERVATIVE,\\n    DEFAULT,\\n    OPTIMISTIC\\n}\\n\\n/// @notice Error thrown when the provided fee is insufficient\\n/// @param required The required fee amount\\n/// @param provided The provided fee amount\\nerror InsufficientFee(uint256 required, uint256 provided);\\n\\n/// @title PallasVerificationReceiever\\n/// @notice Contract for receiving and processing cross-chain verification data\\n/// @dev Inherits from OAppRead for cross-chain messaging and Ownable for access control\\n/// @dev Default configuration for ETH origin chain and ARB target chain.\\ncontract PallasVerificationReceiever is OAppRead {\\n    /// @notice Signature prefix for mainnet network mode\\n    string public constant MAINNET_PREFIX = \\\"MinaSignatureMainnet\\\";\\n    /// @notice Signature prefix for testnet network mode\\n    string public constant TESTNET_PREFIX = \\\"CodaSignature*******\\\";\\n\\n    /// @notice Setting for no computation (Ie no lzMap/lzReduce)\\n    uint8 constant SETTING_NONE = 3;\\n\\n    uint32 public constant READ_CHANNEL_EID_THRESHOLD = 4294965694;\\n    uint32 public READ_CHANNEL_ID = 4294967295;\\n\\n    /// @dev Target chain - Reading from.\\n    uint32 public READ_FROM_ENDPOINT_ID = 30110; // ARB\\n    address public READ_FROM_ENDPOINT_ADDRESS = 0x1a44076050125825900e736c501f859c50fE728c;\\n\\n    /// @dev Origin chain - Reading to.\\n    uint32 public READ_TO_ENDPOINT_ID = 30101; // ETH\\n    address public READ_TO_ENDPOINT_ADDRESS = 0x1a44076050125825900e736c501f859c50fE728c;\\n\\n    /// @dev Read block confirmations required\\n    uint16 public BLOCK_CONFIRMATIONS = 3;\\n\\n    /// @notice Conservative gas limit for transactions (100 Chars/20 Fields)\\n    /// @dev Decoding gas - 714k(Fields)\\n    ModeConfig public CONSERVATIVE_CONFIG = ModeConfig({ gasLimit: 750000, messageSize: 800, fieldsSize: 2000 });\\n\\n    /// @notice Default gas limit for transactions (250 Chars/50 Fields)\\n    /// @dev Decoding gas - 1.4m(Fields)\\n    ModeConfig public DEFAULT_CONFIG = ModeConfig({ gasLimit: 1500000, messageSize: 1100, fieldsSize: 3800 });\\n\\n    /// @notice Optimistic gas limit for transactions (500 Chars/100 Fields)\\n    /// @dev Decoding gas - 2.5m(Fields)\\n    ModeConfig public OPTIMISTIC_CONFIG = ModeConfig({ gasLimit: 2600000, messageSize: 1600, fieldsSize: 7000 });\\n\\n    /// @notice Read configuration for vf and vm\\n    ChainConfig public CHAIN_CONFIG_VF = ChainConfig({ confirmations: 1, toReadFrom: address(0) });\\n    ChainConfig public CHAIN_CONFIG_VM = ChainConfig({ confirmations: 1, toReadFrom: address(0) });\\n\\n    /// @notice Mapping of verification field IDs to their compressed data\\n    mapping(uint256 => VerifyFieldsStateCompressed) public vfIdToData;\\n    /// @notice Mapping of verification message IDs to their compressed data\\n    mapping(uint256 => VerifyMessageStateCompressed) public vmIdToData;\\n\\n    /// @notice Emitted when an arbitrary message is received.\\n    ///         All _lzReceive() calls apart from read responses.\\n    /// @param origin Origin information of the message\\n    /// @param message The received message data\\n    event ArbitraryMessageReceived(Origin origin, bytes message);\\n\\n    /// @notice Emitted when a valid read is received.\\n    event ReadReceived(Origin origin, bytes message);\\n\\n    /// @notice Constructor for PallasVerificationReceiever\\n    /// @param _endpoint Address of the LayerZero endpoint\\n    /// @param _delegate Address of the delegate\\n    constructor(\\n        address _endpoint,\\n        address _delegate,\\n        address _verifyFields,\\n        address _verifyMessage\\n    ) OAppRead(_endpoint, _delegate) Ownable(_delegate) {\\n        CHAIN_CONFIG_VF = ChainConfig({ confirmations: BLOCK_CONFIRMATIONS, toReadFrom: _verifyFields });\\n        CHAIN_CONFIG_VM = ChainConfig({ confirmations: BLOCK_CONFIRMATIONS, toReadFrom: _verifyMessage });\\n    }\\n\\n    /// @notice To get Verify Fields mapping value\\n    function getVFIdToData(uint256 id) external view returns (VerifyFieldsStateCompressed memory state) {\\n        return vfIdToData[id];\\n    }\\n\\n    /// @notice To get Verify Message mapping value\\n    function getVMIdToData(uint256 id) external view returns (VerifyMessageStateCompressed memory state) {\\n        return vmIdToData[id];\\n    }\\n\\n    /// @notice Gets quote for transaction with manual parameters\\n    /// @param verifyType Type of verification\\n    /// @param id Verification ID\\n    /// @param calldataSize Size of calldata\\n    /// @param gasLimit Gas limit for the transaction\\n    /// @param payInLzToken Whether to pay in LayerZero tokens\\n    /// @return QuoteResult Result containing gas and fee information\\n    function quote(\\n        TYPE verifyType,\\n        uint256 id,\\n        uint32 calldataSize,\\n        uint128 gasLimit,\\n        bool payInLzToken\\n    ) public view returns (QuoteResult memory, bytes memory, bytes memory) {\\n        if (verifyType == TYPE.VERIFY_PLACEHOLDER_DO_NOT_USE) revert();\\n\\n        bytes memory _options = OptionsBuilder.newOptions();\\n        _options = OptionsBuilder.addExecutorLzReadOption(_options, gasLimit, calldataSize, 0);\\n        bytes memory _cmd = _getCmd(verifyType, id);\\n        MessagingFee memory fee = _quote(READ_CHANNEL_ID, _cmd, _options, payInLzToken);\\n\\n        return (\\n            QuoteResult({\\n                gasLimit: gasLimit,\\n                calldataSize: calldataSize,\\n                nativeFee: fee.nativeFee,\\n                lzTokenFee: fee.lzTokenFee\\n            }),\\n            _cmd,\\n            _options\\n        );\\n    }\\n\\n    /// @notice Gets automatic quote for transaction\\n    /// @param verifyType Type of verification\\n    /// @param id Verification ID\\n    /// @param mode Whether to use optimistic mode\\n    /// @param payInLzToken Whether to pay in LayerZero tokens\\n    /// @return QuoteResult Result containing gas and fee information\\n    function quoteAuto(\\n        TYPE verifyType,\\n        uint256 id,\\n        MODE mode,\\n        bool payInLzToken\\n    ) public view returns (QuoteResult memory, bytes memory, bytes memory) {\\n        if (verifyType == TYPE.VERIFY_PLACEHOLDER_DO_NOT_USE) revert();\\n\\n        uint128 gasLimit;\\n        uint32 calldataSize;\\n\\n        if (mode == MODE.CONSERVATIVE) {\\n            gasLimit = CONSERVATIVE_CONFIG.gasLimit;\\n            calldataSize = verifyType == TYPE.VERIFY_MESSAGE\\n                ? CONSERVATIVE_CONFIG.messageSize\\n                : CONSERVATIVE_CONFIG.fieldsSize;\\n        } else if (mode == MODE.DEFAULT) {\\n            gasLimit = DEFAULT_CONFIG.gasLimit;\\n            calldataSize = verifyType == TYPE.VERIFY_MESSAGE ? DEFAULT_CONFIG.messageSize : DEFAULT_CONFIG.fieldsSize;\\n        } else {\\n            gasLimit = OPTIMISTIC_CONFIG.gasLimit;\\n            calldataSize = verifyType == TYPE.VERIFY_MESSAGE\\n                ? OPTIMISTIC_CONFIG.messageSize\\n                : OPTIMISTIC_CONFIG.fieldsSize;\\n        }\\n\\n        bytes memory _cmd = _getCmd(verifyType, id);\\n        bytes memory _options = OptionsBuilder.newOptions();\\n        _options = OptionsBuilder.addExecutorLzReadOption(_options, gasLimit, calldataSize, 0);\\n        MessagingFee memory fee = _quote(READ_CHANNEL_ID, _cmd, _options, payInLzToken);\\n\\n        return (\\n            QuoteResult({\\n                gasLimit: gasLimit,\\n                calldataSize: calldataSize,\\n                nativeFee: fee.nativeFee,\\n                lzTokenFee: fee.lzTokenFee\\n            }),\\n            _cmd,\\n            _options\\n        );\\n    }\\n\\n    /// @notice Reads compressed bytes with manual parameters\\n    /// @param verifyType Type of verification\\n    /// @param id Verification ID\\n    /// @param calldataSize Size of calldata\\n    /// @param gasLimit Gas limit for the transaction\\n    /// @param payInLzToken Whether to pay in LayerZero tokens\\n    /// @return MessagingReceipt Receipt of the message transaction\\n    function readBytesCompressedManual(\\n        TYPE verifyType,\\n        uint256 id,\\n        uint32 calldataSize,\\n        uint128 gasLimit,\\n        bool payInLzToken\\n    ) external payable returns (MessagingReceipt memory) {\\n        if (verifyType == TYPE.VERIFY_PLACEHOLDER_DO_NOT_USE) revert();\\n\\n        (QuoteResult memory result, bytes memory cmd, bytes memory options) = quote(\\n            verifyType,\\n            id,\\n            calldataSize,\\n            gasLimit,\\n            payInLzToken\\n        );\\n\\n        if (msg.value < result.nativeFee) {\\n            revert InsufficientFee(result.nativeFee, msg.value);\\n        }\\n\\n        return _lzSend(READ_CHANNEL_ID, cmd, options, MessagingFee(msg.value, 0), payable(msg.sender));\\n    }\\n\\n    /// @notice Reads compressed bytes with automatic parameters\\n    /// @param verifyType Type of verification\\n    /// @param id Verification ID\\n    /// @param mode Whether to use conservative/default/optimistic mode\\n    /// @param payInLzToken Whether to pay in LayerZero tokens\\n    /// @return MessagingReceipt Receipt of the message transaction\\n    function readBytesCompressedAuto(\\n        TYPE verifyType,\\n        uint256 id,\\n        MODE mode,\\n        bool payInLzToken\\n    ) external payable returns (MessagingReceipt memory) {\\n        if (verifyType == TYPE.VERIFY_PLACEHOLDER_DO_NOT_USE) revert();\\n\\n        (QuoteResult memory result, bytes memory cmd, bytes memory options) = quoteAuto(\\n            verifyType,\\n            id,\\n            mode,\\n            payInLzToken\\n        );\\n\\n        if (msg.value < result.nativeFee) {\\n            revert InsufficientFee(result.nativeFee, msg.value);\\n        }\\n\\n        return _lzSend(READ_CHANNEL_ID, cmd, options, MessagingFee(msg.value, 0), payable(msg.sender));\\n    }\\n\\n    /// @notice Gets command bytes for verification\\n    /// @param verifyType Type of verification\\n    /// @param id Verification ID\\n    /// @return bytes The command bytes\\n    function _getCmd(TYPE verifyType, uint256 id) internal view returns (bytes memory) {\\n        EVMCallRequestV1[] memory readRequests = new EVMCallRequestV1[](1);\\n\\n        if (verifyType == TYPE.VERIFY_MESSAGE) {\\n            readRequests[0] = EVMCallRequestV1({\\n                appRequestLabel: 1,\\n                targetEid: READ_FROM_ENDPOINT_ID,\\n                isBlockNum: false,\\n                blockNumOrTimestamp: uint64(block.timestamp),\\n                confirmations: CHAIN_CONFIG_VM.confirmations,\\n                to: CHAIN_CONFIG_VM.toReadFrom,\\n                callData: abi.encodeWithSelector(ICORE_MessageVerification.getVMStateBytesCompressed.selector, id)\\n            });\\n        } else if (verifyType == TYPE.VERIFY_FIELDS) {\\n            readRequests[0] = EVMCallRequestV1({\\n                appRequestLabel: 1,\\n                targetEid: READ_FROM_ENDPOINT_ID,\\n                isBlockNum: false,\\n                blockNumOrTimestamp: uint64(block.timestamp),\\n                confirmations: CHAIN_CONFIG_VF.confirmations,\\n                to: CHAIN_CONFIG_VF.toReadFrom,\\n                callData: abi.encodeWithSelector(ICORE_FieldsVerification.getVFStateBytesCompressed.selector, id)\\n            });\\n        }\\n\\n        EVMCallComputeV1 memory computeSettings = EVMCallComputeV1({\\n            computeSetting: SETTING_NONE,\\n            targetEid: 0,\\n            isBlockNum: false,\\n            blockNumOrTimestamp: uint64(block.timestamp),\\n            confirmations: BLOCK_CONFIRMATIONS,\\n            to: address(this)\\n        });\\n\\n        return ReadCmdCodecV1.encode(1, readRequests, computeSettings);\\n    }\\n\\n    /// @notice Internal function to handle incoming messages and read responses.\\n    /// @dev Filters messages based on `srcEid` to determine the type of incoming data.\\n    /// @param _origin The origin information containing the source Endpoint ID (`srcEid`).\\n    /// @param _guid The unique identifier for the received message.\\n    /// @param _message The encoded message data.\\n    /// @param _executor The executor address.\\n    /// @param _extraData Additional data.\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual override {\\n        if (_origin.srcEid > READ_CHANNEL_EID_THRESHOLD) {\\n            bytes memory decoded = abi.decode(_message, (bytes));\\n            this._calldataReadLzReceive(_origin, _guid, decoded, _executor, _extraData);\\n        } else {\\n            emit ArbitraryMessageReceived(_origin, _message);\\n        }\\n    }\\n\\n    /// @notice A helper function to convert memory data to calldata for _readLzReceive.\\n    /// @dev This function can only be called by the contract itself through this._calldataReadLzReceive().\\n    ///      It's used as a bridge to convert memory parameters to calldata when needed.\\n    /// @param _origin The origin information containing the source Endpoint ID.\\n    /// @param _guid The unique identifier for the received message.\\n    /// @param _message The encoded message data that needs to be processed.\\n    /// @param _executor The executor address for the message.\\n    /// @param _extraData Additional data passed with the message.\\n    function _calldataReadLzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external {\\n        require(msg.sender == address(this), \\\"Reserved for self.\\\");\\n        _readLzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /// @notice Internal function to handle lzRead responses.\\n    /// @dev _origin The origin information (unused in this implementation).\\n    /// @dev _guid The unique identifier for the received message (unused in this implementation).\\n    /// @param _message The encoded message data.\\n    /// @dev _executor The executor address (unused in this implementation).\\n    /// @dev _extraData Additional data (unused in this implementation).\\n    function _readLzReceive(\\n        Origin calldata _origin,\\n        bytes32 /* _guid */,\\n        bytes calldata _message,\\n        address /* _executor */,\\n        bytes calldata /* _extraData */\\n    ) internal virtual {\\n        TYPE verifyType = TYPE(uint8(_message[0]));\\n\\n        if (verifyType == TYPE.VERIFY_FIELDS) {\\n            (uint256 id, VerifyFieldsStateCompressed memory state) = _unpackVerifyFieldsState(_message);\\n            vfIdToData[id] = state;\\n            emit ReadReceived(_origin, _message);\\n        } else if (verifyType == TYPE.VERIFY_MESSAGE) {\\n            (uint256 id, VerifyMessageStateCompressed memory state) = _unpackVerifyMessageState(_message);\\n            vmIdToData[id] = state;\\n            emit ReadReceived(_origin, _message);\\n        } else {\\n            emit ArbitraryMessageReceived(_origin, _message);\\n        }\\n    }\\n\\n    /// @notice Unpacks verify fields state from bytes\\n    /// @param data The encoded fields state data\\n    /// @return id The fields ID\\n    /// @return state The unpacked verify fields state\\n    function _unpackVerifyFieldsState(\\n        bytes calldata data\\n    ) internal pure returns (uint256 id, VerifyFieldsStateCompressed memory state) {\\n        state.verifyType = uint8(data[0]);\\n        state.vfId = uint256(bytes32(data[1:33]));\\n        state.mainnet = (data[33] != 0);\\n        state.isValid = (data[34] != 0);\\n\\n        uint256 x;\\n        uint256 y;\\n        uint256 r;\\n        uint256 s;\\n        uint256 messageHash;\\n\\n        assembly {\\n            x := calldataload(add(data.offset, 35))\\n            y := calldataload(add(data.offset, 67))\\n            r := calldataload(add(data.offset, 99))\\n            s := calldataload(add(data.offset, 131))\\n            messageHash := calldataload(add(data.offset, 163))\\n        }\\n\\n        state.publicKey.x = x;\\n        state.publicKey.y = y;\\n        state.signature.r = r;\\n        state.signature.s = s;\\n        state.messageHash = messageHash;\\n        state.prefix = \\\"CodaSignature*******\\\";\\n\\n        state.fields = abi.decode(data[195:], (uint256[]));\\n        return (state.vfId, state);\\n    }\\n\\n    /// @notice Unpacks verify message state from bytes\\n    /// @param data The encoded message state data\\n    /// @return id The message ID\\n    /// @return state The unpacked verify message state\\n    function _unpackVerifyMessageState(\\n        bytes calldata data\\n    ) internal pure returns (uint256 id, VerifyMessageStateCompressed memory state) {\\n        state.verifyType = uint8(data[0]);\\n        state.vmId = uint256(bytes32(data[1:33]));\\n        state.mainnet = (data[33] != 0);\\n        state.isValid = (data[34] != 0);\\n\\n        uint256 x;\\n        uint256 y;\\n        uint256 r;\\n        uint256 s;\\n        uint256 messageHash;\\n\\n        assembly {\\n            x := calldataload(add(data.offset, 35))\\n            y := calldataload(add(data.offset, 67))\\n            r := calldataload(add(data.offset, 99))\\n            s := calldataload(add(data.offset, 131))\\n            messageHash := calldataload(add(data.offset, 163))\\n        }\\n\\n        state.publicKey.x = x;\\n        state.publicKey.y = y;\\n        state.signature.r = r;\\n        state.signature.s = s;\\n        state.messageHash = messageHash;\\n        state.prefix = state.mainnet ? \\\"MinaSignatureMainnet\\\" : \\\"CodaSignature*******\\\";\\n        state.message = abi.decode(data[195:], (string));\\n        return (state.vmId, state);\\n    }\\n\\n    /// ===========================================================================\\n    /// ADMIN STORAGE UPDATE FUNCTIONS ============================================\\n    /// ===========================================================================\\n\\n    function updateVerifyFieldsContract(address addr) external onlyOwner {\\n        require(addr != address(0));\\n        CHAIN_CONFIG_VF = ChainConfig({ confirmations: BLOCK_CONFIRMATIONS, toReadFrom: addr });\\n    }\\n\\n    function updateVerifyMessageContract(address addr) external onlyOwner {\\n        require(addr != address(0));\\n        CHAIN_CONFIG_VM = ChainConfig({ confirmations: BLOCK_CONFIRMATIONS, toReadFrom: addr });\\n    }\\n\\n    function updateBlockConfirmations(uint16 confirmations) external onlyOwner {\\n        require(confirmations != 0);\\n        BLOCK_CONFIRMATIONS = confirmations;\\n        CHAIN_CONFIG_VF = ChainConfig({ confirmations: BLOCK_CONFIRMATIONS, toReadFrom: CHAIN_CONFIG_VF.toReadFrom });\\n        CHAIN_CONFIG_VM = ChainConfig({ confirmations: BLOCK_CONFIRMATIONS, toReadFrom: CHAIN_CONFIG_VM.toReadFrom });\\n    }\\n\\n    function updateReadChannelId(uint32 id) external onlyOwner {\\n        READ_CHANNEL_ID = id;\\n    }\\n\\n    function updateReadFromEndpointId(uint32 id) external onlyOwner {\\n        READ_FROM_ENDPOINT_ID = id;\\n    }\\n\\n    function updateReadFromEndpointAddress(address addr) external onlyOwner {\\n        require(addr != address(0));\\n        READ_FROM_ENDPOINT_ADDRESS = addr;\\n    }\\n\\n    function updateReadToEndpointId(uint32 id) external onlyOwner {\\n        READ_TO_ENDPOINT_ID = id;\\n    }\\n\\n    function updateReadToEndpointAddress(address addr) external onlyOwner {\\n        require(addr != address(0));\\n        READ_TO_ENDPOINT_ADDRESS = addr;\\n    }\\n\\n    function updateConservativeModeParams(\\n        uint128 gasLimit,\\n        uint32 messageSizeBytes,\\n        uint32 fieldsSizeBytes\\n    ) external onlyOwner {\\n        CONSERVATIVE_CONFIG.gasLimit = gasLimit;\\n        CONSERVATIVE_CONFIG.messageSize = messageSizeBytes;\\n        CONSERVATIVE_CONFIG.fieldsSize = fieldsSizeBytes;\\n    }\\n\\n    function updateDefaultModeParams(\\n        uint128 gasLimit,\\n        uint32 messageSizeBytes,\\n        uint32 fieldsSizeBytes\\n    ) external onlyOwner {\\n        DEFAULT_CONFIG.gasLimit = gasLimit;\\n        DEFAULT_CONFIG.messageSize = messageSizeBytes;\\n        DEFAULT_CONFIG.fieldsSize = fieldsSizeBytes;\\n    }\\n\\n    function updateOptimisticModeParams(\\n        uint128 gasLimit,\\n        uint32 messageSizeBytes,\\n        uint32 fieldsSizeBytes\\n    ) external onlyOwner {\\n        OPTIMISTIC_CONFIG.gasLimit = gasLimit;\\n        OPTIMISTIC_CONFIG.messageSize = messageSizeBytes;\\n        OPTIMISTIC_CONFIG.fieldsSize = fieldsSizeBytes;\\n    }\\n\\n    fallback() external payable {\\n        revert();\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw() external onlyOwner returns (bool) {\\n        (bool sent, ) = owner().call{ value: address(this).balance }(\\\"\\\");\\n        return sent;\\n    }\\n\\n    function withdrawToken(address tokenAddress) public {\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 balance = token.balanceOf(address(this));\\n        require(balance > 0, \\\"No tokens to withdraw\\\");\\n\\n        token.transfer(owner(), balance);\\n    }\\n}\\n\",\"keccak256\":\"0x30d9d999508fa84707884ea7b49b3371915fc95cf1426c8d328416d2bbb358d0\",\"license\":\"MIT\"},\"contracts/interfaces/ICORE_FieldsVerification.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../PallasTypes.sol\\\";\\n\\ninterface ICORE_FieldsVerification {\\n    function getVFStateBytesCompressed(uint256 vfId) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x3d156943306c503bbe6bb3ea52226b3f19bed171f22ae33f0dd52a7961525b63\",\"license\":\"MIT\"},\"contracts/interfaces/ICORE_MessageVerification.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../PallasTypes.sol\\\";\\n\\ninterface ICORE_MessageVerification {\\n    function getVMStateBytesCompressed(uint256 vmId) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x7f247717d27925f8cc1bbe86207b4f36a68626e6e099cdb527a14a05837afee9\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equal_nonAligned(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let endMinusWord := add(_preBytes, length)\\n                let mc := add(_preBytes, 0x20)\\n                let cc := add(_postBytes, 0x20)\\n\\n                for {\\n                // the next line is the loop condition:\\n                // while(uint256(mc < endWord) + cb == 2)\\n                } eq(add(lt(mc, endMinusWord), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n\\n                // Only if still successful\\n                // For <1 word tail bytes\\n                if gt(success, 0) {\\n                    // Get the remainder of length/32\\n                    // length % 32 = AND(length, 32 - 1)\\n                    let numTailBytes := and(length, 0x1f)\\n                    let mcRem := mload(mc)\\n                    let ccRem := mload(cc)\\n                    for {\\n                        let i := 0\\n                    // the next line is the loop condition:\\n                    // while(uint256(i < numTailBytes) + cb == 2)\\n                    } eq(add(lt(i, numTailBytes), cb), 2) {\\n                        i := add(i, 1)\\n                    } {\\n                        if iszero(eq(byte(i, mcRem), byte(i, ccRem))) {\\n                            // unsuccess:\\n                            success := 0\\n                            cb := 0\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xa5b10f04797d5a10a9ba07855108b6bd695940e6a3d128927b2f74a0d359868a\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a0346200034a57601f6200379338819003918201601f19168301926001600160401b03926000928486118387101762000336578160809284926040988952833981010312620003325762000054816200039d565b602093620000648584016200039d565b90620000806060620000788987016200039d565b95016200039d565b926001600160a01b039283169081156200031a5786546001600160a01b0319811683178855849190839083167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08a80a3169081608052813b156200031657869291602484928b51958693849263ca5eb5e160e01b845260048401525af180156200030c57620002e3575b50507d75951a44076050125825900e736c501f859c50fe728c0000759effffffff60025560018060b01b03199461ffff74031a44076050125825900e736c501f859c50fe728c87600354161796876003556107d08980516200016c816200034f565b620b71b08152610320868201520152751b58000006400000000000000000000000000027ac4060018060c01b03197507d000000320000000000000000000000000000b71b0816004541617600455610ed88b8051620001cb816200034f565b6216e360815261044c888201520152750ed80000044c0000000000000000000000000016e360816005541617600555611b588b80516200020b816200034f565b6227ac408152610640888201520152600654161760065586838a51620002318162000381565b600181520152806007541696838a516200024b8162000381565b600181520152600854169660a01c16948751620002688162000381565b868152828487169101528562010000600160b01b03809660101b16911717600755865191620002978362000381565b858352831691015260101b16911717600855516133e09081620003b3823960805181818161053501528181610dd7015281816116fa015281816124200152818161289e0152612c7e0152f35b8195929511620002f85786529238806200010a565b634e487b7160e01b82526041600452602482fd5b88513d88823e3d90fd5b8680fd5b8851631e4fbdf760e01b815260048101889052602490fd5b5080fd5b634e487b7160e01b84526041600452602484fd5b600080fd5b606081019081106001600160401b038211176200036b57604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b038211176200036b57604052565b51906001600160a01b03821682036200034a5756fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806304977c871461032b5780630590c4d9146103265780630c70b57e1461032157806313137d651461031c57806317442b70146103175780631a6f6b77146103125780631c0f20881461030d578063217d9db114610308578063232b7c9d146103035780633400288b146102fe578063383e0957146102f95780633ccfd60b146102f45780633d16f7f5146102ef57806346bbad9d146102ea5780635c070f37146102e55780635c7dd356146102e05780635e280f11146102db57806368d40347146102d6578063715018a6146102d15780637d25a05e146102cc57806382413eac146102c757806389476069146102c25780638da5cb5b146102bd5780638ed462b1146102b85780639d86aa5e146102b3578063a2412f2c146102ae578063a62f0737146102a9578063ab313da8146102a4578063b658ff511461029f578063bb0b6a531461029a578063bd1d4ed614610295578063c417882614610290578063c648fb331461028b578063c6c6db8914610286578063ca5eb5e114610281578063d0b3a3ab1461027c578063d240867d14610277578063d35daac314610272578063d6a29dcd1461026d578063d7ce17ab14610268578063dd114d0d14610263578063e8feb1431461025e578063f0452ee414610259578063f0a9e48114610254578063f1aa5f861461024f578063f2fde38b1461024a578063f444303e14610245578063fd89760e146102405763ff7bd03d0361000e57611d8c565b611d5b565b611d04565b611c78565b611afe565b611ab6565b611a4d565b611a2e565b6119ba565b61197c565b611935565b611873565b6117a9565b611762565b6116c9565b611598565b611562565b61150b565b6114df565b611415565b6113ef565b61136b565b6112ca565b611283565b6111b1565b61105c565b611033565b610f32565b610ed4565b610ead565b610e52565b610e36565b610dc1565b610d28565b610c3f565b610c16565b610beb565b610b81565b610b51565b610ad5565b610ab1565b610a90565b610a18565b6106d8565b6106b6565b61051a565b61040e565b610388565b610340565b600091031261033b57565b600080fd5b3461033b57600036600319011261033b576008546040805161ffff8316815260109290921c6001600160a01b0316602083015290f35b0390f35b63ffffffff81160361033b57565b3461033b57602036600319011261033b576004356103a58161037a565b6103ad612122565b600280546001600160e01b031660e09290921b6001600160e01b031916919091179055005b606090600319011261033b576004356001600160801b038116810361033b57906024356103fe8161037a565b9060443561040b8161037a565b90565b3461033b5761041c366103d2565b610424612122565b6001600160801b036006549163ffffffff60a01b9060a01b169316906001600160401b0360c01b16179063ffffffff60801b9060801b161717600655600080f35b606090600319011261033b57600490565b9181601f8401121561033b578235916001600160401b03831161033b576020838186019501011161033b57565b6001600160a01b0381160361033b57565b600319810160e0811261033b5760601361033b57600491606435916001600160401b039060843582811161033b57816104ef91600401610476565b9390939260a4356104ff816104a3565b9260c43591821161033b5761051691600401610476565b9091565b610523366104b4565b91909495929360018060a01b039433867f0000000000000000000000000000000000000000000000000000000000000000160361069e5784356105658161037a565b61056e8161214e565b602087013580910361066c575063ffffffff8161058f63fffff9be9361037a565b16111561062d57906105a391810190612210565b91303b1561033b576000956105d5956105eb610603956040519a8b998a996378d52fc360e11b8b5260048b0190612197565b606489015260e0608489015260e488019061098c565b931660a48601528483036003190160c48601526121d1565b038183305af180156106285761061557005b8061062261001992610759565b80610330565b611e42565b92509450507f5fa5ca9e9e00aa864db74fad0ea402428388eb93f02d992b72ca6b675b52f6059450610667919250604051938493846121f2565b0390a1005b906106768161037a565b60405163309afaf360e21b815263ffffffff9190911660048201526024810191909152604490fd5b6040516391ac5e4f60e01b8152336004820152602490fd5b3461033b57600036600319011261033b57604080516001815260026020820152f35b3461033b57602036600319011261033b576004356106f58161037a565b6106fd612122565b67ffffffff000000006002549160201b169067ffffffff00000000191617600255600080f35b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761075457604052565b610723565b6001600160401b03811161075457604052565b606081019081106001600160401b0382111761075457604052565b608081019081106001600160401b0382111761075457604052565b60e081019081106001600160401b0382111761075457604052565b60a081019081106001600160401b0382111761075457604052565b90601f801991011681019081106001600160401b0382111761075457604052565b6040519061012082018281106001600160401b0382111761075457604052565b6040519061082682610739565b565b6040519061082682610787565b60405190610826826107bd565b60405190610826826107a2565b6040519060c082018281106001600160401b0382111761075457604052565b9060405161087b81610739565b602060018294805484520154910152565b90600182811c921680156108bc575b60208310146108a657565b634e487b7160e01b600052602260045260246000fd5b91607f169161089b565b906040519182600082546108d98161088c565b908184526020946001916001811690816000146109475750600114610908575b505050610826925003836107d8565b600090815285812095935091905b81831061092f57505061082693508201013880806108f9565b85548884018501529485019487945091830191610916565b9250505061082694925060ff191682840152151560051b8201013880806108f9565b60005b83811061097c5750506000910152565b818101518382015260200161096c565b906020916109a581518092818552858086019101610969565b601f01601f1916010190565b9461040b989794610a04946109f293989460ff6101409a16895260208901521515604088015215156060870152608086019060208091805184520151910152565b805160c08501526020015160e0840152565b61010082015281610120820152019061098c565b3461033b57602036600319011261033b576004356000526009602052604060002060ff81541690610376600182015491600281015490610a5a6003820161086e565b610a666005830161086e565b90610a786008600785015494016108c6565b9360405197889760ff808460081c16931691896109b1565b3461033b57600036600319011261033b57602060025460e01c604051908152f35b3461033b57600036600319011261033b57602063ffffffff60025416604051908152f35b3461033b57604036600319011261033b57610019600435610af58161037a565b610afd612122565b60243590612273565b6001600160401b03811161075457601f01601f191660200190565b60405190610b2e82610739565b6014825273135a5b9854da59db985d1d5c9953585a5b9b995d60621b6020830152565b3461033b57600036600319011261033b57610376610b6d610b21565b60405191829160208352602083019061098c565b3461033b57600080600319360112610be857602090610b9e612122565b8080808060018060a01b0381541647905af1903d15610be2573d90610bc282610b06565b91610bd060405193846107d8565b8252833d92013e5b6040519015158152f35b50610bd8565b80fd5b3461033b57600036600319011261033b576002546040805191901c6001600160a01b03168152602090f35b3461033b57600036600319011261033b576003546040516001600160a01b039091168152602090f35b3461033b57602036600319011261033b57600435610c5c816104a3565b610c64612122565b6001600160a01b0316801561033b576bffffffffffffffffffffffff60a01b6003541617600355600080f35b6003111561033b57565b8015150361033b57565b60a090600319011261033b57600435610cbc81610c90565b9060243590604435610ccd8161037a565b906064356001600160801b038116810361033b579060843561040b81610c9a565b610826909291926040806080830195805184526001600160401b036020820151166020850152015191019060208091805184520151910152565b610d3136610ca4565b91610d3d949394611deb565b50610d4784611e13565b831561033b57604094610d59946120a8565b9290910151803410610da157610376610d95848463ffffffff600254169160405191610d8483610739565b348352600060208401523393612397565b60405191829182610cee565b60405163a458261b60e01b81526004810191909152346024820152604490fd5b3461033b57600036600319011261033b576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b60405190610e1382610739565b601482527321b7b230a9b4b3b730ba3ab9329515151515151560611b6020830152565b3461033b57600036600319011261033b57610376610b6d610e06565b3461033b57600080600319360112610be857610e6c612122565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b3461033b57604036600319011261033b57610ec960043561037a565b602060405160008152f35b3461033b5760a036600319011261033b57610eee36610465565b506064356001600160401b03811161033b57610f0e903690600401610476565b50506020608435610f1e816104a3565b6040516001600160a01b0390911630148152f35b3461033b5760208060031936011261033b57600435610f50816104a3565b6040516370a0823160e01b81523060048201526001600160a01b039182168382602481845afa90811561062857610fce938593600093611004575b50610f97831515611e4e565b6000805460405163a9059cbb60e01b815292166001600160a01b031660048301526024820193909352938492839182906044820190565b03925af1801561062857610fde57005b8161001992903d10610ffd575b610ff581836107d8565b810190611e92565b503d610feb565b611025919350843d861161102c575b61101d81836107d8565b810190611e33565b9138610f8b565b503d611013565b3461033b57600036600319011261033b576000546040516001600160a01b039091168152602090f35b3461033b57602036600319011261033b57600435611079816104a3565b611081612122565b6001600160a01b0381161561033b5761ffff60035460a01c166110a5604051610739565b600780546001600160b01b0319169190911760109290921b62010000600160b01b0316919091179055005b90815180825260208080930193019160005b8281106110f0575050505090565b8351855293810193928101926001016110e2565b9061040b916020815261111d60208201835160ff169052565b6020820151604082015261113a6040830151606083019015159052565b6060820151151560808201526080820151805160a08301526020015160c082015260a0820151805160e08301526020015161010082015260c082015161012082015260e08201519061010061119e610160938461014085015261018084019061098c565b93015191601f19828503019101526110d0565b3461033b57602036600319011261033b576111ca611ea7565b506004356000526009602052610376604060002061127160096111eb6107f9565b926112016111fa825460ff1690565b60ff168552565b60018101546020850152600281015460ff8181161515604087015261122e915b60081c1615156060860152565b61123a6003820161086e565b608085015261124b6005820161086e565b60a0850152600781015460c0850152611266600882016108c6565b60e085015201611f0e565b61010082015260405191829182611104565b3461033b57600036600319011261033b57600654604080516001600160801b038316815263ffffffff608084901c8116602083015260a09390931c90921690820152606090f35b3461033b57600036600319011261033b57602061ffff60035460a01c16604051908152f35b97946113359061135c97929561040b9b99956113479560ff61016099168d5260208d0152151560408c0152151560608b015260808a019060208091805184520151910152565b805160c08901526020015160e0880152565b6101008601528061012086015284019061098c565b9161014081840391015261098c565b3461033b57602036600319011261033b57600435600052600a602052604060002060ff815416906103766001820154916002810154906113ad6003820161086e565b6113b96005830161086e565b6007830154916113d760096113d0600887016108c6565b95016108c6565b9460405198899860ff808460081c169316918a6112ef565b3461033b57600036600319011261033b57602060025463ffffffff60405191831c168152f35b3461033b57602036600319011261033b5763ffffffff6004356114378161037a565b1660005260016020526020604060002054604051908152f35b608090600319011261033b5760043561146881610c90565b906024359060443561147981610c90565b9060643561040b81610c9a565b916114d190606061040b95936001600160801b03815116865263ffffffff6020820151166020870152604081015160408701520151606085015260c0608085015260c084019061098c565b9160a081840391015261098c565b3461033b576103766114fc6114f336611450565b92919091611f84565b60409391935193849384611486565b3461033b57611519366103d2565b611521612122565b6001600160801b036005549163ffffffff60a01b9060a01b169316906001600160401b0360c01b16179063ffffffff60801b9060801b161717600555600080f35b3461033b57600036600319011261033b576007546040805161ffff8316815260109290921c6001600160a01b0316602083015290f35b3461033b57602036600319011261033b5760043561ffff80821680830361033b576115c1612122565b1561033b576003805461ffff60a01b191660a09390931b61ffff60a01b16929092179182905560075461165f929161162b9161161b9060101c6001600160a01b03169161160c610819565b9460a01c16849061ffff169052565b6001600160a01b03166020830152565b61ffff81511660075491602062010000600160b01b0391015160101b169169ffffffffffffffffffff60b01b161717600755565b6003546100199060a01c61ffff166008546116959060101c6001600160a01b031661161b61168b610819565b61ffff9094168452565b61ffff81511660085491602062010000600160b01b0391015160101b169169ffffffffffffffffffff60b01b161717600855565b3461033b5760006020366003190112610be8576004356116e8816104a3565b6116f0612122565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691839190833b1561175e5760249083604051958694859363ca5eb5e160e01b85521660048401525af1801561062857611752575080f35b61175b90610759565b80f35b8280fd5b3461033b57600036600319011261033b57600554604080516001600160801b038316815263ffffffff608084901c8116602083015260a09390931c90921690820152606090f35b3461033b576103766114fc6117bd36610ca4565b939290926120a8565b9061040b91602081526117df60208201835160ff169052565b602082015160408201526117fc6040830151606083019015159052565b6060820151151560808201526080820151805160a08301526020015160c082015260a0820151805160e08301526020015161010082015260c082015161012082015260e082015190610100611860610160938461014085015261018084019061098c565b93015191601f198285030191015261098c565b3461033b57602036600319011261033b5761188c611ea7565b50600435600052600a602052610376604060002061192360096118ad6107f9565b926118bc6111fa825460ff1690565b60018101546020850152600281015460ff818116151560408701526118e091611221565b6118ec6003820161086e565b60808501526118fd6005820161086e565b60a0850152600781015460c0850152611918600882016108c6565b60e0850152016108c6565b610100820152604051918291826117c6565b3461033b57600036600319011261033b57600454604080516001600160801b038316815263ffffffff608084901c8116602083015260a09390931c90921690820152606090f35b3461033b57602036600319011261033b5763ffffffff60043561199e8161037a565b6119a6612122565b1663ffffffff196002541617600255600080f35b3461033b57602036600319011261033b576004356119d7816104a3565b6119df612122565b6001600160a01b0381161561033b5761ffff60035460a01c16611a03604051610739565b600880546001600160b01b0319169190911760109290921b62010000600160b01b0316919091179055005b3461033b57600036600319011261033b57602060405163fffff9be8152f35b3461033b57602036600319011261033b57600435611a6a816104a3565b611a72612122565b6001600160a01b0381161561033b576002805468010000000000000000600160e01b03191660409290921b68010000000000000000600160e01b0316919091179055005b3461033b57604036600319011261033b57610019600435611ad68161037a565b602435611ae281610c9a565b611aea612122565b15611af6573090612273565b600090612273565b3461033b57611b0c366104b4565b50505092909150303303611c3e57611b46611b41611b3b611b2d8686612901565b356001600160f81b03191690565b60f81c90565b612928565b611b4f81611e13565b60028103611bb0575061066783611ba4611b9f611b8d7ff06876e31533a89db5d097a19a00a4457f569ce0e87c4ff14f204ec04f59d05c9787613039565b91906000526009602052604060002090565b612bbf565b604051938493846121f2565b80611bbc600192611e13565b03611c0d5761066783611ba4611c08611bf67ff06876e31533a89db5d097a19a00a4457f569ce0e87c4ff14f204ec04f59d05c9787612eb7565b9190600052600a602052604060002090565b612a65565b6106677f5fa5ca9e9e00aa864db74fad0ea402428388eb93f02d992b72ca6b675b52f60593604051938493846121f2565b60405162461bcd60e51b81526020600482015260126024820152712932b9b2b93b32b2103337b91039b2b6331760711b6044820152606490fd5b3461033b57602036600319011261033b57600435611c95816104a3565b611c9d612122565b6001600160a01b039081168015611ceb57600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b604051631e4fbdf760e01b815260006004820152602490fd5b3461033b57611d12366103d2565b611d1a612122565b6001600160801b036004549163ffffffff60a01b9060a01b169316906001600160401b0360c01b16179063ffffffff60801b9060801b161717600455600080f35b611d6436611450565b90611d70939293611deb565b50611d7a83611e13565b821561033b57604093610d5993611f84565b3461033b57606036600319011261033b576020611da836610465565b63ffffffff8135611db88161037a565b166000526001825260406000205482604051920135148152f35b60405190611ddf82610739565b60006020838281520152565b60405190611df88261076c565b8160008152600060208201526040611e0e611dd2565b910152565b60031115611e1d57565b634e487b7160e01b600052602160045260246000fd5b9081602091031261033b575190565b6040513d6000823e3d90fd5b15611e5557565b60405162461bcd60e51b81526020600482015260156024820152744e6f20746f6b656e7320746f20776974686472617760581b6044820152606490fd5b9081602091031261033b575161040b81610c9a565b6040519061012082018281106001600160401b0382111761075457604052606061010083600081526000602082015260006040820152600083820152611eeb611dd2565b6080820152611ef8611dd2565b60a0820152600060c08201528260e08201520152565b90604051918281549182825260209260208301916000526020600020936000905b828210611f4557505050610826925003836107d8565b855484526001958601958895509381019390910190611f2f565b60405190611f6c82610787565b60006060838281528260208201528260408201520152565b9391611f8e611f5f565b50611f9885611e13565b841561033b57611fa781611e13565b806120575750611fe06004549163ffffffff6001600160801b03841693611fcd88611e13565b6001880361204e5760801c165b95612557565b9361200d611ff68284611ff16126f7565b612711565b94858761200860025463ffffffff1690565b61282e565b61203f6020825192015192612032612023610828565b6001600160801b039096168652565b63ffffffff166020850152565b60408301526060820152929190565b60a01c16611fda565b80612063600192611e13565b0361208857611fe06005549163ffffffff6001600160801b03841693611fcd88611e13565b611fe06006549163ffffffff6001600160801b03841693611fcd88611e13565b93949291906120b5611f5f565b506120bf85611e13565b841561033b576120d690611fda8385611ff16126f7565b946120ec63ffffffff918688846002541661282e565b9060208251920151926001600160801b036040519561210a87610787565b16855216602084015260408301526060820152929190565b6000546001600160a01b0316330361213657565b60405163118cdaa760e01b8152336004820152602490fd5b63ffffffff1680600052600160205260406000205490811561216e575090565b6024906040519063f6ff4fb760e01b82526004820152fd5b6001600160401b0381160361033b57565b6001600160401b036040809263ffffffff81356121b38161037a565b1685526020810135602086015201356121cb81612186565b16910152565b908060209392818452848401376000828201840152601f01601f1916010190565b8061220360809261040b9694612197565b81606082015201916121d1565b60208183031261033b578035906001600160401b03821161033b570181601f8201121561033b5780359061224382610b06565b9261225160405194856107d8565b8284526020838301011161033b57816000926020809301838601378301015290565b63ffffffff1660008181526001602090815260409182902084905581519283528201929092527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b9190a1565b919082604091031261033b576040516122d781610739565b6020808294805184520151910152565b9060808282031261033b576123219060408051936123048561076c565b80518552602081015161231681612186565b6020860152016122bf565b604082015290565b906020909392936040835263ffffffff8151166040840152818101516060840152608061237d612367604084015160a08488015260e087019061098c565b6060840151868203603f190160a088015261098c565b910151151560c08401526001600160a01b03909416910152565b6124006080949261241c96946123ab611deb565b5060206123b88651612c45565b950191825180612485575b506123cd8561214e565b92511515926123e96123dd610835565b63ffffffff9097168752565b602086015260408501526060840152151585830152565b6040518095819482936302637a4560e41b845260048401612329565b03917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156106285760009161245c575090565b61040b915060803d60801161247e575b61247681836107d8565b8101906122e7565b503d61246c565b61248e90612c67565b386123c3565b6001600160401b0381116107545760051b60200190565b604090604051916124bb83610739565b60018352829160005b602080821015612513578351602092916124dd826107a2565b60008252600081830152600086830152606060008184015260006080840152600060a084015260c08301528288010152016124c4565b505091925050565b634e487b7160e01b600052603260045260246000fd5b80511561253e5760200190565b61251b565b805182101561253e5760209160051b010190565b61040b916125636124ab565b9161256d81611e13565b6001810361267e57506125b861261661258f60025463ffffffff9060201c1690565b926125c66008549160405194859163051007e560e01b6020840152602483019190602083019252565b03601f1981018552846107d8565b6125e36125d1610842565b600181529463ffffffff166020860152565b60006040850152426001600160401b0316606085015261ffff8116608085015260101c6001600160a01b031660a0840152565b60c082015261262482612531565b5261262e81612531565b505b60035460a01c61ffff169061267361264661084f565b60038152926000602085018190526040850152426001600160401b0316606085015261ffff166080840152565b3060a0830152612d80565b8061268a600292611e13565b14612696575b50612630565b6125b86126d86126af60025463ffffffff9060201c1690565b926125c6600754916040519485916302ca70c960e01b6020840152602483019190602083019252565b60c08201526126e682612531565b526126f081612531565b5038612690565b604051600360f01b60208201526002815261040b81610739565b61ffff9060038261272183612e20565b16036127f8576040519360208501936001600160801b03199060801b16845263ffffffff60e01b9060e01b1660308501526014845261275f84610739565b60038261276b83612e20565b16036127f85760018261277e86516131e4565b16019182116127f35761040b926024926127e460405196846127aa89965180926020808a019101610969565b600160f81b60209187019182015260f09390931b6001600160f01b0319166021840152600560f81b60238401525192839086840190610969565b010360048101845201826107d8565b612b2a565b90612804602492612e20565b604051633a51740d60e01b815291166004820152fd5b9060408282031261033b5761040b916122bf565b61287f61289a93929461283f611dd2565b506128498361214e565b93604096879561286887519661285e886107bd565b63ffffffff168752565b602086015285850152606084015215156080830152565b815180938192631bb8518b60e31b8352309060048401612329565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa918215610628576000926128db57505090565b61040b9250803d106128fa575b6128f281836107d8565b81019061281a565b503d6128e8565b901561253e5790565b906021101561253e5760210190565b906022101561253e5760220190565b60ff1661040b81611e13565b81811061293f575050565b60008155600101612934565b9190601f811161295a57505050565b610826926000526020600020906020601f840160051c83019310612986575b601f0160051c0190612934565b9091508190612979565b91909182516001600160401b038111610754576129b7816129b1845461088c565b8461294b565b602080601f83116001146129fa575081906129eb9394956000926129ef575b50508160011b916000199060031b1c19161790565b9055565b0151905038806129d6565b90601f19831695612a1085600052602060002090565b926000905b888210612a4d57505083600195969710612a34575b505050811b019055565b015160001960f88460031b161c19169055388080612a2a565b80600185968294968601518155019501930190612a15565b600961010061082693612a8c612a7c825160ff1690565b855460ff191660ff909116178555565b60208101516001850155612adc60028501612abf612aad6040850151151590565b829060ff801983541691151516179055565b60608301511515815461ff00191690151560081b61ff0016179055565b60808101518051600386015560200151600485015560a08101518051600586015560200151600685015560c08101516007850155612b2160e082015160088601612990565b01519101612990565b634e487b7160e01b600052601160045260246000fd5b8151916001600160401b03831161075457680100000000000000008311610754578154838355808410612ba1575b5060208091019160005260206000209060005b848110612b8f575050505050565b83518382015592810192600101612b81565b612bb990836000528460206000209182019101612934565b38612b6e565b600961010061082693612bd6612a7c825160ff1690565b60208101516001850155612bf760028501612abf612aad6040850151151590565b60808101518051600386015560200151600485015560a08101518051600586015560200151600685015560c08101516007850155612c3c60e082015160088601612990565b01519101612b40565b803403612c4f5790565b6040516304fb820960e51b8152346004820152602490fd5b60405163393f876560e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926020929091908381600481885afa90811561062857600091612d4a575b5016928315612d385760009160405190848201926323b872dd60e01b84523360248401526044830152606482015260648152612cf8816107bd565b519082855af115611e42576000513d612d2f5750803b155b612d175750565b60249060405190635274afe760e01b82526004820152fd5b60011415612d10565b6040516329b99a9560e11b8152600490fd5b90508381813d8311612d79575b612d6181836107d8565b8101031261033b5751612d73816104a3565b38612cbd565b503d612d57565b919091612d8d81516131e4565b604051600160f01b60208201819052602282015260f09190911b6001600160f01b031916602482015260068152612dc381610739565b916000925b8251841015612df057612de8600191612de18686612543565b51906132f0565b930192612dc8565b92509290508163ffffffff612e0c602084015163ffffffff1690565b16612e1657505090565b61040b92506130fb565b6002815110612e30576002015190565b60405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b6044820152606490fd5b9060211161033b5760010190602090565b909291928360c31161033b57831161033b5760c3019160c2190190565b359060208110612ea8575090565b6000199060200360031b1b1690565b919091612fa8612fa0612ec8611ea7565b94612ee3612edc611b3b611b2d8488612901565b60ff168752565b80612ef7612ef18287612e6c565b90612e9a565b6020880190815294612f896001600160f81b0319612f18611b2d858561290a565b16151560408a01908152612f4b612f42612f35611b2d8787612919565b6001600160f81b03191690565b151560608c0152565b60808a016023840135815152602060438501359151015260a08a016063840135815152602060838501359151015260a383013560c08b015251151590565b15612fb357612f96610b21565b60e0890152612e7d565b810190612210565b610100840152519190565b612fbb610e06565b612f96565b602090818184031261033b578035906001600160401b03821161033b57019180601f8401121561033b578235612ff581612494565b9361300360405195866107d8565b818552838086019260051b82010192831161033b578301905b82821061302a575050505090565b8135815290830190830161301c565b919091612fa86130f361304a611ea7565b9461305e612edc611b3b611b2d8488612901565b8061306c612ef18287612e6c565b60208801908152946130976001600160f81b031961308d611b2d858561290a565b16151560408a0152565b6130b36130aa612f35611b2d8585612919565b151560608a0152565b608088016023820135815152602060438301359151015260a088016063820135815152602060838301359151015260a381013560c0890152612f96610e06565b810190612fc0565b604761040b9161314f936131d68151916131bd6020820151916040810151151560608201519061ffff6080840151169260a0600180821b03910151169460206040519c8d8b83829d51948593019101610969565b600160f81b6020918b0191820152600160f01b602182015260f898891b6001600160f81b031916602382015260e09190911b6001600160e01b0319166024820152961b602887015260c01b6001600160c01b031916602986015260f01b6001600160f01b0319166031850152565b60601b6bffffffffffffffffffffffff19166033830152565b0360278101845201826107d8565b61ffff908181116131f3571690565b604490604051906306dfcc6560e41b8252601060048301526024820152fd5b602090613229600b96949382815194859201610969565b600160f81b910190815260f091821b6001600160f01b03199081166001830152600160f01b60038301529390911b909216600583015260e01b6001600160e01b03191660078201520190565b602090613290601f9897959396949682815194859201610969565b94151560f81b940193845260c01b6001600160c01b031916600184015260f01b6001600160f01b031916600983015260601b6bffffffffffffffffffffffff1916600b8201528151916132eb90839085840190602001610969565b010190565b61ffff8251169160c0810192835151602381018091116127f35761040b9361333861331d61339e936131e4565b602086015163ffffffff169060405195869460208601613212565b039261334c601f19948581018552846107d8565b604081015115159561336860608301516001600160401b031690565b9161338c60a061337d608084015161ffff1690565b9201516001600160a01b031690565b91519260405198899660208801613275565b039081018352826107d856fea26469706673582212209147f4df1dd1aefe80bd79f858a0c0711a3bee391d94c8cb76313eb271e1d2d664736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806304977c871461032b5780630590c4d9146103265780630c70b57e1461032157806313137d651461031c57806317442b70146103175780631a6f6b77146103125780631c0f20881461030d578063217d9db114610308578063232b7c9d146103035780633400288b146102fe578063383e0957146102f95780633ccfd60b146102f45780633d16f7f5146102ef57806346bbad9d146102ea5780635c070f37146102e55780635c7dd356146102e05780635e280f11146102db57806368d40347146102d6578063715018a6146102d15780637d25a05e146102cc57806382413eac146102c757806389476069146102c25780638da5cb5b146102bd5780638ed462b1146102b85780639d86aa5e146102b3578063a2412f2c146102ae578063a62f0737146102a9578063ab313da8146102a4578063b658ff511461029f578063bb0b6a531461029a578063bd1d4ed614610295578063c417882614610290578063c648fb331461028b578063c6c6db8914610286578063ca5eb5e114610281578063d0b3a3ab1461027c578063d240867d14610277578063d35daac314610272578063d6a29dcd1461026d578063d7ce17ab14610268578063dd114d0d14610263578063e8feb1431461025e578063f0452ee414610259578063f0a9e48114610254578063f1aa5f861461024f578063f2fde38b1461024a578063f444303e14610245578063fd89760e146102405763ff7bd03d0361000e57611d8c565b611d5b565b611d04565b611c78565b611afe565b611ab6565b611a4d565b611a2e565b6119ba565b61197c565b611935565b611873565b6117a9565b611762565b6116c9565b611598565b611562565b61150b565b6114df565b611415565b6113ef565b61136b565b6112ca565b611283565b6111b1565b61105c565b611033565b610f32565b610ed4565b610ead565b610e52565b610e36565b610dc1565b610d28565b610c3f565b610c16565b610beb565b610b81565b610b51565b610ad5565b610ab1565b610a90565b610a18565b6106d8565b6106b6565b61051a565b61040e565b610388565b610340565b600091031261033b57565b600080fd5b3461033b57600036600319011261033b576008546040805161ffff8316815260109290921c6001600160a01b0316602083015290f35b0390f35b63ffffffff81160361033b57565b3461033b57602036600319011261033b576004356103a58161037a565b6103ad612122565b600280546001600160e01b031660e09290921b6001600160e01b031916919091179055005b606090600319011261033b576004356001600160801b038116810361033b57906024356103fe8161037a565b9060443561040b8161037a565b90565b3461033b5761041c366103d2565b610424612122565b6001600160801b036006549163ffffffff60a01b9060a01b169316906001600160401b0360c01b16179063ffffffff60801b9060801b161717600655600080f35b606090600319011261033b57600490565b9181601f8401121561033b578235916001600160401b03831161033b576020838186019501011161033b57565b6001600160a01b0381160361033b57565b600319810160e0811261033b5760601361033b57600491606435916001600160401b039060843582811161033b57816104ef91600401610476565b9390939260a4356104ff816104a3565b9260c43591821161033b5761051691600401610476565b9091565b610523366104b4565b91909495929360018060a01b039433867f0000000000000000000000000000000000000000000000000000000000000000160361069e5784356105658161037a565b61056e8161214e565b602087013580910361066c575063ffffffff8161058f63fffff9be9361037a565b16111561062d57906105a391810190612210565b91303b1561033b576000956105d5956105eb610603956040519a8b998a996378d52fc360e11b8b5260048b0190612197565b606489015260e0608489015260e488019061098c565b931660a48601528483036003190160c48601526121d1565b038183305af180156106285761061557005b8061062261001992610759565b80610330565b611e42565b92509450507f5fa5ca9e9e00aa864db74fad0ea402428388eb93f02d992b72ca6b675b52f6059450610667919250604051938493846121f2565b0390a1005b906106768161037a565b60405163309afaf360e21b815263ffffffff9190911660048201526024810191909152604490fd5b6040516391ac5e4f60e01b8152336004820152602490fd5b3461033b57600036600319011261033b57604080516001815260026020820152f35b3461033b57602036600319011261033b576004356106f58161037a565b6106fd612122565b67ffffffff000000006002549160201b169067ffffffff00000000191617600255600080f35b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761075457604052565b610723565b6001600160401b03811161075457604052565b606081019081106001600160401b0382111761075457604052565b608081019081106001600160401b0382111761075457604052565b60e081019081106001600160401b0382111761075457604052565b60a081019081106001600160401b0382111761075457604052565b90601f801991011681019081106001600160401b0382111761075457604052565b6040519061012082018281106001600160401b0382111761075457604052565b6040519061082682610739565b565b6040519061082682610787565b60405190610826826107bd565b60405190610826826107a2565b6040519060c082018281106001600160401b0382111761075457604052565b9060405161087b81610739565b602060018294805484520154910152565b90600182811c921680156108bc575b60208310146108a657565b634e487b7160e01b600052602260045260246000fd5b91607f169161089b565b906040519182600082546108d98161088c565b908184526020946001916001811690816000146109475750600114610908575b505050610826925003836107d8565b600090815285812095935091905b81831061092f57505061082693508201013880806108f9565b85548884018501529485019487945091830191610916565b9250505061082694925060ff191682840152151560051b8201013880806108f9565b60005b83811061097c5750506000910152565b818101518382015260200161096c565b906020916109a581518092818552858086019101610969565b601f01601f1916010190565b9461040b989794610a04946109f293989460ff6101409a16895260208901521515604088015215156060870152608086019060208091805184520151910152565b805160c08501526020015160e0840152565b61010082015281610120820152019061098c565b3461033b57602036600319011261033b576004356000526009602052604060002060ff81541690610376600182015491600281015490610a5a6003820161086e565b610a666005830161086e565b90610a786008600785015494016108c6565b9360405197889760ff808460081c16931691896109b1565b3461033b57600036600319011261033b57602060025460e01c604051908152f35b3461033b57600036600319011261033b57602063ffffffff60025416604051908152f35b3461033b57604036600319011261033b57610019600435610af58161037a565b610afd612122565b60243590612273565b6001600160401b03811161075457601f01601f191660200190565b60405190610b2e82610739565b6014825273135a5b9854da59db985d1d5c9953585a5b9b995d60621b6020830152565b3461033b57600036600319011261033b57610376610b6d610b21565b60405191829160208352602083019061098c565b3461033b57600080600319360112610be857602090610b9e612122565b8080808060018060a01b0381541647905af1903d15610be2573d90610bc282610b06565b91610bd060405193846107d8565b8252833d92013e5b6040519015158152f35b50610bd8565b80fd5b3461033b57600036600319011261033b576002546040805191901c6001600160a01b03168152602090f35b3461033b57600036600319011261033b576003546040516001600160a01b039091168152602090f35b3461033b57602036600319011261033b57600435610c5c816104a3565b610c64612122565b6001600160a01b0316801561033b576bffffffffffffffffffffffff60a01b6003541617600355600080f35b6003111561033b57565b8015150361033b57565b60a090600319011261033b57600435610cbc81610c90565b9060243590604435610ccd8161037a565b906064356001600160801b038116810361033b579060843561040b81610c9a565b610826909291926040806080830195805184526001600160401b036020820151166020850152015191019060208091805184520151910152565b610d3136610ca4565b91610d3d949394611deb565b50610d4784611e13565b831561033b57604094610d59946120a8565b9290910151803410610da157610376610d95848463ffffffff600254169160405191610d8483610739565b348352600060208401523393612397565b60405191829182610cee565b60405163a458261b60e01b81526004810191909152346024820152604490fd5b3461033b57600036600319011261033b576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b60405190610e1382610739565b601482527321b7b230a9b4b3b730ba3ab9329515151515151560611b6020830152565b3461033b57600036600319011261033b57610376610b6d610e06565b3461033b57600080600319360112610be857610e6c612122565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b3461033b57604036600319011261033b57610ec960043561037a565b602060405160008152f35b3461033b5760a036600319011261033b57610eee36610465565b506064356001600160401b03811161033b57610f0e903690600401610476565b50506020608435610f1e816104a3565b6040516001600160a01b0390911630148152f35b3461033b5760208060031936011261033b57600435610f50816104a3565b6040516370a0823160e01b81523060048201526001600160a01b039182168382602481845afa90811561062857610fce938593600093611004575b50610f97831515611e4e565b6000805460405163a9059cbb60e01b815292166001600160a01b031660048301526024820193909352938492839182906044820190565b03925af1801561062857610fde57005b8161001992903d10610ffd575b610ff581836107d8565b810190611e92565b503d610feb565b611025919350843d861161102c575b61101d81836107d8565b810190611e33565b9138610f8b565b503d611013565b3461033b57600036600319011261033b576000546040516001600160a01b039091168152602090f35b3461033b57602036600319011261033b57600435611079816104a3565b611081612122565b6001600160a01b0381161561033b5761ffff60035460a01c166110a5604051610739565b600780546001600160b01b0319169190911760109290921b62010000600160b01b0316919091179055005b90815180825260208080930193019160005b8281106110f0575050505090565b8351855293810193928101926001016110e2565b9061040b916020815261111d60208201835160ff169052565b6020820151604082015261113a6040830151606083019015159052565b6060820151151560808201526080820151805160a08301526020015160c082015260a0820151805160e08301526020015161010082015260c082015161012082015260e08201519061010061119e610160938461014085015261018084019061098c565b93015191601f19828503019101526110d0565b3461033b57602036600319011261033b576111ca611ea7565b506004356000526009602052610376604060002061127160096111eb6107f9565b926112016111fa825460ff1690565b60ff168552565b60018101546020850152600281015460ff8181161515604087015261122e915b60081c1615156060860152565b61123a6003820161086e565b608085015261124b6005820161086e565b60a0850152600781015460c0850152611266600882016108c6565b60e085015201611f0e565b61010082015260405191829182611104565b3461033b57600036600319011261033b57600654604080516001600160801b038316815263ffffffff608084901c8116602083015260a09390931c90921690820152606090f35b3461033b57600036600319011261033b57602061ffff60035460a01c16604051908152f35b97946113359061135c97929561040b9b99956113479560ff61016099168d5260208d0152151560408c0152151560608b015260808a019060208091805184520151910152565b805160c08901526020015160e0880152565b6101008601528061012086015284019061098c565b9161014081840391015261098c565b3461033b57602036600319011261033b57600435600052600a602052604060002060ff815416906103766001820154916002810154906113ad6003820161086e565b6113b96005830161086e565b6007830154916113d760096113d0600887016108c6565b95016108c6565b9460405198899860ff808460081c169316918a6112ef565b3461033b57600036600319011261033b57602060025463ffffffff60405191831c168152f35b3461033b57602036600319011261033b5763ffffffff6004356114378161037a565b1660005260016020526020604060002054604051908152f35b608090600319011261033b5760043561146881610c90565b906024359060443561147981610c90565b9060643561040b81610c9a565b916114d190606061040b95936001600160801b03815116865263ffffffff6020820151166020870152604081015160408701520151606085015260c0608085015260c084019061098c565b9160a081840391015261098c565b3461033b576103766114fc6114f336611450565b92919091611f84565b60409391935193849384611486565b3461033b57611519366103d2565b611521612122565b6001600160801b036005549163ffffffff60a01b9060a01b169316906001600160401b0360c01b16179063ffffffff60801b9060801b161717600555600080f35b3461033b57600036600319011261033b576007546040805161ffff8316815260109290921c6001600160a01b0316602083015290f35b3461033b57602036600319011261033b5760043561ffff80821680830361033b576115c1612122565b1561033b576003805461ffff60a01b191660a09390931b61ffff60a01b16929092179182905560075461165f929161162b9161161b9060101c6001600160a01b03169161160c610819565b9460a01c16849061ffff169052565b6001600160a01b03166020830152565b61ffff81511660075491602062010000600160b01b0391015160101b169169ffffffffffffffffffff60b01b161717600755565b6003546100199060a01c61ffff166008546116959060101c6001600160a01b031661161b61168b610819565b61ffff9094168452565b61ffff81511660085491602062010000600160b01b0391015160101b169169ffffffffffffffffffff60b01b161717600855565b3461033b5760006020366003190112610be8576004356116e8816104a3565b6116f0612122565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691839190833b1561175e5760249083604051958694859363ca5eb5e160e01b85521660048401525af1801561062857611752575080f35b61175b90610759565b80f35b8280fd5b3461033b57600036600319011261033b57600554604080516001600160801b038316815263ffffffff608084901c8116602083015260a09390931c90921690820152606090f35b3461033b576103766114fc6117bd36610ca4565b939290926120a8565b9061040b91602081526117df60208201835160ff169052565b602082015160408201526117fc6040830151606083019015159052565b6060820151151560808201526080820151805160a08301526020015160c082015260a0820151805160e08301526020015161010082015260c082015161012082015260e082015190610100611860610160938461014085015261018084019061098c565b93015191601f198285030191015261098c565b3461033b57602036600319011261033b5761188c611ea7565b50600435600052600a602052610376604060002061192360096118ad6107f9565b926118bc6111fa825460ff1690565b60018101546020850152600281015460ff818116151560408701526118e091611221565b6118ec6003820161086e565b60808501526118fd6005820161086e565b60a0850152600781015460c0850152611918600882016108c6565b60e0850152016108c6565b610100820152604051918291826117c6565b3461033b57600036600319011261033b57600454604080516001600160801b038316815263ffffffff608084901c8116602083015260a09390931c90921690820152606090f35b3461033b57602036600319011261033b5763ffffffff60043561199e8161037a565b6119a6612122565b1663ffffffff196002541617600255600080f35b3461033b57602036600319011261033b576004356119d7816104a3565b6119df612122565b6001600160a01b0381161561033b5761ffff60035460a01c16611a03604051610739565b600880546001600160b01b0319169190911760109290921b62010000600160b01b0316919091179055005b3461033b57600036600319011261033b57602060405163fffff9be8152f35b3461033b57602036600319011261033b57600435611a6a816104a3565b611a72612122565b6001600160a01b0381161561033b576002805468010000000000000000600160e01b03191660409290921b68010000000000000000600160e01b0316919091179055005b3461033b57604036600319011261033b57610019600435611ad68161037a565b602435611ae281610c9a565b611aea612122565b15611af6573090612273565b600090612273565b3461033b57611b0c366104b4565b50505092909150303303611c3e57611b46611b41611b3b611b2d8686612901565b356001600160f81b03191690565b60f81c90565b612928565b611b4f81611e13565b60028103611bb0575061066783611ba4611b9f611b8d7ff06876e31533a89db5d097a19a00a4457f569ce0e87c4ff14f204ec04f59d05c9787613039565b91906000526009602052604060002090565b612bbf565b604051938493846121f2565b80611bbc600192611e13565b03611c0d5761066783611ba4611c08611bf67ff06876e31533a89db5d097a19a00a4457f569ce0e87c4ff14f204ec04f59d05c9787612eb7565b9190600052600a602052604060002090565b612a65565b6106677f5fa5ca9e9e00aa864db74fad0ea402428388eb93f02d992b72ca6b675b52f60593604051938493846121f2565b60405162461bcd60e51b81526020600482015260126024820152712932b9b2b93b32b2103337b91039b2b6331760711b6044820152606490fd5b3461033b57602036600319011261033b57600435611c95816104a3565b611c9d612122565b6001600160a01b039081168015611ceb57600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b604051631e4fbdf760e01b815260006004820152602490fd5b3461033b57611d12366103d2565b611d1a612122565b6001600160801b036004549163ffffffff60a01b9060a01b169316906001600160401b0360c01b16179063ffffffff60801b9060801b161717600455600080f35b611d6436611450565b90611d70939293611deb565b50611d7a83611e13565b821561033b57604093610d5993611f84565b3461033b57606036600319011261033b576020611da836610465565b63ffffffff8135611db88161037a565b166000526001825260406000205482604051920135148152f35b60405190611ddf82610739565b60006020838281520152565b60405190611df88261076c565b8160008152600060208201526040611e0e611dd2565b910152565b60031115611e1d57565b634e487b7160e01b600052602160045260246000fd5b9081602091031261033b575190565b6040513d6000823e3d90fd5b15611e5557565b60405162461bcd60e51b81526020600482015260156024820152744e6f20746f6b656e7320746f20776974686472617760581b6044820152606490fd5b9081602091031261033b575161040b81610c9a565b6040519061012082018281106001600160401b0382111761075457604052606061010083600081526000602082015260006040820152600083820152611eeb611dd2565b6080820152611ef8611dd2565b60a0820152600060c08201528260e08201520152565b90604051918281549182825260209260208301916000526020600020936000905b828210611f4557505050610826925003836107d8565b855484526001958601958895509381019390910190611f2f565b60405190611f6c82610787565b60006060838281528260208201528260408201520152565b9391611f8e611f5f565b50611f9885611e13565b841561033b57611fa781611e13565b806120575750611fe06004549163ffffffff6001600160801b03841693611fcd88611e13565b6001880361204e5760801c165b95612557565b9361200d611ff68284611ff16126f7565b612711565b94858761200860025463ffffffff1690565b61282e565b61203f6020825192015192612032612023610828565b6001600160801b039096168652565b63ffffffff166020850152565b60408301526060820152929190565b60a01c16611fda565b80612063600192611e13565b0361208857611fe06005549163ffffffff6001600160801b03841693611fcd88611e13565b611fe06006549163ffffffff6001600160801b03841693611fcd88611e13565b93949291906120b5611f5f565b506120bf85611e13565b841561033b576120d690611fda8385611ff16126f7565b946120ec63ffffffff918688846002541661282e565b9060208251920151926001600160801b036040519561210a87610787565b16855216602084015260408301526060820152929190565b6000546001600160a01b0316330361213657565b60405163118cdaa760e01b8152336004820152602490fd5b63ffffffff1680600052600160205260406000205490811561216e575090565b6024906040519063f6ff4fb760e01b82526004820152fd5b6001600160401b0381160361033b57565b6001600160401b036040809263ffffffff81356121b38161037a565b1685526020810135602086015201356121cb81612186565b16910152565b908060209392818452848401376000828201840152601f01601f1916010190565b8061220360809261040b9694612197565b81606082015201916121d1565b60208183031261033b578035906001600160401b03821161033b570181601f8201121561033b5780359061224382610b06565b9261225160405194856107d8565b8284526020838301011161033b57816000926020809301838601378301015290565b63ffffffff1660008181526001602090815260409182902084905581519283528201929092527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b9190a1565b919082604091031261033b576040516122d781610739565b6020808294805184520151910152565b9060808282031261033b576123219060408051936123048561076c565b80518552602081015161231681612186565b6020860152016122bf565b604082015290565b906020909392936040835263ffffffff8151166040840152818101516060840152608061237d612367604084015160a08488015260e087019061098c565b6060840151868203603f190160a088015261098c565b910151151560c08401526001600160a01b03909416910152565b6124006080949261241c96946123ab611deb565b5060206123b88651612c45565b950191825180612485575b506123cd8561214e565b92511515926123e96123dd610835565b63ffffffff9097168752565b602086015260408501526060840152151585830152565b6040518095819482936302637a4560e41b845260048401612329565b03917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156106285760009161245c575090565b61040b915060803d60801161247e575b61247681836107d8565b8101906122e7565b503d61246c565b61248e90612c67565b386123c3565b6001600160401b0381116107545760051b60200190565b604090604051916124bb83610739565b60018352829160005b602080821015612513578351602092916124dd826107a2565b60008252600081830152600086830152606060008184015260006080840152600060a084015260c08301528288010152016124c4565b505091925050565b634e487b7160e01b600052603260045260246000fd5b80511561253e5760200190565b61251b565b805182101561253e5760209160051b010190565b61040b916125636124ab565b9161256d81611e13565b6001810361267e57506125b861261661258f60025463ffffffff9060201c1690565b926125c66008549160405194859163051007e560e01b6020840152602483019190602083019252565b03601f1981018552846107d8565b6125e36125d1610842565b600181529463ffffffff166020860152565b60006040850152426001600160401b0316606085015261ffff8116608085015260101c6001600160a01b031660a0840152565b60c082015261262482612531565b5261262e81612531565b505b60035460a01c61ffff169061267361264661084f565b60038152926000602085018190526040850152426001600160401b0316606085015261ffff166080840152565b3060a0830152612d80565b8061268a600292611e13565b14612696575b50612630565b6125b86126d86126af60025463ffffffff9060201c1690565b926125c6600754916040519485916302ca70c960e01b6020840152602483019190602083019252565b60c08201526126e682612531565b526126f081612531565b5038612690565b604051600360f01b60208201526002815261040b81610739565b61ffff9060038261272183612e20565b16036127f8576040519360208501936001600160801b03199060801b16845263ffffffff60e01b9060e01b1660308501526014845261275f84610739565b60038261276b83612e20565b16036127f85760018261277e86516131e4565b16019182116127f35761040b926024926127e460405196846127aa89965180926020808a019101610969565b600160f81b60209187019182015260f09390931b6001600160f01b0319166021840152600560f81b60238401525192839086840190610969565b010360048101845201826107d8565b612b2a565b90612804602492612e20565b604051633a51740d60e01b815291166004820152fd5b9060408282031261033b5761040b916122bf565b61287f61289a93929461283f611dd2565b506128498361214e565b93604096879561286887519661285e886107bd565b63ffffffff168752565b602086015285850152606084015215156080830152565b815180938192631bb8518b60e31b8352309060048401612329565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa918215610628576000926128db57505090565b61040b9250803d106128fa575b6128f281836107d8565b81019061281a565b503d6128e8565b901561253e5790565b906021101561253e5760210190565b906022101561253e5760220190565b60ff1661040b81611e13565b81811061293f575050565b60008155600101612934565b9190601f811161295a57505050565b610826926000526020600020906020601f840160051c83019310612986575b601f0160051c0190612934565b9091508190612979565b91909182516001600160401b038111610754576129b7816129b1845461088c565b8461294b565b602080601f83116001146129fa575081906129eb9394956000926129ef575b50508160011b916000199060031b1c19161790565b9055565b0151905038806129d6565b90601f19831695612a1085600052602060002090565b926000905b888210612a4d57505083600195969710612a34575b505050811b019055565b015160001960f88460031b161c19169055388080612a2a565b80600185968294968601518155019501930190612a15565b600961010061082693612a8c612a7c825160ff1690565b855460ff191660ff909116178555565b60208101516001850155612adc60028501612abf612aad6040850151151590565b829060ff801983541691151516179055565b60608301511515815461ff00191690151560081b61ff0016179055565b60808101518051600386015560200151600485015560a08101518051600586015560200151600685015560c08101516007850155612b2160e082015160088601612990565b01519101612990565b634e487b7160e01b600052601160045260246000fd5b8151916001600160401b03831161075457680100000000000000008311610754578154838355808410612ba1575b5060208091019160005260206000209060005b848110612b8f575050505050565b83518382015592810192600101612b81565b612bb990836000528460206000209182019101612934565b38612b6e565b600961010061082693612bd6612a7c825160ff1690565b60208101516001850155612bf760028501612abf612aad6040850151151590565b60808101518051600386015560200151600485015560a08101518051600586015560200151600685015560c08101516007850155612c3c60e082015160088601612990565b01519101612b40565b803403612c4f5790565b6040516304fb820960e51b8152346004820152602490fd5b60405163393f876560e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926020929091908381600481885afa90811561062857600091612d4a575b5016928315612d385760009160405190848201926323b872dd60e01b84523360248401526044830152606482015260648152612cf8816107bd565b519082855af115611e42576000513d612d2f5750803b155b612d175750565b60249060405190635274afe760e01b82526004820152fd5b60011415612d10565b6040516329b99a9560e11b8152600490fd5b90508381813d8311612d79575b612d6181836107d8565b8101031261033b5751612d73816104a3565b38612cbd565b503d612d57565b919091612d8d81516131e4565b604051600160f01b60208201819052602282015260f09190911b6001600160f01b031916602482015260068152612dc381610739565b916000925b8251841015612df057612de8600191612de18686612543565b51906132f0565b930192612dc8565b92509290508163ffffffff612e0c602084015163ffffffff1690565b16612e1657505090565b61040b92506130fb565b6002815110612e30576002015190565b60405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b6044820152606490fd5b9060211161033b5760010190602090565b909291928360c31161033b57831161033b5760c3019160c2190190565b359060208110612ea8575090565b6000199060200360031b1b1690565b919091612fa8612fa0612ec8611ea7565b94612ee3612edc611b3b611b2d8488612901565b60ff168752565b80612ef7612ef18287612e6c565b90612e9a565b6020880190815294612f896001600160f81b0319612f18611b2d858561290a565b16151560408a01908152612f4b612f42612f35611b2d8787612919565b6001600160f81b03191690565b151560608c0152565b60808a016023840135815152602060438501359151015260a08a016063840135815152602060838501359151015260a383013560c08b015251151590565b15612fb357612f96610b21565b60e0890152612e7d565b810190612210565b610100840152519190565b612fbb610e06565b612f96565b602090818184031261033b578035906001600160401b03821161033b57019180601f8401121561033b578235612ff581612494565b9361300360405195866107d8565b818552838086019260051b82010192831161033b578301905b82821061302a575050505090565b8135815290830190830161301c565b919091612fa86130f361304a611ea7565b9461305e612edc611b3b611b2d8488612901565b8061306c612ef18287612e6c565b60208801908152946130976001600160f81b031961308d611b2d858561290a565b16151560408a0152565b6130b36130aa612f35611b2d8585612919565b151560608a0152565b608088016023820135815152602060438301359151015260a088016063820135815152602060838301359151015260a381013560c0890152612f96610e06565b810190612fc0565b604761040b9161314f936131d68151916131bd6020820151916040810151151560608201519061ffff6080840151169260a0600180821b03910151169460206040519c8d8b83829d51948593019101610969565b600160f81b6020918b0191820152600160f01b602182015260f898891b6001600160f81b031916602382015260e09190911b6001600160e01b0319166024820152961b602887015260c01b6001600160c01b031916602986015260f01b6001600160f01b0319166031850152565b60601b6bffffffffffffffffffffffff19166033830152565b0360278101845201826107d8565b61ffff908181116131f3571690565b604490604051906306dfcc6560e41b8252601060048301526024820152fd5b602090613229600b96949382815194859201610969565b600160f81b910190815260f091821b6001600160f01b03199081166001830152600160f01b60038301529390911b909216600583015260e01b6001600160e01b03191660078201520190565b602090613290601f9897959396949682815194859201610969565b94151560f81b940193845260c01b6001600160c01b031916600184015260f01b6001600160f01b031916600983015260601b6bffffffffffffffffffffffff1916600b8201528151916132eb90839085840190602001610969565b010190565b61ffff8251169160c0810192835151602381018091116127f35761040b9361333861331d61339e936131e4565b602086015163ffffffff169060405195869460208601613212565b039261334c601f19948581018552846107d8565b604081015115159561336860608301516001600160401b031690565b9161338c60a061337d608084015161ffff1690565b9201516001600160a01b031690565b91519260405198899660208801613275565b039081018352826107d856fea26469706673582212209147f4df1dd1aefe80bd79f858a0c0711a3bee391d94c8cb76313eb271e1d2d664736f6c63430008160033",
  "devdoc": {
    "details": "Inherits from OAppRead for cross-chain messaging and Ownable for access controlDefault configuration for ETH origin chain and ARB target chain.",
    "errors": {
      "InsufficientFee(uint256,uint256)": [
        {
          "params": {
            "provided": "The provided fee amount",
            "required": "The required fee amount"
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "ArbitraryMessageReceived((uint32,bytes32,uint64),bytes)": {
        "params": {
          "message": "The received message data",
          "origin": "Origin information of the message"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "_calldataReadLzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "This function can only be called by the contract itself through this._calldataReadLzReceive().      It's used as a bridge to convert memory parameters to calldata when needed.",
        "params": {
          "_executor": "The executor address for the message.",
          "_extraData": "Additional data passed with the message.",
          "_guid": "The unique identifier for the received message.",
          "_message": "The encoded message data that needs to be processed.",
          "_origin": "The origin information containing the source Endpoint ID."
        }
      },
      "allowInitializePath((uint32,bytes32,uint64))": {
        "details": "This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.",
        "params": {
          "origin": "The origin information containing the source endpoint and sender address."
        },
        "returns": {
          "_0": "Whether the path has been initialized."
        }
      },
      "constructor": {
        "params": {
          "_delegate": "Address of the delegate",
          "_endpoint": "Address of the LayerZero endpoint"
        }
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "details": "_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.",
        "params": {
          "_sender": "The sender address."
        },
        "returns": {
          "_0": "isSender Is a valid sender."
        }
      },
      "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.",
        "params": {
          "_executor": "The address of the executor for the received message.",
          "_extraData": "Additional arbitrary data provided by the corresponding executor.",
          "_guid": "The unique identifier for the received LayerZero message.",
          "_message": "The payload of the received message.",
          "_origin": "The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."
        }
      },
      "nextNonce(uint32,bytes32)": {
        "details": "_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.",
        "returns": {
          "nonce": "The next nonce."
        }
      },
      "oAppVersion()": {
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol implementation.",
          "senderVersion": "The version of the OAppSender.sol implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quote(uint8,uint256,uint32,uint128,bool)": {
        "params": {
          "calldataSize": "Size of calldata",
          "gasLimit": "Gas limit for the transaction",
          "id": "Verification ID",
          "payInLzToken": "Whether to pay in LayerZero tokens",
          "verifyType": "Type of verification"
        },
        "returns": {
          "_0": "QuoteResult Result containing gas and fee information"
        }
      },
      "quoteAuto(uint8,uint256,uint8,bool)": {
        "params": {
          "id": "Verification ID",
          "mode": "Whether to use optimistic mode",
          "payInLzToken": "Whether to pay in LayerZero tokens",
          "verifyType": "Type of verification"
        },
        "returns": {
          "_0": "QuoteResult Result containing gas and fee information"
        }
      },
      "readBytesCompressedAuto(uint8,uint256,uint8,bool)": {
        "params": {
          "id": "Verification ID",
          "mode": "Whether to use conservative/default/optimistic mode",
          "payInLzToken": "Whether to pay in LayerZero tokens",
          "verifyType": "Type of verification"
        },
        "returns": {
          "_0": "MessagingReceipt Receipt of the message transaction"
        }
      },
      "readBytesCompressedManual(uint8,uint256,uint32,uint128,bool)": {
        "params": {
          "calldataSize": "Size of calldata",
          "gasLimit": "Gas limit for the transaction",
          "id": "Verification ID",
          "payInLzToken": "Whether to pay in LayerZero tokens",
          "verifyType": "Type of verification"
        },
        "returns": {
          "_0": "MessagingReceipt Receipt of the message transaction"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setPeer(uint32,bytes32)": {
        "details": "Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.",
        "params": {
          "_eid": "The endpoint ID.",
          "_peer": "The address of the peer to be associated with the corresponding endpoint."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "BLOCK_CONFIRMATIONS": {
        "details": "Read block confirmations required"
      },
      "CONSERVATIVE_CONFIG": {
        "details": "Decoding gas - 714k(Fields)"
      },
      "DEFAULT_CONFIG": {
        "details": "Decoding gas - 1.4m(Fields)"
      },
      "OPTIMISTIC_CONFIG": {
        "details": "Decoding gas - 2.5m(Fields)"
      },
      "READ_FROM_ENDPOINT_ID": {
        "details": "Target chain - Reading from."
      },
      "READ_TO_ENDPOINT_ID": {
        "details": "Origin chain - Reading to."
      }
    },
    "title": "PallasVerificationReceiever",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InsufficientFee(uint256,uint256)": [
        {
          "notice": "Error thrown when the provided fee is insufficient"
        }
      ]
    },
    "events": {
      "ArbitraryMessageReceived((uint32,bytes32,uint64),bytes)": {
        "notice": "Emitted when an arbitrary message is received.         All _lzReceive() calls apart from read responses."
      },
      "ReadReceived((uint32,bytes32,uint64),bytes)": {
        "notice": "Emitted when a valid read is received."
      }
    },
    "kind": "user",
    "methods": {
      "CHAIN_CONFIG_VF()": {
        "notice": "Read configuration for vf and vm"
      },
      "CONSERVATIVE_CONFIG()": {
        "notice": "Conservative gas limit for transactions (100 Chars/20 Fields)"
      },
      "DEFAULT_CONFIG()": {
        "notice": "Default gas limit for transactions (250 Chars/50 Fields)"
      },
      "MAINNET_PREFIX()": {
        "notice": "Signature prefix for mainnet network mode"
      },
      "OPTIMISTIC_CONFIG()": {
        "notice": "Optimistic gas limit for transactions (500 Chars/100 Fields)"
      },
      "TESTNET_PREFIX()": {
        "notice": "Signature prefix for testnet network mode"
      },
      "_calldataReadLzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "notice": "A helper function to convert memory data to calldata for _readLzReceive."
      },
      "allowInitializePath((uint32,bytes32,uint64))": {
        "notice": "Checks if the path initialization is allowed based on the provided origin."
      },
      "constructor": {
        "notice": "Constructor for PallasVerificationReceiever"
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "getVFIdToData(uint256)": {
        "notice": "To get Verify Fields mapping value"
      },
      "getVMIdToData(uint256)": {
        "notice": "To get Verify Message mapping value"
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "notice": "Indicates whether an address is an approved composeMsg sender to the Endpoint."
      },
      "nextNonce(uint32,bytes32)": {
        "notice": "Retrieves the next nonce for a given source endpoint and sender address."
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "quote(uint8,uint256,uint32,uint128,bool)": {
        "notice": "Gets quote for transaction with manual parameters"
      },
      "quoteAuto(uint8,uint256,uint8,bool)": {
        "notice": "Gets automatic quote for transaction"
      },
      "readBytesCompressedAuto(uint8,uint256,uint8,bool)": {
        "notice": "Reads compressed bytes with automatic parameters"
      },
      "readBytesCompressedManual(uint8,uint256,uint32,uint128,bool)": {
        "notice": "Reads compressed bytes with manual parameters"
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setPeer(uint32,bytes32)": {
        "notice": "Sets the peer address (OApp instance) for a corresponding endpoint."
      },
      "updateVerifyFieldsContract(address)": {
        "notice": "=========================================================================== ADMIN STORAGE UPDATE FUNCTIONS ============================================ ==========================================================================="
      },
      "vfIdToData(uint256)": {
        "notice": "Mapping of verification field IDs to their compressed data"
      },
      "vmIdToData(uint256)": {
        "notice": "Mapping of verification message IDs to their compressed data"
      }
    },
    "notice": "Contract for receiving and processing cross-chain verification data",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3951,
        "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2953,
        "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 7343,
        "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
        "label": "READ_CHANNEL_ID",
        "offset": 0,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 7347,
        "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
        "label": "READ_FROM_ENDPOINT_ID",
        "offset": 4,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 7350,
        "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
        "label": "READ_FROM_ENDPOINT_ADDRESS",
        "offset": 8,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7354,
        "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
        "label": "READ_TO_ENDPOINT_ID",
        "offset": 28,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 7357,
        "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
        "label": "READ_TO_ENDPOINT_ADDRESS",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7361,
        "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
        "label": "BLOCK_CONFIRMATIONS",
        "offset": 20,
        "slot": "3",
        "type": "t_uint16"
      },
      {
        "astId": 7370,
        "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
        "label": "CONSERVATIVE_CONFIG",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(ModeConfig)7305_storage"
      },
      {
        "astId": 7379,
        "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
        "label": "DEFAULT_CONFIG",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(ModeConfig)7305_storage"
      },
      {
        "astId": 7388,
        "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
        "label": "OPTIMISTIC_CONFIG",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(ModeConfig)7305_storage"
      },
      {
        "astId": 7399,
        "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
        "label": "CHAIN_CONFIG_VF",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(ChainConfig)7287_storage"
      },
      {
        "astId": 7409,
        "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
        "label": "CHAIN_CONFIG_VM",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(ChainConfig)7287_storage"
      },
      {
        "astId": 7415,
        "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
        "label": "vfIdToData",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(VerifyFieldsStateCompressed)7184_storage)"
      },
      {
        "astId": 7421,
        "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
        "label": "vmIdToData",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(VerifyMessageStateCompressed)7262_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_struct(VerifyFieldsStateCompressed)7184_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VerifyFieldsStateCompressed)",
        "numberOfBytes": "32",
        "value": "t_struct(VerifyFieldsStateCompressed)7184_storage"
      },
      "t_mapping(t_uint256,t_struct(VerifyMessageStateCompressed)7262_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VerifyMessageStateCompressed)",
        "numberOfBytes": "32",
        "value": "t_struct(VerifyMessageStateCompressed)7262_storage"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ChainConfig)7287_storage": {
        "encoding": "inplace",
        "label": "struct ChainConfig",
        "members": [
          {
            "astId": 7284,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "confirmations",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 7286,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "toReadFrom",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ModeConfig)7305_storage": {
        "encoding": "inplace",
        "label": "struct ModeConfig",
        "members": [
          {
            "astId": 7300,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "gasLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 7302,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "messageSize",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7304,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "fieldsSize",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Point)7084_storage": {
        "encoding": "inplace",
        "label": "struct Point",
        "members": [
          {
            "astId": 7081,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7083,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Signature)7096_storage": {
        "encoding": "inplace",
        "label": "struct Signature",
        "members": [
          {
            "astId": 7093,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "r",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7095,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "s",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VerifyFieldsStateCompressed)7184_storage": {
        "encoding": "inplace",
        "label": "struct VerifyFieldsStateCompressed",
        "members": [
          {
            "astId": 7156,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "verifyType",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 7159,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "vfId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7162,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "mainnet",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 7165,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "isValid",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 7169,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "publicKey",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Point)7084_storage"
          },
          {
            "astId": 7173,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "signature",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(Signature)7096_storage"
          },
          {
            "astId": 7176,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "messageHash",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 7179,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "prefix",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 7183,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "fields",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(VerifyMessageStateCompressed)7262_storage": {
        "encoding": "inplace",
        "label": "struct VerifyMessageStateCompressed",
        "members": [
          {
            "astId": 7235,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "verifyType",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 7238,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "vmId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7241,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "mainnet",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 7244,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "isValid",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 7248,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "publicKey",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Point)7084_storage"
          },
          {
            "astId": 7252,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "signature",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(Signature)7096_storage"
          },
          {
            "astId": 7255,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "messageHash",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 7258,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "prefix",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 7261,
            "contract": "contracts/bridge/PallasVerificationReceiever.sol:PallasVerificationReceiever",
            "label": "message",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}