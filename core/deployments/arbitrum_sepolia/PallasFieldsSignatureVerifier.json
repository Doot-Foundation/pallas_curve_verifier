{
  "address": "0x2c393870Ed13b8DF0ed2861fBdC109cc2B9bd35F",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidPublicKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StepSkipped",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BEQ",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_STRING_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FIELD_MODULUS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "G_X",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "G_Y",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINNET_SIGNATURE_PREFIX",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALAR_MODULUS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNATURE_PREFIX",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vfId",
          "type": "uint256"
        }
      ],
      "name": "cleanupVFLifecycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "decodeVFStateBytesCompressed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "verifyType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "vfId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "mainnet",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "publicKey",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "r",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Signature",
              "name": "signature",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "messageHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "prefix",
              "type": "string"
            },
            {
              "internalType": "uint256[]",
              "name": "fields",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct PallasTypes.VerifyFieldsStateCompressed",
          "name": "state",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "fromStringToHash",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vfId",
          "type": "uint256"
        }
      ],
      "name": "getVFState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "init",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "mainnet",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "atStep",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "publicKey",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "r",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Signature",
              "name": "signature",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "messageHash",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "pkInGroup",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "sG",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "ePk",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "R",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "prefix",
              "type": "string"
            },
            {
              "internalType": "uint256[]",
              "name": "fields",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct PallasTypes.VerifyFieldsState",
          "name": "state",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vfId",
          "type": "uint256"
        }
      ],
      "name": "getVFStateBytesCompressed",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "fields",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Point",
          "name": "publicKey",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "prefix",
          "type": "string"
        }
      ],
      "name": "hashMessage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Point",
          "name": "point",
          "type": "tuple"
        }
      ],
      "name": "isValidPublicKey",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "init",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "mainnet",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "atStep",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "publicKey",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "r",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Signature",
              "name": "signature",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "messageHash",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "pkInGroup",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "sG",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "ePk",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "R",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "prefix",
              "type": "string"
            },
            {
              "internalType": "uint256[]",
              "name": "fields",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct PallasTypes.VerifyFieldsState",
          "name": "state",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "vfId",
          "type": "uint256"
        }
      ],
      "name": "packVerifyFieldsStateCompressed",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "input",
          "type": "uint256[]"
        }
      ],
      "name": "poseidonHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "prefix",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "input",
          "type": "uint256[]"
        }
      ],
      "name": "poseidonHashWithPrefix",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Point",
          "name": "publicKey",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "r",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "s",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Signature",
          "name": "signature",
          "type": "tuple"
        },
        {
          "internalType": "uint256[]",
          "name": "fields",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "network",
          "type": "bool"
        }
      ],
      "name": "step_0_VF_assignValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vfId",
          "type": "uint256"
        }
      ],
      "name": "step_1_VF",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vfId",
          "type": "uint256"
        }
      ],
      "name": "step_2_VF",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vfId",
          "type": "uint256"
        }
      ],
      "name": "step_3_VF",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vfId",
          "type": "uint256"
        }
      ],
      "name": "step_4_VF",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vfId",
          "type": "uint256"
        }
      ],
      "name": "step_5_VF",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vfId",
          "type": "uint256"
        }
      ],
      "name": "step_6_VF",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vfCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vfLifeCycle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "init",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "mainnet",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "atStep",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Point",
          "name": "publicKey",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "r",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "s",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Signature",
          "name": "signature",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "messageHash",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Point",
          "name": "pkInGroup",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Point",
          "name": "sG",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Point",
          "name": "ePk",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Point",
          "name": "R",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "prefix",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vfLifeCycleBytesCompressed",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vfLifeCycleCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x47540e809abfe73b7456f0f06ac80baf27cee601b1c9a4ea6c18e22b63188ce2",
  "receipt": {
    "to": null,
    "from": "0x22b4fD82537573614340314f29bCb2fab182f409",
    "contractAddress": "0x2c393870Ed13b8DF0ed2861fBdC109cc2B9bd35F",
    "transactionIndex": 53,
    "gasUsed": "7326600",
    "logsBloom": "0x
    "blockHash": "0x4f364c19c8712bc024635899f427d05989055c313a44b445a83e232e28cb8fb4",
    "transactionHash": "0x47540e809abfe73b7456f0f06ac80baf27cee601b1c9a4ea6c18e22b63188ce2",
    "logs": [],
    "blockNumber": 112829065,
    "cumulativeGasUsed": "12719521",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "64f3cf527524f19ccb5253f4235c6038",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidPublicKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StepSkipped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BEQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_STRING_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIELD_MODULUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"G_X\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"G_Y\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINNET_SIGNATURE_PREFIX\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALAR_MODULUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_PREFIX\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vfId\",\"type\":\"uint256\"}],\"name\":\"cleanupVFLifecycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeVFStateBytesCompressed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"verifyType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vfId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mainnet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"fields\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PallasTypes.VerifyFieldsStateCompressed\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"fromStringToHash\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vfId\",\"type\":\"uint256\"}],\"name\":\"getVFState\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"init\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mainnet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"atStep\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"pkInGroup\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"sG\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"ePk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"R\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"fields\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PallasTypes.VerifyFieldsState\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vfId\",\"type\":\"uint256\"}],\"name\":\"getVFStateBytesCompressed\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fields\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"hashMessage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"point\",\"type\":\"tuple\"}],\"name\":\"isValidPublicKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"init\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mainnet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"atStep\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"pkInGroup\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"sG\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"ePk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"R\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"fields\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PallasTypes.VerifyFieldsState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"vfId\",\"type\":\"uint256\"}],\"name\":\"packVerifyFieldsStateCompressed\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"poseidonHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"poseidonHashWithPrefix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"fields\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"network\",\"type\":\"bool\"}],\"name\":\"step_0_VF_assignValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vfId\",\"type\":\"uint256\"}],\"name\":\"step_1_VF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vfId\",\"type\":\"uint256\"}],\"name\":\"step_2_VF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vfId\",\"type\":\"uint256\"}],\"name\":\"step_3_VF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vfId\",\"type\":\"uint256\"}],\"name\":\"step_4_VF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vfId\",\"type\":\"uint256\"}],\"name\":\"step_5_VF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vfId\",\"type\":\"uint256\"}],\"name\":\"step_6_VF\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vfCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vfLifeCycle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"init\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mainnet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"atStep\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"pkInGroup\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"sG\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"ePk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"R\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vfLifeCycleBytesCompressed\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vfLifeCycleCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Verifies signatures over fields generated using mina-signer.\",\"kind\":\"dev\",\"methods\":{\"cleanupVFLifecycle(uint256)\":{\"details\":\"Can only be called by the creator of the verification process\",\"params\":{\"vfId\":\"The ID of the verification process to clean up\"}},\"decodeVFStateBytesCompressed(bytes)\":{\"params\":{\"data\":\"The compressed bytes containing all VF state fields. Expected minimum length is 195 bytes             plus additional bytes for the dynamic fields array\"},\"returns\":{\"state\":\"The decoded VerifyFieldsStateCompressed struct containing:               - verifyType (1 byte)               - vfId (32 bytes)               - mainnet flag (1 byte)               - isValid flag (1 byte)               - publicKey (x,y coordinates, 64 bytes)               - signature (r,s values, 64 bytes)               - messageHash (32 bytes)               - prefix (constant string)               - fields (dynamic uint256 array starting at byte 195)\"}},\"fromStringToHash(string)\":{\"details\":\"Matches the behavior of CircuitString.from(str).hash() from o1js Process: 1. Converts string to fixed-length character array 2. Pads array with zeros if needed 3. Computes Poseidon hash of the array\",\"params\":{\"str\":\"The input string to convert and hash\"},\"returns\":{\"_0\":\"uint256[] Array of character values, padded to DEFAULT_STRING_LENGTH\",\"_1\":\"uint256 Poseidon hash of the character array\"}},\"getVFState(uint256)\":{\"details\":\"Returns a copy of the state, not a reference\",\"params\":{\"vfId\":\"The ID of the verification process\"},\"returns\":{\"state\":\"The complete verification state structure\"}},\"getVFStateBytesCompressed(uint256)\":{\"params\":{\"vfId\":\"The ID of the verification process\"},\"returns\":{\"_0\":\"state The complete verification state structure in bytes\"}},\"hashMessage(uint256[],(uint256,uint256),uint256,string)\":{\"details\":\"Implements message hashing as specified in the signing scheme\",\"params\":{\"fields\":\"Array of message fields\",\"prefix\":\"Network-specific prefix\",\"publicKey\":\"Public key point\",\"r\":\"X-coordinate of signature point\"},\"returns\":{\"_0\":\"uint256 Resulting message hash\"}},\"isValidPublicKey((uint256,uint256))\":{\"details\":\"Checks if the point coordinates satisfy the curve equation y\\u00b2 = x\\u00b3 + 5\",\"params\":{\"point\":\"The point to validate with x and y coordinates\"},\"returns\":{\"_0\":\"bool True if the point lies on the curve, false otherwise\"}},\"packVerifyFieldsStateCompressed((bool,bool,bool,uint8,(uint256,uint256),(uint256,uint256),uint256,(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),string,uint256[]),uint256)\":{\"details\":\"Combines fixed-length and dynamic data using abi.encodePacked and abi.encode\",\"params\":{\"state\":\"The VerifyFieldsState to be compressed\",\"vfId\":\"The unique identifier for this verification state\"},\"returns\":{\"_0\":\"bytes The packed binary representation of the state\"}},\"poseidonHash(uint256[])\":{\"details\":\"Main hashing function without prefix\",\"params\":{\"input\":\"Array of field elements to hash\"},\"returns\":{\"_0\":\"uint256 Resulting hash\"}},\"poseidonHashWithPrefix(string,uint256[])\":{\"details\":\"Hashes prefix followed by input array\",\"params\":{\"input\":\"Array of field elements to hash\",\"prefix\":\"String prefix to prepend\"},\"returns\":{\"_0\":\"uint256 Resulting hash\"}},\"step_0_VF_assignValues((uint256,uint256),(uint256,uint256),uint256[],bool)\":{\"params\":{\"fields\":\"Array of field elements to verify\",\"network\":\"Network identifier (mainnet/testnet). Note for _network : It doesn't matter what we use since mina-signer uses 'testnet' regardless of the network set.\",\"publicKey\":\"The public key point (x,y)\",\"signature\":\"Contains r (x-coordinate) and s (scalar)\"}},\"step_1_VF(uint256)\":{\"params\":{\"vfId\":\"id\"}}},\"stateVariables\":{\"vfCounter\":{\"details\":\"Used as a unique ID. Incremented for each new verification process\"},\"vfLifeCycle\":{\"details\":\"Main storage for verification process states\"},\"vfLifeCycleCreator\":{\"details\":\"Used for access control in cleanup operations\"}},\"title\":\"PallasFieldsSignatureVerifier\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BEQ()\":{\"notice\":\"Curve equation constant (B) where y\\u00b2 = x\\u00b3 + B\"},\"DEFAULT_STRING_LENGTH()\":{\"notice\":\"Default length for string operations\"},\"FIELD_MODULUS()\":{\"notice\":\"Field modulus for Pallas curve\"},\"G_X()\":{\"notice\":\"Generator point x-coordinate\"},\"G_Y()\":{\"notice\":\"Generator point y-coordinate\"},\"MAINNET_SIGNATURE_PREFIX()\":{\"notice\":\"Signature prefix for mainnet\"},\"SCALAR_MODULUS()\":{\"notice\":\"Scalar field modulus for Pallas curve\"},\"SIGNATURE_PREFIX()\":{\"notice\":\"Default signature prefix for testnet\"},\"cleanupVFLifecycle(uint256)\":{\"notice\":\"Removes a verification process state from storage\"},\"decodeVFStateBytesCompressed(bytes)\":{\"notice\":\"Decodes a compressed byte array into a VerifyFieldsStateCompressed struct\"},\"fromStringToHash(string)\":{\"notice\":\"Converts a string to its character array representation and computes its Poseidon hash\"},\"getVFState(uint256)\":{\"notice\":\"Retrieves the complete state of a field verification process\"},\"getVFStateBytesCompressed(uint256)\":{\"notice\":\"Retrieves the complete state of a verification process in bytes\"},\"hashMessage(uint256[],(uint256,uint256),uint256,string)\":{\"notice\":\"Hashes message fields with public key and signature data\"},\"isValidPublicKey((uint256,uint256))\":{\"notice\":\"Validates if a point lies on the Pallas curve\"},\"packVerifyFieldsStateCompressed((bool,bool,bool,uint8,(uint256,uint256),(uint256,uint256),uint256,(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),string,uint256[]),uint256)\":{\"notice\":\"Packs a VerifyFieldsState into a compressed bytes format for efficient storage\"},\"poseidonHash(uint256[])\":{\"notice\":\"Computes Poseidon hash of input array\"},\"poseidonHashWithPrefix(string,uint256[])\":{\"notice\":\"Computes Poseidon hash with prefix\"},\"step_0_VF_assignValues((uint256,uint256),(uint256,uint256),uint256[],bool)\":{\"notice\":\"Zero step - Input assignment. ==================================================\"},\"step_1_VF(uint256)\":{\"notice\":\"Compute hash of the message with network prefix ================================================== Matches the first part of verify(): let e = hashMessage(message, pk, r, networkId); Process: 1. Convert message to HashInput format 2. Append public key coordinates and signature.r 3. Apply network prefix and hash Order is critical: [message fields] + [pk.x, pk.y, sig.r]\"},\"step_2_VF(uint256)\":{\"notice\":\"Convert public key to curve point ================================================== From o1js: PublicKey.toGroup(publicKey) This converts compressed public key format (x, isOdd) to full curve point representation by: 1. Computing y\\u00b2 = x\\u00b3 + 5 (Pallas curve equation) 2. Taking square root 3. Selecting appropriate y value based on isOdd\"},\"step_3_VF(uint256)\":{\"notice\":\"Compute s*G where G is generator point ================================================== From o1js: scale(one, s) Critical: Do not reduce scalar by SCALAR_MODULUS Uses projective coordinates internally for efficiency Must use exact generator point coordinates from o1js: G.x = 1 G.y = 0x1b74b5a30a12937c53dfa9f06378ee548f655bd4333d477119cf7a23caed2abb\"},\"step_4_VF(uint256)\":{\"notice\":\"Compute e*publicKey ================================================== From o1js: scale(Group.toProjective(pk), e) where e is the message hash computed in step 1 Uses same scalar multiplication as s*G Takes public key point from step 2\"},\"step_5_VF(uint256)\":{\"notice\":\"Compute R = sG - ePk ================================================== From o1js: sub(scale(one, s), scale(Group.toProjective(pk), e)) Implemented as point addition with negated ePk Point negation on Pallas: (x, -y) R will be used for final verification\"},\"step_6_VF(uint256)\":{\"notice\":\"Final signature verification ================================================== From o1js: let { x: rx, y: ry } = Group.fromProjective(R); return Field.isEven(ry) && Field.equal(rx, r); Two conditions must be met: 1. R.x equals signature.r 2. R.y is even Returns final verification result\"},\"vfCounter()\":{\"notice\":\"Counter for tracking total number of field verification processes.\"},\"vfLifeCycle(uint256)\":{\"notice\":\"Maps verification IDs to their respective state structures\"},\"vfLifeCycleBytesCompressed(uint256)\":{\"notice\":\"Maps verification IDs to their respective state structures compressed into bytes form. Doesn't store intermediate states but only the important bits.\"},\"vfLifeCycleCreator(uint256)\":{\"notice\":\"Maps verification IDs to their creators' addresses\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CORE_FieldsVerification.sol\":\"PallasFieldsSignatureVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/CORE_FieldsVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./kimchi/Poseidon.sol\\\";\\n\\nerror InvalidPublicKey();\\nerror StepSkipped();\\n\\n/**\\n * @title PallasFieldsSignatureVerifier\\n * @dev Verifies signatures over fields generated using mina-signer.\\n */\\n\\ncontract PallasFieldsSignatureVerifier is Poseidon {\\n    /// @notice Identifier for the type of verification.\\n    uint8 constant TYPE_VERIFY_FIELDS = 2;\\n\\n    /// @notice Counter for tracking total number of field verification processes.\\n    /// @dev Used as a unique ID. Incremented for each new verification process\\n    uint256 public vfCounter = 0;\\n\\n    /// @notice Maps verification IDs to their creators' addresses\\n    /// @dev Used for access control in cleanup operations\\n    mapping(uint256 => address) public vfLifeCycleCreator;\\n\\n    /// @notice Maps verification IDs to their respective state structures\\n    /// @dev Main storage for verification process states\\n    mapping(uint256 => VerifyFieldsState) public vfLifeCycle;\\n\\n    /// @notice Maps verification IDs to their respective state structures compressed into bytes form.\\n    /// Doesn't store intermediate states but only the important bits.\\n    mapping(uint256 => bytes) public vfLifeCycleBytesCompressed;\\n\\n    /// @notice Ensures only the creator of a verification process can access it\\n    /// @param vfId The verification process ID\\n    modifier isVFCreator(uint256 vfId) {\\n        if (msg.sender != vfLifeCycleCreator[vfId]) revert();\\n        _;\\n    }\\n\\n    /// @notice Ensures the verification ID exists\\n    /// @param vfId The verification process ID to check\\n    modifier isValidVFId(uint256 vfId) {\\n        if (vfId >= vfCounter) revert();\\n        _;\\n    }\\n\\n    /// @notice Removes a verification process state from storage\\n    /// @dev Can only be called by the creator of the verification process\\n    /// @param vfId The ID of the verification process to clean up\\n    function cleanupVFLifecycle(uint256 vfId) external isVFCreator(vfId) {\\n        delete vfLifeCycle[vfId];\\n    }\\n\\n    /// @notice Retrieves the complete state of a field verification process\\n    /// @dev Returns a copy of the state, not a reference\\n    /// @param vfId The ID of the verification process\\n    /// @return state The complete verification state structure\\n    function getVFState(\\n        uint256 vfId\\n    ) external view returns (VerifyFieldsState memory state) {\\n        return vfLifeCycle[vfId];\\n    }\\n\\n    /// @notice Retrieves the complete state of a verification process in bytes\\n    /// @param vfId The ID of the verification process\\n    /// @return state The complete verification state structure in bytes\\n    function getVFStateBytesCompressed(\\n        uint256 vfId\\n    ) external view returns (bytes memory) {\\n        return vfLifeCycleBytesCompressed[vfId];\\n    }\\n\\n    /// @notice Decodes a compressed byte array into a VerifyFieldsStateCompressed struct\\n    /// @param data The compressed bytes containing all VF state fields. Expected minimum length is 195 bytes\\n    ///             plus additional bytes for the dynamic fields array\\n    /// @return state The decoded VerifyFieldsStateCompressed struct containing:\\n    ///               - verifyType (1 byte)\\n    ///               - vfId (32 bytes)\\n    ///               - mainnet flag (1 byte)\\n    ///               - isValid flag (1 byte)\\n    ///               - publicKey (x,y coordinates, 64 bytes)\\n    ///               - signature (r,s values, 64 bytes)\\n    ///               - messageHash (32 bytes)\\n    ///               - prefix (constant string)\\n    ///               - fields (dynamic uint256 array starting at byte 195)\\n    function decodeVFStateBytesCompressed(\\n        bytes calldata data\\n    ) external pure returns (VerifyFieldsStateCompressed memory state) {\\n        state.verifyType = uint8(data[0]);\\n        state.vfId = uint256(bytes32(data[1:33]));\\n        state.mainnet = (data[33] != 0);\\n        state.isValid = (data[34] != 0);\\n\\n        uint256 x;\\n        uint256 y;\\n        uint256 r;\\n        uint256 s;\\n        uint256 messageHash;\\n\\n        assembly {\\n            x := calldataload(add(data.offset, 35))\\n            y := calldataload(add(data.offset, 67))\\n            r := calldataload(add(data.offset, 99))\\n            s := calldataload(add(data.offset, 131))\\n            messageHash := calldataload(add(data.offset, 163))\\n        }\\n\\n        state.publicKey.x = x;\\n        state.publicKey.y = y;\\n        state.signature.r = r;\\n        state.signature.s = s;\\n        state.messageHash = messageHash;\\n        state.prefix = \\\"CodaSignature*******\\\";\\n\\n        state.fields = abi.decode(data[195:], (uint256[]));\\n        return state;\\n    }\\n\\n    /// @notice Validates if a point lies on the Pallas curve\\n    /// @dev Checks if the point coordinates satisfy the curve equation y\\u00b2 = x\\u00b3 + 5\\n    /// @param point The point to validate with x and y coordinates\\n    /// @return bool True if the point lies on the curve, false otherwise\\n    function isValidPublicKey(Point memory point) public pure returns (bool) {\\n        if (point.x >= FIELD_MODULUS || point.y >= FIELD_MODULUS) {\\n            return false;\\n        }\\n\\n        uint256 x2 = mulmod(point.x, point.x, FIELD_MODULUS);\\n        uint256 lhs = mulmod(point.y, point.y, FIELD_MODULUS);\\n        return\\n            lhs == addmod(mulmod(x2, point.x, FIELD_MODULUS), 5, FIELD_MODULUS);\\n    }\\n\\n    /// @notice Zero step - Input assignment.\\n    /// ==================================================\\n    /// @param publicKey The public key point (x,y)\\n    /// @param signature Contains r (x-coordinate) and s (scalar)\\n    /// @param fields Array of field elements to verify\\n    /// @param network Network identifier (mainnet/testnet).\\n    /// Note for _network : It doesn't matter what we use since mina-signer uses 'testnet' regardless\\n    /// of the network set.\\n    function step_0_VF_assignValues(\\n        Point calldata publicKey,\\n        Signature calldata signature,\\n        uint256[] calldata fields,\\n        bool network\\n    ) external returns (uint256) {\\n        if (!isValidPublicKey(publicKey)) revert InvalidPublicKey();\\n\\n        uint256 toSetId = vfCounter++;\\n\\n        VerifyFieldsState storage toPush = vfLifeCycle[toSetId];\\n        // Pack initialization in optimal order\\n        toPush.atStep = 0;\\n        toPush.init = true;\\n        toPush.mainnet = network;\\n        toPush.publicKey = publicKey;\\n        toPush.signature = signature;\\n        toPush.fields = fields;\\n        toPush.prefix = \\\"CodaSignature*******\\\";\\n\\n        vfLifeCycleCreator[toSetId] = msg.sender;\\n\\n        return toSetId;\\n    }\\n\\n    /// @notice Compute hash of the message with network prefix\\n    /// ==================================================\\n    /// Matches the first part of verify():\\n    /// let e = hashMessage(message, pk, r, networkId);\\n    /// Process:\\n    /// 1. Convert message to HashInput format\\n    /// 2. Append public key coordinates and signature.r\\n    /// 3. Apply network prefix and hash\\n    /// Order is critical: [message fields] + [pk.x, pk.y, sig.r]\\n    /// @param vfId id\\n    function step_1_VF(uint256 vfId) external isValidVFId(vfId) {\\n        VerifyFieldsState storage current = vfLifeCycle[vfId];\\n        if (current.atStep != 0) revert StepSkipped();\\n        if (!current.init) revert(\\\"Not initialized\\\");\\n\\n        // Cache fields array to avoid multiple storage reads\\n        uint256[] memory fields = current.fields;\\n        Point memory publicKey = current.publicKey;\\n\\n        current.messageHash = hashMessage(\\n            fields,\\n            publicKey,\\n            current.signature.r,\\n            current.prefix\\n        );\\n        current.atStep = 1;\\n    }\\n\\n    /// @notice Convert public key to curve point\\n    /// ==================================================\\n    /// From o1js: PublicKey.toGroup(publicKey)\\n    /// This converts compressed public key format (x, isOdd)\\n    /// to full curve point representation by:\\n    /// 1. Computing y\\u00b2 = x\\u00b3 + 5 (Pallas curve equation)\\n    /// 2. Taking square root\\n    /// 3. Selecting appropriate y value based on isOdd\\n    function step_2_VF(uint256 vfId) external isValidVFId(vfId) {\\n        VerifyFieldsState storage current = vfLifeCycle[vfId];\\n        if (current.atStep != 1) revert StepSkipped();\\n\\n        // Cache public key to avoid multiple storage reads\\n        uint256 pubKeyX = current.publicKey.x;\\n        uint256 pubKeyY = current.publicKey.y;\\n\\n        current.pkInGroup = _defaultToGroup(\\n            PointCompressed({x: pubKeyX, isOdd: (pubKeyY & 1 == 1)})\\n        );\\n        current.atStep = 2;\\n    }\\n\\n    /// @notice Compute s*G where G is generator point\\n    /// ==================================================\\n    /// From o1js: scale(one, s)\\n    /// Critical: Do not reduce scalar by SCALAR_MODULUS\\n    /// Uses projective coordinates internally for efficiency\\n    /// Must use exact generator point coordinates from o1js:\\n    /// G.x = 1\\n    /// G.y = 0x1b74b5a30a12937c53dfa9f06378ee548f655bd4333d477119cf7a23caed2abb\\n    function step_3_VF(uint256 vfId) external isValidVFId(vfId) {\\n        VerifyFieldsState storage current = vfLifeCycle[vfId];\\n        if (current.atStep != 2) revert StepSkipped();\\n\\n        Point memory G = Point(G_X, G_Y);\\n        current.sG = scalarMul(G, current.signature.s);\\n        current.atStep = 3;\\n    }\\n\\n    /// @notice Compute e*publicKey\\n    /// ==================================================\\n    /// From o1js: scale(Group.toProjective(pk), e)\\n    /// where e is the message hash computed in step 1\\n    /// Uses same scalar multiplication as s*G\\n    /// Takes public key point from step 2\\n    function step_4_VF(uint256 vfId) external isValidVFId(vfId) {\\n        VerifyFieldsState storage current = vfLifeCycle[vfId];\\n        if (current.atStep != 3) revert StepSkipped();\\n\\n        Point memory pkInGroup = current.pkInGroup;\\n        uint256 messageHash = current.messageHash;\\n\\n        current.ePk = scalarMul(pkInGroup, messageHash);\\n        current.atStep = 4;\\n    }\\n\\n    /// @notice Compute R = sG - ePk\\n    /// ==================================================\\n    /// From o1js: sub(scale(one, s), scale(Group.toProjective(pk), e))\\n    /// Implemented as point addition with negated ePk\\n    /// Point negation on Pallas: (x, -y)\\n    /// R will be used for final verification\\n    function step_5_VF(uint256 vfId) external isValidVFId(vfId) {\\n        VerifyFieldsState storage current = vfLifeCycle[vfId];\\n        if (current.atStep != 4) revert StepSkipped();\\n\\n        Point memory sG = current.sG;\\n        Point memory ePk = current.ePk;\\n\\n        current.R = addPoints(sG, Point(ePk.x, FIELD_MODULUS - ePk.y));\\n        current.atStep = 5;\\n    }\\n\\n    /// @notice Final signature verification\\n    /// ==================================================\\n    /// From o1js:\\n    /// let { x: rx, y: ry } = Group.fromProjective(R);\\n    /// return Field.isEven(ry) && Field.equal(rx, r);\\n    /// Two conditions must be met:\\n    /// 1. R.x equals signature.r\\n    /// 2. R.y is even\\n    /// Returns final verification result\\n    function step_6_VF(uint256 vfId) external isValidVFId(vfId) returns (bool) {\\n        VerifyFieldsState storage current = vfLifeCycle[vfId];\\n        if (current.atStep != 5) revert StepSkipped();\\n\\n        // Cache values and compute in memory\\n        Point memory R = current.R;\\n        uint256 sigR = current.signature.r;\\n\\n        current.isValid = (R.x == sigR) && (R.y & 1 == 0);\\n        current.atStep = 6;\\n\\n        bytes memory stateBytesCompressed = packVerifyFieldsStateCompressed(\\n            current,\\n            vfId\\n        );\\n        vfLifeCycleBytesCompressed[vfId] = stateBytesCompressed;\\n\\n        return current.isValid;\\n    }\\n\\n    /// @notice Packs a VerifyFieldsState into a compressed bytes format for efficient storage\\n    /// @dev Combines fixed-length and dynamic data using abi.encodePacked and abi.encode\\n    /// @param state The VerifyFieldsState to be compressed\\n    /// @param vfId The unique identifier for this verification state\\n    /// @return bytes The packed binary representation of the state\\n    function packVerifyFieldsStateCompressed(\\n        VerifyFieldsState memory state,\\n        uint256 vfId\\n    ) public pure returns (bytes memory) {\\n        bytes memory fixedData = abi.encodePacked(\\n            TYPE_VERIFY_FIELDS,\\n            vfId,\\n            state.mainnet,\\n            state.isValid,\\n            state.publicKey.x,\\n            state.publicKey.y,\\n            state.signature.r,\\n            state.signature.s,\\n            state.messageHash\\n        );\\n\\n        return abi.encodePacked(fixedData, abi.encode(state.fields));\\n    }\\n\\n    /// @notice Converts a string to its character array representation and computes its Poseidon hash\\n    /// @dev Matches the behavior of CircuitString.from(str).hash() from o1js\\n    /// Process:\\n    /// 1. Converts string to fixed-length character array\\n    /// 2. Pads array with zeros if needed\\n    /// 3. Computes Poseidon hash of the array\\n    /// @param str The input string to convert and hash\\n    /// @return uint256[] Array of character values, padded to DEFAULT_STRING_LENGTH\\n    /// @return uint256 Poseidon hash of the character array\\n    function fromStringToHash(\\n        string memory str\\n    ) public view returns (uint256[] memory, uint256) {\\n        bytes memory strBytes = bytes(str);\\n        require(\\n            strBytes.length <= DEFAULT_STRING_LENGTH,\\n            \\\"CircuitString.fromString: input string exceeds max length!\\\"\\n        );\\n\\n        uint256[] memory charValues = new uint256[](DEFAULT_STRING_LENGTH);\\n\\n        // Convert string characters to their numeric values\\n        for (uint i = 0; i < strBytes.length; i++) {\\n            charValues[i] = uint256(uint8(strBytes[i]));\\n        }\\n        // Pad remaining slots with zeros\\n        for (uint i = strBytes.length; i < DEFAULT_STRING_LENGTH; i++) {\\n            charValues[i] = 0;\\n        }\\n\\n        uint256 charHash = poseidonHash(charValues);\\n        return (charValues, charHash);\\n    }\\n\\n    /// @notice Converts a compressed point to its full curve point representation\\n    /// @dev Implements point decompression for Pallas curve (y\\u00b2 = x\\u00b3 + 5)\\n    /// Process:\\n    /// 1. Keep x-coordinate from compressed point\\n    /// 2. Calculate y\\u00b2 using curve equation (y\\u00b2 = x\\u00b3 + 5)\\n    /// 3. Compute square root to get y value\\n    /// 4. Choose correct y value based on oddness flag\\n    /// @param compressed The compressed point containing x-coordinate and oddness flag\\n    /// @return Point Complete point with both x and y coordinates on Pallas curve\\n    function _defaultToGroup(\\n        PointCompressed memory compressed\\n    ) internal view returns (Point memory) {\\n        uint256 _x = compressed.x;\\n\\n        uint256 x2 = mulmod(_x, _x, FIELD_MODULUS);\\n        uint256 y2 = addmod(mulmod(x2, _x, FIELD_MODULUS), BEQ, FIELD_MODULUS);\\n\\n        uint256 _y = sqrtmod(y2, FIELD_MODULUS);\\n\\n        if ((_y & 1 == 1) != compressed.isOdd) {\\n            _y = FIELD_MODULUS - _y;\\n        }\\n\\n        return Point({x: _x, y: _y});\\n    }\\n}\\n\",\"keccak256\":\"0x4835afc8e061ea46f8cddac844de4bb06968146315c2e3c64ce827577ca13a89\",\"license\":\"MIT\"},\"contracts/PallasTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title PallasTypes\\n * @dev Common types used in Pallas operations\\n */\\ncontract PallasTypes {\\n    /// @title Point Structure\\n    /// @notice Represents a point on an elliptic curve with x and y coordinates\\n    /// @dev Used for public key and signature operations\\n    struct Point {\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    /// @title Compressed Point Structure\\n    /// @notice Represents a compressed form of an elliptic curve point\\n    /// @dev Uses x-coordinate and a boolean flag instead of full coordinates\\n    struct PointCompressed {\\n        uint256 x;\\n        bool isOdd;\\n    }\\n\\n    /// @title Digital Signature Structure\\n    /// @notice Represents a digital signature with its components\\n    /// @dev Used for cryptographic signature verification\\n    struct Signature {\\n        uint256 r;\\n        uint256 s;\\n    }\\n\\n    /// @title Projective Point Structure\\n    /// @notice Represents a point in projective coordinates\\n    /// @dev Used for efficient elliptic curve operations\\n    struct ProjectivePoint {\\n        uint256 x;\\n        uint256 y;\\n        uint256 z;\\n    }\\n\\n    /// @title Verify Fields State Structure\\n    /// @notice Holds the state for field array signature verification process\\n    /// @dev Used to track the progress and store intermediate results during verification\\n    struct VerifyFieldsState {\\n        /// @notice Indicates if the state has been properly initialized\\n        bool init;\\n        /// @notice Network flag - true for mainnet, false for testnet\\n        bool mainnet;\\n        /// @notice Final verification result\\n        bool isValid;\\n        /// @notice Tracks the current step of verification (0-6)\\n        uint8 atStep;\\n        /// @notice The public key point (x,y) being verified against\\n        Point publicKey;\\n        /// @notice The signature containing r (x-coordinate) and s (scalar)\\n        Signature signature;\\n        /// @notice Hash of the fields array with prefix ('e' value)\\n        uint256 messageHash;\\n        /// @notice Public key converted to curve point format\\n        Point pkInGroup;\\n        /// @notice Result of scalar multiplication s*G\\n        Point sG;\\n        /// @notice Result of scalar multiplication e*pkInGroup\\n        Point ePk;\\n        /// @notice Final computed point R = sG - ePk\\n        Point R;\\n        /// @notice Network-specific prefix for message hashing\\n        string prefix;\\n        /// @notice Array of field elements to verify\\n        uint256[] fields;\\n    }\\n\\n    /// @title Verification Fields State Compressed Structure.\\n    /// @notice Holds only the primary state for message signature verification process\\n    struct VerifyFieldsStateCompressed {\\n        /// @notice Indicates the type. 1 for Message, 2 for Fields. Helpful when reading\\n        uint8 verifyType;\\n        /// @notice The unique id\\n        uint256 vfId;\\n        /// @notice Network flag - true for mainnet, false for testnet\\n        bool mainnet;\\n        /// @notice Final verification result\\n        bool isValid;\\n        /// @notice The public key point (x,y) being verified against\\n        Point publicKey;\\n        /// @notice The signature containing r (x-coordinate) and s (scalar)\\n        Signature signature;\\n        /// @notice Hash of the fields array with prefix ('e' value)\\n        uint256 messageHash;\\n        /// @notice Network-specific prefix for message hashing\\n        string prefix;\\n        /// @notice Array of field elements to verify\\n        uint256[] fields;\\n    }\\n\\n    /// @title Verification Message State Structure\\n    /// @notice Holds the state for message signature verification process\\n    /// @dev Used to track the progress and store intermediate results during verification\\n    struct VerifyMessageState {\\n        /// @notice Indicates if the state has been properly initialized\\n        bool init;\\n        /// @notice Network flag - true for mainnet, false for testnet\\n        bool mainnet;\\n        /// @notice Final verification result\\n        bool isValid;\\n        /// @notice Tracks the current step of verification (0-6)\\n        uint8 atStep;\\n        /// @notice The public key point (x,y) being verified against\\n        Point publicKey;\\n        /// @notice The signature containing r (x-coordinate) and s (scalar)\\n        Signature signature;\\n        /// @notice Stores the computed hash of the message\\n        uint256 messageHash;\\n        /// @notice Public key converted to group form\\n        Point pkInGroup;\\n        /// @notice Result of scalar multiplication s*G\\n        Point sG;\\n        /// @notice Result of scalar multiplication e*pkInGroup\\n        Point ePk;\\n        /// @notice Final computed point R = sG - ePk\\n        Point R;\\n        /// @notice The message being verified\\n        string message;\\n        /// @notice Network-specific prefix for message hashing\\n        string prefix;\\n    }\\n\\n    /// @title Verification Message State Compressed Structure.\\n    /// @notice Holds only the primary state for message signature verification process\\n    struct VerifyMessageStateCompressed {\\n        /// @notice Indicates the type. 1 for Message, 2 for Fields. Helpful when reading\\n        uint8 verifyType;\\n        /// @notice The unique id\\n        uint256 vmId;\\n        /// @notice Network flag - true for mainnet, false for testnet\\n        bool mainnet;\\n        /// @notice Final verification result\\n        bool isValid;\\n        /// @notice The public key point (x,y) being verified against\\n        Point publicKey;\\n        /// @notice The signature containing r (x-coordinate) and s (scalar)\\n        Signature signature;\\n        /// @notice Stores the computed hash of the message\\n        uint256 messageHash;\\n        /// @notice Network-specific prefix for message hashing\\n        string prefix;\\n        /// @notice The message being verified\\n        string message;\\n    }\\n}\\n\",\"keccak256\":\"0x96de136ce962c0dea55a977505ce4a23d1b5b83509a3e5356f6679f290561715\",\"license\":\"MIT\"},\"contracts/kimchi/PallasConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract PallasConstants {\\n    // Poseidon parameters matching poseidonParamsKimchiFp\\n    uint256 internal constant POSEIDON_FULL_ROUNDS = 55;\\n    uint256 internal constant POSEIDON_STATE_SIZE = 3;\\n    uint256 internal constant POSEIDON_RATE = 2;\\n    uint256 internal constant POSEIDON_POWER = 7;\\n    bool internal constant POSEIDON_HAS_INITIAL_ROUND_CONSTANT = false;\\n\\n    uint256[3][3] internal mdsMatrix = [\\n        [\\n            12035446894107573964500871153637039653510326950134440362813193268448863222019,\\n            25461374787957152039031444204194007219326765802730624564074257060397341542093,\\n            27667907157110496066452777015908813333407980290333709698851344970789663080149\\n        ],\\n        [\\n            4491931056866994439025447213644536587424785196363427220456343191847333476930,\\n            14743631939509747387607291926699970421064627808101543132147270746750887019919,\\n            9448400033389617131295304336481030167723486090288313334230651810071857784477\\n        ],\\n        [\\n            10525578725509990281643336361904863911009900817790387635342941550657754064843,\\n            27437632000253211280915908546961303399777448677029255413769125486614773776695,\\n            27566319851776897085443681456689352477426926500749993803132851225169606086988\\n        ]\\n    ];\\n\\n    uint256[3][55] internal roundConstants = [\\n        [\\n            21155079691556475130150866428468322463125560312786319980770950159250751855431,\\n            16883442198399350202652499677723930673110172289234921799701652810789093522349,\\n            17030687036425314703519085065002231920937594822150793091243263847382891822670\\n        ],\\n        [\\n            25216718237129482752721276445368692059997901880654047883630276346421457427360,\\n            9054264347380455706540423067244764093107767235485930776517975315876127782582,\\n            26439087121446593160953570192891907825526260324480347638727375735543609856888\\n        ],\\n        [\\n            15251000790817261169639394496851831733819930596125214313084182526610855787494,\\n            10861916012597714684433535077722887124099023163589869801449218212493070551767,\\n            18597653523270601187312528478986388028263730767495975370566527202946430104139\\n        ],\\n        [\\n            15831416454198644276563319006805490049460322229057756462580029181847589006611,\\n            15171856919255965617705854914448645702014039524159471542852132430360867202292,\\n            15488495958879593647482715143904752785889816789652405888927117106448507625751\\n        ],\\n        [\\n            19039802679983063488134304670998725949842655199289961967801223969839823940152,\\n            4720101937153217036737330058775388037616286510783561045464678919473230044408,\\n            10226318327254973427513859412126640040910264416718766418164893837597674300190\\n        ],\\n        [\\n            20878756131129218406920515859235137275859844638301967889441262030146031838819,\\n            7178475685651744631172532830973371642652029385893667810726019303466125436953,\\n            1996970955918516145107673266490486752153434673064635795711751450164177339618\\n        ],\\n        [\\n            15205545916434157464929420145756897321482314798910153575340430817222504672630,\\n            25660296961552699573824264215804279051322332899472350724416657386062327210698,\\n            13842611741937412200312851417353455040950878279339067816479233688850376089318\\n        ],\\n        [\\n            1383799642177300432144836486981606294838630135265094078921115713566691160459,\\n            1135532281155277588005319334542025976079676424839948500020664227027300010929,\\n            4384117336930380014868572224801371377488688194169758696438185377724744869360\\n        ],\\n        [\\n            21725577575710270071808882335900370909424604447083353471892004026180492193649,\\n            676128913284806802699862508051022306366147359505124346651466289788974059668,\\n            25186611339598418732666781049829183886812651492845008333418424746493100589207\\n        ],\\n        [\\n            10402240124664763733060094237696964473609580414190944671778761753887884341073,\\n            11918307118590866200687906627767559273324023585642003803337447146531313172441,\\n            16895677254395661024186292503536662354181715337630376909778003268311296637301\\n        ],\\n        [\\n            23818602699032741669874498456696325705498383130221297580399035778119213224810,\\n            4285193711150023248690088154344086684336247475445482883105661485741762600154,\\n            19133204443389422404056150665863951250222934590192266371578950735825153238612\\n        ],\\n        [\\n            5515589673266504033533906836494002702866463791762187140099560583198974233395,\\n            11830435563729472715615302060564876527985621376031612798386367965451821182352,\\n            7510711479224915247011074129666445216001563200717943545636462819681638560128\\n        ],\\n        [\\n            24694843201907722940091503626731830056550128225297370217610328578733387733444,\\n            27361655066973784653563425664091383058914302579694897188019422193564924110528,\\n            21606788186194534241166833954371013788633495786419718955480491478044413102713\\n        ],\\n        [\\n            19934060063390905409309407607814787335159021816537006003398035237707924006757,\\n            8495813630060004961768092461554180468161254914257386012937942498774724649553,\\n            27524960680529762202005330464726908693944660961000958842417927307941561848461\\n        ],\\n        [\\n            15178481650950399259757805400615635703086255035073919114667254549690862896985,\\n            16164780354695672259791105197274509251141405713012804937107314962551600380870,\\n            10529167793600778056702353412758954281652843049850979705476598375597148191979\\n        ],\\n        [\\n            721141070179074082553302896292167103755384741083338957818644728290501449040,\\n            22044408985956234023934090378372374883099115753118261312473550998188148912041,\\n            27068254103241989852888872162525066148367014691482601147536314217249046186315\\n        ],\\n        [\\n            3880429241956357176819112098792744584376727450211873998699580893624868748961,\\n            17387097125522937623262508065966749501583017524609697127088211568136333655623,\\n            6256814421247770895467770393029354017922744712896100913895513234184920631289\\n        ],\\n        [\\n            2942627347777337187690939671601251987500285937340386328746818861972711408579,\\n            24031654937764287280548628128490074801809101323243546313826173430897408945397,\\n            14401457902976567713827506689641442844921449636054278900045849050301331732143\\n        ],\\n        [\\n            20170632877385406450742199836933900257692624353889848352407590794211839130727,\\n            24056496193857444725324410428861722338174099794084586764867109123681727290181,\\n            11257913009612703357266904349759250619633397075667824800196659858304604714965\\n        ],\\n        [\\n            22228158921984425749199071461510152694025757871561406897041788037116931009246,\\n            9152163378317846541430311327336774331416267016980485920222768197583559318682,\\n            13906695403538884432896105059360907560653506400343268230130536740148070289175\\n        ],\\n        [\\n            7220714562509721437034241786731185291972496952091254931195414855962344025067,\\n            27608867305903811397208862801981345878179337369367554478205559689592889691927,\\n            13288465747219756218882697408422850918209170830515545272152965967042670763153\\n        ],\\n        [\\n            8251343892709140154567051772980662609566359215743613773155065627504813327653,\\n            22035238365102171608166944627493632660244312563934708756134297161332908879090,\\n            13560937766273321037807329177749403409731524715067067740487246745322577571823\\n        ],\\n        [\\n            21652518608959234550262559135285358020552897349934571164032339186996805408040,\\n            22479086963324173427634460342145551255011746993910136574926173581069603086891,\\n            13676501958531751140966255121288182631772843001727158043704693838707387130095\\n        ],\\n        [\\n            5680310394102577950568930199056707827608275306479994663197187031893244826674,\\n            25125360450906166639190392763071557410047335755341060350879819485506243289998,\\n            22659254028501616785029594492374243581602744364859762239504348429834224676676\\n        ],\\n        [\\n            23101411405087512171421838856759448177512679869882987631073569441496722536782,\\n            24149774013240355952057123660656464942409328637280437515964899830988178868108,\\n            5782097512368226173095183217893826020351125522160843964147125728530147423065\\n        ],\\n        [\\n            13540762114500083869920564649399977644344247485313990448129838910231204868111,\\n            20421637734328811337527547703833013277831804985438407401987624070721139913982,\\n            7742664118615900772129122541139124149525273579639574972380600206383923500701\\n        ],\\n        [\\n            1109643801053963021778418773196543643970146666329661268825691230294798976318,\\n            16580663920817053843121063692728699890952505074386761779275436996241901223840,\\n            14638514680222429058240285918830106208025229459346033470787111294847121792366\\n        ],\\n        [\\n            17080385857812672649489217965285727739557573467014392822992021264701563205891,\\n            26176268111736737558502775993925696791974738793095023824029827577569530708665,\\n            4382756253392449071896813428140986330161215829425086284611219278674857536001\\n        ],\\n        [\\n            13934033814940585315406666445960471293638427404971553891617533231178815348902,\\n            27054912732979753314774418228399230433963143177662848084045249524271046173121,\\n            28916070403698593376490976676534962592542013020010643734621202484860041243391\\n        ],\\n        [\\n            24820015636966360150164458094894587765384135259446295278101998130934963922381,\\n            7969535238488580655870884015145760954416088335296905520306227531221721881868,\\n            7690547696740080985104189563436871930607055124031711216224219523236060212249\\n        ],\\n        [\\n            9712576468091272384496248353414290908377825697488757134833205246106605867289,\\n            12148698031438398980683630141370402088785182722473169207262735228500190477924,\\n            14359657643133476969781351728574842164124292705609900285041476162075031948227\\n        ],\\n        [\\n            23563839965372067275137992801035780013422228997724286060975035719045352435470,\\n            4184634822776323233231956802962638484057536837393405750680645555481330909086,\\n            16249511905185772125762038789038193114431085603985079639889795722501216492487\\n        ],\\n        [\\n            11001863048692031559800673473526311616702863826063550559568315794438941516621,\\n            4702354107983530219070178410740869035350641284373933887080161024348425080464,\\n            23751680507533064238793742311430343910720206725883441625894258483004979501613\\n        ],\\n        [\\n            28670526516158451470169873496541739545860177757793329093045522432279094518766,\\n            3568312993091537758218792253361873752799472566055209125947589819564395417072,\\n            1819755756343439646550062754332039103654718693246396323207323333948654200950\\n        ],\\n        [\\n            5372129954699791301953948907349887257752247843844511069896766784624930478273,\\n            17512156688034945920605615850550150476471921176481039715733979181538491476080,\\n            25777105342317622165159064911913148785971147228777677435200128966844208883059\\n        ],\\n        [\\n            25350392006158741749134238306326265756085455157012701586003300872637887157982,\\n            20096724945283767296886159120145376967480397366990493578897615204296873954844,\\n            8063283381910110762785892100479219642751540456251198202214433355775540036851\\n        ],\\n        [\\n            4393613870462297385565277757207010824900723217720226130342463666351557475823,\\n            9874972555132910032057499689351411450892722671352476280351715757363137891038,\\n            23590926474329902351439438151596866311245682682435235170001347511997242904868\\n        ],\\n        [\\n            17723373371137275859467518615551278584842947963894791032296774955869958211070,\\n            2350345015303336966039836492267992193191479606566494799781846958620636621159,\\n            27755207882790211140683010581856487965587066971982625511152297537534623405016\\n        ],\\n        [\\n            6584607987789185408123601849106260907671314994378225066806060862710814193906,\\n            609759108847171587253578490536519506369136135254150754300671591987320319770,\\n            28435187585965602110074342250910608316032945187476441868666714022529803033083\\n        ],\\n        [\\n            16016664911651770663938916450245705908287192964254704641717751103464322455303,\\n            17551273293154696089066968171579395800922204266630874071186322718903959339163,\\n            20414195497994754529479032467015716938594722029047207834858832838081413050198\\n        ],\\n        [\\n            19773307918850685463180290966774465805537520595602496529624568184993487593855,\\n            24598603838812162820757838364185126333280131847747737533989799467867231166980,\\n            11040972566103463398651864390163813377135738019556270484707889323659789290225\\n        ],\\n        [\\n            5189242080957784038860188184443287562488963023922086723850863987437818393811,\\n            1435203288979376557721239239445613396009633263160237764653161500252258220144,\\n            13066591163578079667911016543985168493088721636164837520689376346534152547210\\n        ],\\n        [\\n            17345901407013599418148210465150865782628422047458024807490502489711252831342,\\n            22139633362249671900128029132387275539363684188353969065288495002671733200348,\\n            1061056418502836172283188490483332922126033656372467737207927075184389487061\\n        ],\\n        [\\n            10241738906190857416046229928455551829189196941239601756375665129874835232299,\\n            27808033332417845112292408673209999320983657696373938259351951416571545364415,\\n            18820154989873674261497645724903918046694142479240549687085662625471577737140\\n        ],\\n        [\\n            7983688435214640842673294735439196010654951226956101271763849527529940619307,\\n            17067928657801807648925755556866676899145460770352731818062909643149568271566,\\n            24472070825156236829515738091791182856425635433388202153358580534810244942762\\n        ],\\n        [\\n            25752201169361795911258625731016717414310986450004737514595241038036936283227,\\n            26041505376284666160132119888949817249574689146924196064963008712979256107535,\\n            23977050489096115210391718599021827780049209314283111721864956071820102846008\\n        ],\\n        [\\n            26678257097278788410676026718736087312816016749016738933942134600725962413805,\\n            10480026985951498884090911619636977502506079971893083605102044931823547311729,\\n            21126631300593007055117122830961273871167754554670317425822083333557535463396\\n        ],\\n        [\\n            1564862894215434177641156287699106659379648851457681469848362532131406827573,\\n            13247162472821152334486419054854847522301612781818744556576865965657773174584,\\n            8673615954922496961704442777870253767001276027366984739283715623634850885984\\n        ],\\n        [\\n            2794525076937490807476666942602262298677291735723129868457629508555429470085,\\n            4656175953888995612264371467596648522808911819700660048695373348629527757049,\\n            23221574237857660318443567292601561932489621919104226163978909845174616477329\\n        ],\\n        [\\n            1878392460078272317716114458784636517603142716091316893054365153068227117145,\\n            2370412714505757731457251173604396662292063533194555369091306667486647634097,\\n            17409784861870189930766639925394191888667317762328427589153989811980152373276\\n        ],\\n        [\\n            25869136641898166514111941708608048269584233242773814014385564101168774293194,\\n            11361209360311194794795494027949518465383235799633128250259863567683341091323,\\n            14913258820718821235077379851098720071902170702113538811112331615559409988569\\n        ],\\n        [\\n            12957012022018304419868287033513141736995211906682903915897515954290678373899,\\n            17128889547450684566010972445328859295804027707361763477802050112063630550300,\\n            23329219085372232771288306767242735245018143857623151155581182779769305489903\\n        ],\\n        [\\n            1607741027962933685476527275858938699728586794398382348454736018784568853937,\\n            2611953825405141009309433982109911976923326848135736099261873796908057448476,\\n            7372230383134982628913227482618052530364724821976589156840317933676130378411\\n        ],\\n        [\\n            20203606758501212620842735123770014952499754751430660463060696990317556818571,\\n            4678361398979174017885631008335559529633853759463947250620930343087749944307,\\n            27176462634198471376002287271754121925750749676999036165457559387195124025594\\n        ],\\n        [\\n            6361981813552614697928697527332318530502852015189048838072565811230204474643,\\n            13815234633287489023151647353581705241145927054858922281829444557905946323248,\\n            10888828634279127981352133512429657747610298502219125571406085952954136470354\\n        ]\\n    ];\\n}\\n\",\"keccak256\":\"0x566b08ca4e2d1a3d6e808d3c6f84e9a1f6bcddc3b8bb860beea06230a9136ff7\",\"license\":\"MIT\"},\"contracts/kimchi/PallasCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// import \\\"./PallasConstants.sol\\\";\\nimport \\\"../PallasTypes.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title PallasCurve\\n * @dev Implementation of Pallas curve operations\\n */\\ncontract PallasCurve is PallasTypes {\\n    /// @notice Field modulus for Pallas curve\\n    uint256 public constant FIELD_MODULUS =\\n        0x40000000000000000000000000000000224698fc094cf91b992d30ed00000001;\\n\\n    /// @notice Scalar field modulus for Pallas curve\\n    uint256 public constant SCALAR_MODULUS =\\n        0x40000000000000000000000000224698fc0994a8dd8c46eb2100000001;\\n\\n    /// @notice Curve equation constant (B) where y\\u00b2 = x\\u00b3 + B\\n    uint256 public constant BEQ = 5;\\n\\n    /// @notice Default signature prefix for testnet\\n    string public constant SIGNATURE_PREFIX = \\\"CodaSignature*******\\\";\\n\\n    /// @notice Signature prefix for mainnet\\n    string public constant MAINNET_SIGNATURE_PREFIX = \\\"MinaSignatureMainnet\\\";\\n\\n    /// @notice Default length for string operations\\n    uint256 public constant DEFAULT_STRING_LENGTH = 128;\\n\\n    /// @notice Generator point x-coordinate\\n    uint256 public constant G_X = 1;\\n\\n    /// @notice Generator point y-coordinate\\n    uint256 public constant G_Y =\\n        0x1b74b5a30a12937c53dfa9f06378ee548f655bd4333d477119cf7a23caed2abb;\\n\\n    /// @notice Performs modular addition\\n    /// @dev Wrapper around Solidity's addmod\\n    /// @param x First operand\\n    /// @param y Second operand\\n    /// @param k Modulus\\n    /// @return uint256 Result of (x + y) mod k\\n    function add(uint x, uint y, uint k) internal pure returns (uint256) {\\n        return addmod(x, y, k);\\n    }\\n\\n    /// @notice Performs modular multiplication\\n    /// @dev Wrapper around Solidity's mulmod\\n    /// @param x First operand\\n    /// @param y Second operand\\n    /// @param k Modulus\\n    /// @return uint256 Result of (x * y) mod k\\n    function mul(uint x, uint y, uint k) internal pure returns (uint256) {\\n        return mulmod(x, y, k);\\n    }\\n\\n    /// @notice Computes modular multiplicative inverse\\n    /// @dev Implements extended Euclidean algorithm for FIELD_MODULUS\\n    /// @param a Value to invert\\n    /// @return uint256 Modular multiplicative inverse of a\\n    function invmod(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) revert(\\\"Cannot invert 0\\\");\\n\\n        uint256 t = 0;\\n        uint256 newt = 1;\\n        uint256 r = FIELD_MODULUS;\\n        uint256 newr = a;\\n        uint256 quotient;\\n        uint256 temp;\\n\\n        unchecked {\\n            while (newr != 0) {\\n                quotient = r / newr;\\n\\n                temp = t;\\n                t = newt;\\n                newt = temp - quotient * newt;\\n\\n                temp = r;\\n                r = newr;\\n                newr = temp - quotient * newr;\\n            }\\n\\n            if (t > FIELD_MODULUS) {\\n                t += FIELD_MODULUS;\\n            }\\n        }\\n        return t;\\n    }\\n\\n    /// @notice Performs modular exponentiation\\n    /// @dev Uses precompiled contract at address 0x05\\n    /// @param base Base value\\n    /// @param exponent Exponent value\\n    /// @param modulus Modulus for operation\\n    /// @return result Result of base^exponent mod modulus\\n    function modExp(\\n        uint256 base,\\n        uint256 exponent,\\n        uint256 modulus\\n    ) internal view returns (uint256 result) {\\n        assembly {\\n            // Free memory pointer\\n            let p := mload(0x40)\\n\\n            // Store length of base, exponent and modulus\\n            mstore(p, 0x20)\\n            mstore(add(p, 0x20), 0x20)\\n            mstore(add(p, 0x40), 0x20)\\n\\n            // Store base, exponent and modulus\\n            mstore(add(p, 0x60), base)\\n            mstore(add(p, 0x80), exponent)\\n            mstore(add(p, 0xa0), modulus)\\n\\n            // Call precompiled contract for modular exponentiation\\n            if iszero(staticcall(gas(), 0x05, p, 0xc0, p, 0x20)) {\\n                revert(0, 0)\\n            }\\n\\n            result := mload(p)\\n        }\\n    }\\n\\n    /// @notice Computes modular square root\\n    /// @dev Implements Tonelli-Shanks algorithm for prime modulus\\n    /// @param n Value to find square root of\\n    /// @param p Modulus (must be prime)\\n    /// @return uint256 Modular square root of n\\n    function sqrtmod(uint256 n, uint256 p) internal view returns (uint256) {\\n        if (n == 0) return 0;\\n\\n        // Calculate Q and M where p - 1 = Q * 2^M and Q is odd\\n        uint256 Q = p - 1;\\n        uint256 M = 0;\\n        while (Q % 2 == 0) {\\n            Q /= 2;\\n            M++;\\n        }\\n\\n        // Find a non-residue z\\n        uint256 z = 2;\\n        while (true) {\\n            if (modExp(z, (p - 1) / 2, p) == p - 1) break; // Found a non-residue\\n            z++;\\n        }\\n\\n        uint256 c = modExp(z, Q, p);\\n        uint256 t = modExp(n, Q >> 1, p); // n^((Q-1)/2)\\n        uint256 R = mulmod(t, n, p); // n^((Q+1)/2)\\n        t = mulmod(t, R, p); // n^Q\\n\\n        while (t != 1) {\\n            uint256 i = 0;\\n            uint256 s = t;\\n            while (s != 1 && i < M) {\\n                s = mulmod(s, s, p);\\n                i++;\\n            }\\n            require(i < M, \\\"Square root does not exist\\\");\\n\\n            uint256 b = c;\\n            for (uint256 j = 0; j < M - i - 1; j++) {\\n                b = mulmod(b, b, p);\\n            }\\n            M = i;\\n            c = mulmod(b, b, p);\\n            t = mulmod(t, c, p);\\n            R = mulmod(R, b, p);\\n        }\\n\\n        return R;\\n    }\\n\\n    /// @notice Checks if a number is even\\n    /// @dev Uses bitwise AND operation\\n    /// @param x Number to check\\n    /// @return bool True if number is even\\n    function isEven(uint256 x) internal pure returns (bool) {\\n        return (x & 1) == 0;\\n    }\\n\\n    /// @notice Converts a point from affine to projective coordinates\\n    /// @dev Used for efficient point operations. Returns (1:1:0) for point at infinity\\n    /// @param p Point in affine coordinates (x,y)\\n    /// @return ProjectivePoint Point in projective coordinates (X:Y:Z)\\n    function toProjective(\\n        Point memory p\\n    ) internal pure returns (ProjectivePoint memory) {\\n        if (p.x == 0 && p.y == 0) {\\n            return ProjectivePoint(1, 1, 0); // Point at infinity\\n        }\\n        return ProjectivePoint(p.x, p.y, 1);\\n    }\\n\\n    /// @notice Converts a point from projective to affine coordinates\\n    /// @dev Performs modular inverse computation for Z coordinate\\n    /// @param p Point in projective coordinates (X:Y:Z)\\n    /// @return Point Point in affine coordinates (x,y)\\n    function toAffine(\\n        ProjectivePoint memory p\\n    ) internal pure returns (Point memory) {\\n        if (p.z == 0) {\\n            return Point(0, 0); // Point at infinity\\n        }\\n\\n        uint256 zinv = invmod(p.z);\\n        uint256 zinv_squared = mulmod(zinv, zinv, FIELD_MODULUS);\\n\\n        return\\n            Point(\\n                mulmod(p.x, zinv_squared, FIELD_MODULUS),\\n                mulmod(\\n                    p.y,\\n                    mulmod(zinv, zinv_squared, FIELD_MODULUS),\\n                    FIELD_MODULUS\\n                )\\n            );\\n    }\\n\\n    /// @notice Verifies if a point lies on the Pallas curve\\n    /// @dev Checks if point satisfies y\\u00b2 = x\\u00b3 + 5 (Pallas curve equation)\\n    /// @param p Point to check\\n    /// @return bool True if point is on curve\\n    function isOnCurve(Point memory p) internal pure returns (bool) {\\n        if (p.x >= FIELD_MODULUS || p.y >= FIELD_MODULUS) {\\n            return false;\\n        }\\n\\n        uint256 lhs = mulmod(p.y, p.y, FIELD_MODULUS);\\n        uint256 x2 = mulmod(p.x, p.x, FIELD_MODULUS);\\n        uint256 x3 = mulmod(x2, p.x, FIELD_MODULUS);\\n        uint256 rhs = addmod(x3, BEQ, FIELD_MODULUS);\\n\\n        return lhs == rhs;\\n    }\\n\\n    /// @notice Doubles a point in projective coordinates\\n    /// @dev Specialized doubling formula for Pallas curve, matching o1js implementation\\n    /// @param g Point to double in projective coordinates\\n    /// @return ProjectivePoint Doubled point\\n    function projectiveDouble(\\n        ProjectivePoint memory g\\n    ) internal pure returns (ProjectivePoint memory) {\\n        if (g.z == 0) return g;\\n        if (g.y == 0) revert(\\\"Cannot double point with y=0\\\");\\n\\n        unchecked {\\n            // Cache x, y, z values\\n            uint256 x = g.x;\\n            uint256 y = g.y;\\n            uint256 z = g.z;\\n\\n            // A = X1^2\\n            uint256 A = mulmod(x, x, FIELD_MODULUS);\\n            // B = Y1^2\\n            uint256 B = mulmod(y, y, FIELD_MODULUS);\\n            // C = B^2\\n            uint256 C = mulmod(B, B, FIELD_MODULUS);\\n\\n            // Cache X1+B\\n            uint256 xPlusB = addmod(x, B, FIELD_MODULUS);\\n            // D = 2*((X1+B)^2-A-C)\\n            uint256 D = mulmod(\\n                2,\\n                addmod(\\n                    mulmod(xPlusB, xPlusB, FIELD_MODULUS),\\n                    FIELD_MODULUS - addmod(A, C, FIELD_MODULUS),\\n                    FIELD_MODULUS\\n                ),\\n                FIELD_MODULUS\\n            );\\n\\n            // E = 3*A\\n            uint256 E = mulmod(3, A, FIELD_MODULUS);\\n            // F = E^2\\n            uint256 F = mulmod(E, E, FIELD_MODULUS);\\n\\n            // Calculate final coordinates\\n            uint256 X3 = addmod(\\n                F,\\n                FIELD_MODULUS - mulmod(2, D, FIELD_MODULUS),\\n                FIELD_MODULUS\\n            );\\n            uint256 Y3 = addmod(\\n                mulmod(\\n                    E,\\n                    addmod(D, FIELD_MODULUS - X3, FIELD_MODULUS),\\n                    FIELD_MODULUS\\n                ),\\n                FIELD_MODULUS - mulmod(8, C, FIELD_MODULUS),\\n                FIELD_MODULUS\\n            );\\n            uint256 Z3 = mulmod(2, mulmod(y, z, FIELD_MODULUS), FIELD_MODULUS);\\n\\n            return ProjectivePoint(X3, Y3, Z3);\\n        }\\n    }\\n\\n    /// @notice Adds two points in projective coordinates\\n    /// @dev Implements complete addition formulas for Pallas curve, matching o1js behavior\\n    /// @param g First point in projective coordinates\\n    /// @param h Second point in projective coordinates\\n    /// @return ProjectivePoint Sum of the points\\n    function projectiveAdd(\\n        ProjectivePoint memory g,\\n        ProjectivePoint memory h\\n    ) internal pure returns (ProjectivePoint memory) {\\n        if (g.z == 0) return h;\\n        if (h.z == 0) return g;\\n\\n        unchecked {\\n            // Cache values\\n            uint256 z1 = g.z;\\n            uint256 z2 = h.z;\\n\\n            uint256 Z1Z1 = mulmod(z1, z1, FIELD_MODULUS);\\n            uint256 Z2Z2 = mulmod(z2, z2, FIELD_MODULUS);\\n            uint256 U1 = mulmod(g.x, Z2Z2, FIELD_MODULUS);\\n            uint256 U2 = mulmod(h.x, Z1Z1, FIELD_MODULUS);\\n            uint256 S1 = mulmod(\\n                g.y,\\n                mulmod(z2, Z2Z2, FIELD_MODULUS),\\n                FIELD_MODULUS\\n            );\\n            uint256 S2 = mulmod(\\n                h.y,\\n                mulmod(z1, Z1Z1, FIELD_MODULUS),\\n                FIELD_MODULUS\\n            );\\n            uint256 H = addmod(U2, FIELD_MODULUS - U1, FIELD_MODULUS);\\n\\n            if (H == 0) {\\n                if (S1 == S2) {\\n                    return projectiveDouble(g);\\n                }\\n                if (addmod(S1, S2, FIELD_MODULUS) == 0) {\\n                    return ProjectivePoint(1, 1, 0);\\n                }\\n                revert(\\\"Invalid point addition\\\");\\n            }\\n\\n            // Rest of calculations in one unchecked block for gas savings\\n            uint256 I = mulmod(mulmod(H, H, FIELD_MODULUS), 4, FIELD_MODULUS);\\n            uint256 J = mulmod(H, I, FIELD_MODULUS);\\n            uint256 r = mulmod(\\n                2,\\n                addmod(S2, FIELD_MODULUS - S1, FIELD_MODULUS),\\n                FIELD_MODULUS\\n            );\\n            uint256 V = mulmod(U1, I, FIELD_MODULUS);\\n\\n            uint256 X3 = addmod(\\n                mulmod(r, r, FIELD_MODULUS),\\n                FIELD_MODULUS -\\n                    addmod(J, mulmod(2, V, FIELD_MODULUS), FIELD_MODULUS),\\n                FIELD_MODULUS\\n            );\\n\\n            uint256 Y3 = addmod(\\n                mulmod(\\n                    r,\\n                    addmod(V, FIELD_MODULUS - X3, FIELD_MODULUS),\\n                    FIELD_MODULUS\\n                ),\\n                FIELD_MODULUS -\\n                    mulmod(2, mulmod(S1, J, FIELD_MODULUS), FIELD_MODULUS),\\n                FIELD_MODULUS\\n            );\\n\\n            uint256 Z3 = mulmod(\\n                addmod(\\n                    mulmod(\\n                        addmod(z1, z2, FIELD_MODULUS),\\n                        addmod(z1, z2, FIELD_MODULUS),\\n                        FIELD_MODULUS\\n                    ),\\n                    FIELD_MODULUS - addmod(Z1Z1, Z2Z2, FIELD_MODULUS),\\n                    FIELD_MODULUS\\n                ),\\n                H,\\n                FIELD_MODULUS\\n            );\\n\\n            return ProjectivePoint(X3, Y3, Z3);\\n        }\\n    }\\n\\n    /// @notice Adds two points in affine coordinates\\n    /// @dev Converts to projective, adds, then converts back to affine\\n    /// @param p1 First point in affine coordinates\\n    /// @param p2 Second point in affine coordinates\\n    /// @return Point Sum of the points in affine coordinates\\n    function addPoints(\\n        Point memory p1,\\n        Point memory p2\\n    ) internal pure returns (Point memory) {\\n        ProjectivePoint memory g = toProjective(p1);\\n        ProjectivePoint memory h = toProjective(p2);\\n        ProjectivePoint memory r = projectiveAdd(g, h);\\n        return toAffine(r);\\n    }\\n\\n    /// @notice Performs scalar multiplication of a point\\n    /// @dev Implements double-and-add algorithm, matching o1js behavior\\n    /// @param p Base point to multiply\\n    /// @param scalar Scalar value to multiply by\\n    /// @return Point Result of scalar multiplication\\n    function scalarMul(\\n        Point memory p,\\n        uint256 scalar\\n    ) internal pure returns (Point memory) {\\n        ProjectivePoint memory g = toProjective(p);\\n        ProjectivePoint memory result = ProjectivePoint(1, 1, 0);\\n        ProjectivePoint memory current = g;\\n\\n        // scalar = scalar % SCALAR_MODULUS;\\n        while (scalar > 0) {\\n            if (scalar & 1 == 1) {\\n                result = projectiveAdd(result, current);\\n            }\\n            current = projectiveDouble(current);\\n            scalar >>= 1;\\n        }\\n\\n        return toAffine(result);\\n    }\\n}\\n\",\"keccak256\":\"0x9b0b2866094132225f246b798a100a2153917a3ade0600260a1043f2c59c37a8\",\"license\":\"MIT\"},\"contracts/kimchi/Poseidon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./PallasConstants.sol\\\";\\nimport \\\"./PallasCurve.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title PoseidonT3\\n * @dev Implementation of Poseidon hash function for t = 3 (2 inputs)\\n */\\ncontract Poseidon is PallasCurve, PallasConstants {\\n    uint256 internal constant CODA_PREFIX_FIELD =\\n        240717916736854602989207148466022993262069182275;\\n    uint256 internal constant MINA_PREFIX_FIELD =\\n        664504924603203994814403132056773144791042910541;\\n\\n    /// @notice Computes x^7 mod FIELD_MODULUS\\n    /// @dev Optimized power7 implementation matching o1js\\n    /// @param x Base value\\n    /// @return uint256 Result of x^7 mod FIELD_MODULUS\\n    function power7(uint256 x) internal pure returns (uint256) {\\n        uint256 x2 = mulmod(x, x, FIELD_MODULUS);\\n        uint256 x3 = mulmod(x2, x, FIELD_MODULUS);\\n        uint256 x6 = mulmod(x3, x3, FIELD_MODULUS);\\n        return mulmod(x6, x, FIELD_MODULUS);\\n    }\\n\\n    // Matrix and Round Constants\\n    /// @notice Retrieves value from MDS matrix at specified position\\n    /// @dev Used in the Poseidon permutation\\n    /// @param row Row index of MDS matrix\\n    /// @param col Column index of MDS matrix\\n    /// @return uint256 Value at specified position\\n    function getMdsValue(\\n        uint256 row,\\n        uint256 col\\n    ) internal view returns (uint256) {\\n        require(row < 3 && col < 3, \\\"Invalid MDS indices\\\");\\n        return mdsMatrix[row][col];\\n    }\\n\\n    /// @notice Retrieves round constant for specified round and position\\n    /// @dev Used in the Poseidon permutation\\n    /// @param round Round number\\n    /// @param pos Position within the round\\n    /// @return uint256 Round constant value\\n    function getRoundConstant(\\n        uint256 round,\\n        uint256 pos\\n    ) internal view returns (uint256) {\\n        require(\\n            round < POSEIDON_FULL_ROUNDS && pos < 3,\\n            \\\"Invalid round constant indices\\\"\\n        );\\n        return roundConstants[round][pos];\\n    }\\n\\n    /// @notice Performs matrix multiplication with MDS matrix\\n    /// @dev Exactly matches o1js implementation\\n    /// @param state Current state array\\n    /// @return result Result of matrix multiplication\\n    function mdsMultiply(\\n        uint256[3] memory state\\n    ) internal view returns (uint256[3] memory result) {\\n        result[0] = addmod(\\n            addmod(\\n                mulmod(getMdsValue(0, 0), state[0], FIELD_MODULUS),\\n                mulmod(getMdsValue(0, 1), state[1], FIELD_MODULUS),\\n                FIELD_MODULUS\\n            ),\\n            mulmod(getMdsValue(0, 2), state[2], FIELD_MODULUS),\\n            FIELD_MODULUS\\n        );\\n\\n        result[1] = addmod(\\n            addmod(\\n                mulmod(getMdsValue(1, 0), state[0], FIELD_MODULUS),\\n                mulmod(getMdsValue(1, 1), state[1], FIELD_MODULUS),\\n                FIELD_MODULUS\\n            ),\\n            mulmod(getMdsValue(1, 2), state[2], FIELD_MODULUS),\\n            FIELD_MODULUS\\n        );\\n\\n        result[2] = addmod(\\n            addmod(\\n                mulmod(getMdsValue(2, 0), state[0], FIELD_MODULUS),\\n                mulmod(getMdsValue(2, 1), state[1], FIELD_MODULUS),\\n                FIELD_MODULUS\\n            ),\\n            mulmod(getMdsValue(2, 2), state[2], FIELD_MODULUS),\\n            FIELD_MODULUS\\n        );\\n    }\\n\\n    // State Management\\n    /// @notice Creates initial state array [0, 0, 0]\\n    /// @dev Used to initialize Poseidon hash state\\n    /// @return uint256[3] Initial state array\\n    function initialState() internal pure returns (uint256[3] memory) {\\n        return [uint256(0), uint256(0), uint256(0)];\\n    }\\n\\n    /// @notice Performs the Poseidon permutation on a state\\n    /// @dev Core permutation function for Poseidon hash\\n    /// @param state Input state array\\n    /// @return uint256[3] Permuted state\\n    function poseidonPermutation(\\n        uint256[3] memory state\\n    ) internal view returns (uint256[3] memory) {\\n        for (uint256 round = 0; round < POSEIDON_FULL_ROUNDS; round++) {\\n            state[0] = power7(state[0]);\\n            state[1] = power7(state[1]);\\n            state[2] = power7(state[2]);\\n\\n            state = mdsMultiply(state);\\n\\n            state[0] = addmod(\\n                state[0],\\n                getRoundConstant(round, 0),\\n                FIELD_MODULUS\\n            );\\n            state[1] = addmod(\\n                state[1],\\n                getRoundConstant(round, 1),\\n                FIELD_MODULUS\\n            );\\n            state[2] = addmod(\\n                state[2],\\n                getRoundConstant(round, 2),\\n                FIELD_MODULUS\\n            );\\n        }\\n        return state;\\n    }\\n\\n    /// @notice Updates state with input values\\n    /// @dev Processes input in blocks of POSEIDON_RATE size\\n    /// @param state Current state array\\n    /// @param input Input values to process\\n    /// @return uint256[3] Updated state\\n    function update(\\n        uint256[3] memory state,\\n        uint256[] memory input\\n    ) internal view returns (uint256[3] memory) {\\n        if (input.length == 0) {\\n            return poseidonPermutation(state);\\n        }\\n\\n        uint256 blockIndex;\\n        while (blockIndex < input.length) {\\n            // Unrolled POSEIDON_RATE loop for common case of rate=2\\n            if (blockIndex < input.length) {\\n                state[0] = addmod(state[0], input[blockIndex], FIELD_MODULUS);\\n            }\\n            if (blockIndex + 1 < input.length) {\\n                state[1] = addmod(\\n                    state[1],\\n                    input[blockIndex + 1],\\n                    FIELD_MODULUS\\n                );\\n            }\\n\\n            state = poseidonPermutation(state);\\n            blockIndex += POSEIDON_RATE;\\n        }\\n\\n        return state;\\n    }\\n\\n    /// String/Field Conversions\\n    /// @notice Converts a string prefix to a field element\\n    /// @dev Processes bytes in little-endian order, matching o1js implementation\\n    /// @param prefix The string to convert\\n    /// @return uint256 Field element representation of the prefix\\n    function prefixToField(\\n        string memory prefix\\n    ) internal pure returns (uint256) {\\n        bytes memory prefixBytes = bytes(prefix);\\n        require(prefixBytes.length < 32, \\\"prefix too long\\\");\\n\\n        uint256 result = 0;\\n        // Process in little-endian order (like o1js)\\n        for (uint i = 0; i < 32; i++) {\\n            if (i < prefixBytes.length) {\\n                result |= uint256(uint8(prefixBytes[i])) << (i * 8);\\n            }\\n        }\\n\\n        return result % FIELD_MODULUS;\\n    }\\n\\n    /// @notice Converts a string to a field element\\n    /// @dev Processes bytes in little-endian order, similar to prefixToField\\n    /// @param str The string to convert\\n    /// @return uint256 Field element representation of the string\\n    function stringToField(string memory str) internal pure returns (uint256) {\\n        bytes memory strBytes = bytes(str);\\n        require(strBytes.length < 32, \\\"prefix too long\\\");\\n\\n        uint256 result = 0;\\n        // Process in little-endian order (like o1js)\\n        for (uint i = 0; i < 32; i++) {\\n            if (i < strBytes.length) {\\n                result |= uint256(uint8(strBytes[i])) << (i * 8);\\n            }\\n            // zeros are handled implicitly\\n        }\\n\\n        return result % FIELD_MODULUS;\\n    }\\n\\n    // Main Hashing Functions\\n    /// @notice Computes Poseidon hash of input array\\n    /// @dev Main hashing function without prefix\\n    /// @param input Array of field elements to hash\\n    /// @return uint256 Resulting hash\\n    function poseidonHash(\\n        uint256[] memory input\\n    ) public view returns (uint256) {\\n        uint256[3] memory state = initialState();\\n        state = update(state, input);\\n\\n        return state[0];\\n    }\\n\\n    /// @notice Computes Poseidon hash with prefix\\n    /// @dev Hashes prefix followed by input array\\n    /// @param prefix String prefix to prepend\\n    /// @param input Array of field elements to hash\\n    /// @return uint256 Resulting hash\\n    function poseidonHashWithPrefix(\\n        string memory prefix,\\n        uint256[] memory input\\n    ) public view returns (uint256) {\\n        uint256[3] memory state = initialState();\\n\\n        uint256[] memory prefixArray = new uint256[](1);\\n        prefixArray[0] = prefixToField(prefix);\\n        state = update(state, prefixArray);\\n        state = update(state, input);\\n\\n        return state[0];\\n    }\\n\\n    /// @notice Hashes message fields with public key and signature data\\n    /// @dev Implements message hashing as specified in the signing scheme\\n    /// @param fields Array of message fields\\n    /// @param publicKey Public key point\\n    /// @param r X-coordinate of signature point\\n    /// @param prefix Network-specific prefix\\n    /// @return uint256 Resulting message hash\\n    function hashMessage(\\n        uint256[] memory fields,\\n        Point memory publicKey,\\n        uint256 r,\\n        string memory prefix\\n    ) public view returns (uint256) {\\n        // Pre-allocate array and copy fields\\n        uint256[] memory fullInput = new uint256[](fields.length + 3);\\n\\n        assembly {\\n            let length := mload(fields)\\n            let srcPtr := add(fields, 0x20)\\n            let destPtr := add(fullInput, 0x20)\\n            // Copy fields array\\n            for {\\n                let i := 0\\n            } lt(i, length) {\\n                i := add(i, 1)\\n            } {\\n                mstore(\\n                    add(destPtr, mul(i, 0x20)),\\n                    mload(add(srcPtr, mul(i, 0x20)))\\n                )\\n            }\\n            // Append public key and signature\\n            mstore(add(destPtr, mul(length, 0x20)), mload(publicKey))\\n            mstore(\\n                add(destPtr, mul(add(length, 1), 0x20)),\\n                mload(add(publicKey, 0x20))\\n            )\\n            mstore(add(destPtr, mul(add(length, 2), 0x20)), r)\\n        }\\n\\n        // Use cached prefix value\\n        uint256[3] memory state = initialState();\\n        uint256[] memory prefixArray = new uint256[](1);\\n        prefixArray[0] = keccak256(bytes(prefix)) ==\\n            keccak256(bytes(\\\"MinaSignatureMainnet\\\"))\\n            ? MINA_PREFIX_FIELD\\n            : CODA_PREFIX_FIELD;\\n\\n        state = update(state, prefixArray);\\n        state = update(state, fullInput);\\n\\n        return state[0];\\n    }\\n}\\n\",\"keccak256\":\"0xfffaa1bf8ec9296f3b567e1641c2bc500ecf7eff26027fa8ab9e5fbbd4fe4599\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6040608081523462001d34576200001562001d39565b6200001f62001d39565b907f1a9bd250757e29ef4959b9bef59b4e60e20a56307d6491e7b7ea1fac679c790382526020917f384aa09faf3a48737e2d64f6a030aa242e6d5d455ae4a13696b48a7320c506cd838201527f3d2b7b0209bc3080064d5ce4a7a03653f8346506bfa6d076061217be9e6cfed58482015281526200009c62001d39565b7f09ee57c70bc351220b107983afcfabbea79868a4a8a5913e24b7aaf3b4bf3a4281527f20989996bc29a96d17684d3ad4c859813115267f35225d7e1e9a5b5436a2458f838201527f14e39adb2e171ae232116419ee7f26d9191edde8a5632298347cdb74c3b2e69d84820152828201526200011762001d39565b7f174544357b687f65a9590c1df621818b5452d5d441597a94357f112316ef67cb81527f3ca9263dc1a19d17cfbf15b0166bb25f95dffc53212db207fcee35f02c2c4137838201527f3cf1fbef75d4ab63b7a812f80b7b0373b2dc21d269ba7c4c4d6581d50aae114c848201528382015260009081905b60039081831015620001d257908482519260005b838110620001bc575060019350019301910190916200018e565b84518782015591909301928691600101620001a2565b8551869086906106e081016001600160401b0381118282101762001d1e578352620001fc62001d39565b7f2ec559cd1a1f2f6889fc8ae5f07757f202b364429677c8ff6603fd6d93659b4781527f2553b08c788551bfe064d91c17eb1edb8662283229757711b2b30895f0aa3bad838201527f25a706fb0f35b260b6f28d61e082d36a8f161be1f4d9416371a7b65f2bfafe4e8482015281526200027562001d39565b7f37c0281fda664cc2448d0e7dd77aaa04752250817a945abeea8cfaaf3ee39ba081527f140488321291998b8582eaceeb3fa9ca3980eb64a453573c5aaa2910405936b6838201527f3a73fe35b1bdd66b809aad5eab47b5c83b0146fd7fc632dfb49cd91ae11693788482015282820152620002f062001d39565b7f21b7c2b35fd7710b06245711f26c0635d3e21de4db10dd3a7369f59f468d7be681527f1803a068d25fef2ef652c8a4847aa18a29d1885e7bf77fd6a34d66536d09cad7838201527f291de61c5e6268213772cf7e03c80c2e833eb77c58c46548d158a70fbbd9724b84820152838201526200036b62001d39565b7f230043a0dc2dfab63607cbe1b9c482fdd937fdefecc6905aa5012e89babead1381527f218af77a05c502d3fa3144efcf47a0f2a0292498c10c6e2368565674e78764f4838201527f223e2d94c177d27e071d55729d13a9b216955c7102cc9a95ea40058efb506117848201526060820152620003e762001d39565b7f2a18257c15ad9b6fe8b7c5ad2129394e902c3c3802e738f24ce2f585ae5f6a3881527f0a6f7ba75f216403d2e4940469d199474a65aa5ef814e36400bddef06158dcf8838201527f169be41c6227956efef5b4cdde65d00d5e04fe766178bdc731615c6e5b93e31e8482015260808201526200046362001d39565b7f2e28f50a9a55d2e91774083072734544417e290a1cfebc01801b94d0728fe66381527f0fdedf8da8654a22831040cfc74432464b173ee68628fd90498480b9902f2819838201527f046a3ed9863d2d739dd8bc9e90a746fda1197162d0a0bec3db1f2f6042cf04e28482015260a0820152620004df62001d39565b7f219e08b460c305b428670bacab86ac1e9458075778d35c3619ae7ba1f9b2ed7681527f38bb36a12ebcec4d4e8728eb43e3f12a6e33b1ffa1463379018d4e12424e62ca838201527f1e9aa3fe25d116ccfbd6a8fccdae0aa9bc164a03ab7e951704ee9a715fbedee68482015260c08201526200055b62001d39565b7f030f33ed70da4c2bfb844ff1a7558b817d1ec300da86a1694f2db45047d5f18b81527f0282b04137350495ab417cf2c47389bf681c39f6c22d9e370b7af75cbcbe4bb1838201527f09b1528dea2eb5bd96905b88ff05fdf3e0f220fe1d93d1b54953ac98fec825f08482015260e0820152620005d762001d39565b7f30083dbbb5eab39311c7a8bfd5e55567fa864b3468b5f9200e529cda03d9ef7181527f017eace73cf67c6112239cbf51dec0e714ee4e5a91dbc9209dc17bbea5bcd094838201527f37af1de8f5475ba165b90f8d568683d54e215df97e9287943370cf4118428097848201526101008201526200065462001d39565b7f16ff7592836a45340ec6f2b0f122736d03f0bcb84012f922a4baa73ea0e66f5181527f1a5985d4b359d03de60b2edabb1853f476915febc0e40f83a2d1d0084efc3fd9838201527f255a9d4beb9b5ea18ab9782b1abb267fc5b773b98ab655fd4d469698e1e1f97584820152610120820152620006d162001d39565b7f34a8d9f45200a9ac28021712be81e905967bac580a0b9ee57bc4231f5ecb936a81527f0979556cb3edcbe4f33edd2094f1443b4b4ec6c457b0425b8463e788b9a2dcda838201527f2a4d028c09ad39c30666b78b45cfadd5279f6239379c689a727f626679272654848201526101408201526200074e62001d39565b7f0c31b68f6850b3bd71fe4e89984e2c87415523fb54f24ec8ae71430370154b3381527f1a27ca0b953d3dba6b8e01cf07d76c611a211d139f2dff5ac023ed2454f2ed90838201527f109ae97c25d60242b86d7169196d2212f268b952dfd95a3937916b990530318084820152610160820152620007cb62001d39565b7f3698c932f2a16f7bb9abac089ec2de79c9965881708878683caf53caa83ad9c481527f3c7e25e0ac8fba3dc1360f8a9a9fa0be0e031c8c76a93497b7cac7ed32ade6c0838201527f2fc5023c5e4aed5aa7dfca0f5492f1b6efab3099360ec960237512f48c858a79848201526101808201526200084862001d39565b7f2c124735f3f924546fb4fdfa2a018e03f53063d3a2e87fd285ba8d647eda676581527f12c875c9b79591acf9033f8b6c1e357126c44b23f3486fbee0d98340a3382251838201527f3cda935e895857d39a7db8476aeda5a5131cb165a353073fd3e473fd8855528d848201526101a0820152620008c562001d39565b7f218eb756fa5f1df9f1eb922ef80b0852588779a7368e3d010def1512815d875981527f23bcf1032957015ef171fbb4329bca0c57d59885522f25f4b082a3cf301cfbc6838201527f17474c3b6a9bc1057df64b9e4d62badbc7f3867b3dd757c71c1f656205d7bceb848201526101c08201526200094262001d39565b7f019826c0ee22972deb41745d3bd412c2ae3d4c18535f4b60c9e870edffa3d55081527f30bcb17dfd622c46f3275f698319b68d8816bed0368ded435ed61992bc43efa9838201527f3bd816c214c66410229cfbd1f4a3a42e6a0f82f3c0d49b09bc7b4c042ff2c94b848201526101e0820152620009bf62001d39565b7f08943ec01d9fb9f43c840757738979b146c3b6d1982280e92a52e8d045633ea181527f2670bf8c01822e31c70976269d89ed58bc79ad2f9d1e3145df890bf898b57e47838201527f0dd53b41599ae78dbd3e689b65ebcca493effa94ed765eeec75a0d3bb20407f98482015261020082015262000a3c62001d39565b7f068177d293585e0b8c8e76a8a565c8689a1d88e6a9afa79220bb0a2253f203c381527f35216f471043866edc324ad8d8cf0cc792fe7a10bf874b1eeac67b451d6b2cf5838201527f1fd6efb2536bfe11ec3736e7f7448c01eb2a5a9041bbf84631cc83ee0464f6af8482015261022082015262000ab962001d39565b7f2c982c7352102289fc1b48dafcd9e3cc364d5a4324575e4721daf0af10033c6781527f352f7e8c7662d86db9c722d4d07778858771b832af5bb5dc3b13cf94851c1b45838201527f18e3c0c1caa5e3ed66ee1ab6f55a5c8063d8c9b034ae47db43435147149e37d58482015261024082015262000b3662001d39565b7f3124b12deb37dcbb3d96c1a08d507523e30e03e0919559bf2daaab238422eade81527f143bf0def31437eb21095200d2d406e6e5727833683d9740b9bfc1713215dc9a838201527f1ebee92143f32b4f9d9a90ad62b8483c977480767b53c71f6bde934a8ef38f178482015261026082015262000bb362001d39565b7f0ff6c794ad1afaa494088d5f8ee6c47bf9e83013478628cf9f41f2e81383ebeb81527f3d0a10ac3ee707c62e8bdf2cdb49ac2cf4096cf41a7f214fdd1f8f9a24804f17838201527f1d61014cd3ef0d87d037c56bdfa370a73352b95d472ead1937bed06a31801c918482015261028082015262000c3062001d39565b7f123e185b2ec7f072507ac1e4e743589bb25c8fdb468e329e7de169875f90c52581527f30b780c0c1cb0609623732824c75017da9799bdc7e08b527bae7f409ebdbecf2838201527f1dfb3801b7ae4e209f68195612965c6e37a2ed5cf1eeee3d46edf655d6f5afef848201526102a082015262000cad62001d39565b7f2fdee42805b2774064e963c741552556019a9611928dda728b78311e1f04952881527f31b2b65c431212ed36fdda5358d90cd9cb51c9f493bff71cdc75654547e4a22b838201527f1e3ca033d8413b688db7a543e62ac2e69644c0614801379cfe62fa220319e0ef848201526102c082015262000d2a62001d39565b7f0c8ef1168425028c52a32d93f9313153e52e9cf15e5ec2b4ca09d01730dad43281527f378c73373a36a5ed94a34f75e5de7a7a6187ea301380ecfb6f1a22cf8552638e838201527f3218aeec20048a564015e8f221657fbe489ba404d7f5f15b829c7a75a85c2f44848201526102e082015262000da762001d39565b7f3312ef7cbbad31430f20f30931b070379c77119c1825c6560cd2c82cf767794e81527f356449a71383674c607fa31ded8c0c0d2d20fb45c36698d258cecd982dba478c838201527f0cc88d1c91481d5321174e55b49b2485682c87fac2adb332167a20bcb57db3598482015261030082015262000e2462001d39565b7f1defccbd33740803ad284bc48ab959f349b94e18d773c6c0c58a4b9390cc300f81527f2d263cc2e9af126d768d9e1d2bf2cbf32063be831cb1548ffd716bc3ee7034fe838201527f111e314db6fb1a28e241028ce3d347c52558a33b6b11285a97fffa1b479e969d8482015261032082015262000ea162001d39565b7f027409401e92001d434cba2868e9e371703199c2372d23ef329e537b513f453e81527f24a852bdf9cb2a8fedd5e85a59867d4916b8a57bdd5f84e1047d410770ffffa0838201527f205d1b0ee359f621845ac64ff7e383a3eb81e03d2a2966557746d21b47329d6e8482015261034082015262000f1e62001d39565b7f25c327e2cc93ec6f0f23b5e41c931bfbbe4c12da7d55a2b1c91c79db982df90381527f39df3e22d22b09b4265da50ef175909ce79e8f0b9599dff01cf80e70884982b9838201527f09b08d58853d8ac908c5b14e5eb8611b45f40faaa59cb8dff98fb30efcdfaa018482015261036082015262000f9b62001d39565b7f1ece62374d79e717db4a68f9cddaaf52f8884f397375c0f3c5c1dbaa9c57a0a681527f3bd089b727a0ee08e263fa5e35b618db87d7bcce03441475e3fd49639b9fa1c1838201527f3fedea75f37ad9cfc94c95141bfb4719ee9b32b874b93dcfc0cc12f51a7b2aff848201526103808201526200101862001d39565b7f36dfa18a9ba1b194228494a8acaf0668cb43aca9d4e0a251b20ec3424d0e65cd81527f119e98db3f49cd7fcb3b0632567d9ccaa5498b0d411a1437f57c658f41931d0c838201527f1100b21c306475d816b3efcd75c3ae135c54ad3cc56ca22abd9b7f45e6d02c19848201526103a08201526200109562001d39565b7f15791f9bbea213937208c82794eb667f157f003c65b64aa9800f4bbee4ea511981527f1adbeb5e9c4d515ecfd250ebee56a2a816eb3e3dc8d5d440c1ab4285b350be64838201527f1fbf4738844a9a249aec253e8e4260e4ab09e26bea29ab0020bf0e813ceecbc3848201526103c08201526200111262001d39565b7f3418a929556ec51a086459bb9e63a821d407388cce83949b9af3e3b0434eaf0e81527f09406b5c3af0290f997405d0c51be69544afb240d48eeab1736cda0432e8ff9e838201527f23ece5d70b38ccc9d43cd923e5e3e2f62d1d873c9141ef01f89b6de1336f5bc7848201526103e08201526200118f62001d39565b7f1852d574e46d370a0b1e64f6c41eeb8d40cf96c524a62965661f2ef87e67234d81527f0a657027cce8d4f238ea896dde273b7537b508674a366c66b3789d9828b0ce90838201527f3482f98a46ec358108fbbb68fd94f8f2baa73c723baf21922a850e45511f5a2d848201526104008201526200120c62001d39565b7f3f62f164f8c905b335a6cbf76131d2430237e17ad6abc76d2a6329c1ec5463ee81527f07e397f503f9c1cea028465b2950ea444b15c5eab567d5a69ea2925685694df0838201527f0405f1fc711872373d6eb50a09fbfb05b2703ae0a0b4edb86aedb216db17a876848201526104208201526200128962001d39565b7f0be0848eb3e09c7027110ad842c502441c97afa14a844406fcfec754a25658c181527f26b78788fd98ac020bac92d0e7792bb5ffed06b697d847f61d984f905d9ba870838201527f38fd5318d39055c82fef9bdd33315a541c0ec4363e6cc0687005871355dfa573848201526104408201526200130662001d39565b7f380bd03b840c48c8ba3830e7cace72f91a5002218c617294e8c8bc687d5216de81527f2c6e57ddc1d7c81a0299ed49c3d74759416bc8426f30e2af5622895c531b4e1c838201527f11d3a81b262fc76ef506ee6d88e5991d0de8cb9dd162d97c58b175e3bc4584f3848201526104608201526200138362001d39565b7f09b6b283ebaf45fbb1e448969ace9be62adf67ddf58614925741deb6a1ba7def81527f15d5095164c885763fa83cdf776d436382821a17bc5563a5b6f6dfcdac504ade838201527f3427fdbfca3cea23063eb138c5055c6cad9c4252b23d12c12293308eff7d9124848201526104808201526200140062001d39565b7f272f12e731077b74317ef2543c33b86194db1da5f6a7e1eee0656672c81685fe81527f05323f85deb8c07c193c37a73d76f6114967913a2bdce11995f183e769f42967838201527f3d5ce415ecae4ba42b417ea3a501b44694f46efddff2fcca952b097f3852d3d8848201526104a08201526200147d62001d39565b7f0e8ec18c7b52c514d42047f1f0b2a90cb8c0c7391cf9479cd7fd5bfe1d3db8f281527f01591c865ea7065d54304519f8bb268bddbeaf3afae54edcd01a833ed0a9ef1a838201527f3eddbeeee5eca5deee4bf1789c435e1241e0d71186d8f0f62d74729dfc3119fb848201526104c0820152620014fa62001d39565b7f23691c7009b9283b268766e8d491716d3c1993e6ecf458def8f762af3e35570781527f26cdab2c837ebeac5bea4be1d6f0488034907374d81a61a34f1c4db397d4c09b838201527f2d2206730664d58be0676dad1fee0e990c264a7410a2cdb6b55653c1df72ef56848201526104e08201526200157762001d39565b7f2bb74bb185372334a4ef5f6d18e2ece54086e62b04985dd794b7117b0be9217f81527f366250fe928c45d8d5aa35f0a142754907ff3c598410199b589b28cd851b2204838201527f1868f8118482c6b4a5a61a81c8aaca128953179c20f73a44022d9976bdc34af184820152610500820152620015f462001d39565b7f0b7901c670e1d75d726eb88d000950b3c963f0f7a6ca24994bdc07ae2f78b4d381527f032c4bd8ab70e1f25af77af57dd340c8e6c8a101dfc5e8dd03314566db90b870838201527f1ce36db31fe6ea3cd9308db9aa43a8af5c41a8f0a6509bfe00f0e7b486c0ab8a848201526105208201526200167162001d39565b7f26596ea9e1915e53da3479e9d13c3c920505e2449e325810ff6ca855fe4b7c6e81527f30f296a269868a7fca8f5b1e269c0116304df31729559a270e713509d3a6d5dc838201527f02588961eff7897d87eb6ac72350ef9f52640647cbd23136919a994dfd1979d584820152610540820152620016ee62001d39565b7f16a49e69721e80690d41e06229e9bc2dbaf9a2abf4b89388db2485595409d62b81527f3d7aca02c051fcad8073cfd67210cd423a31888afc4a444d9d3adf3d6c5da7bf838201527f299bd48a740b7790075268312ab8072c72421de5a6437fa5e25431ef951847b4848201526105608201526200176b62001d39565b7f11a69b867d9ea22ec1b2f28e96617129e36eefaea9e8126bdc6a42b99072902b81527f25bc1af391f3c1f2284a95da92b5883d1b3a40794b2358b2e7a70fca22da64ce838201527f361ab3843f4d8ddadede39d82bb1a8109f89b6d9aa117b8f365de43895de0baa84820152610580820152620017e862001d39565b7f38ef3ab5b61c117a3465a017a9c8ba4c227659b41fdf145206d5c960f49dd45b81527f3992f83f26143dbdbd335604a1a14daf238ae43c249783f694feaf560aaae20f838201527f350287977eb71c81b10ecd039aad99cfa9ed84a04301cb30869e1dc7fa1dc638848201526105a08201526200186562001d39565b7f3afb5bc126020586dcccba32dd054cd9a3f3b834ca9678d6802c48b1da97d6ed81527f172b7c2d8e7e4b06d183a2575b790749d0970c54966407fa8f59072c729de671838201527f2eb53fe3a278688a70494569e54a0f0d269935aec6c897bef4d368c1f67d57e4848201526105c0820152620018e262001d39565b7f0375ae56b8d9310d553ed77d406dedc3f0393e5a321b71caee6a5bb7078b503581527f1d49a0d53bc2993cbf1fb5d1da9bb76fe46a7031d5e5d43fadbf54bc17c1ef38838201527f132d17b87cab6d707ddfa1f01df1724ad37957e989c44f1ff71426367f953160848201526105e08201526200195f62001d39565b7f062da5280948d8c6c4acc7e6a1aa421f0f9ec179a44146750060be4be6755f8581527f0a4b4d5cde54a974ea4e57ee4132d2ab2510c300f21930d6bbbf211d1add80f9838201527f3356f1fbeac493ccab752b70bbed821ce49965c19284d7aacd78fbf3ff864e9184820152610600820152620019dc62001d39565b7f042721e8a9cc32557851feb0e0190c5dfbf4cb1b8f47d37e7e653ec6ff8a405981527f053d9b2633fff31ca4fc5724ce6b4422318128cdf01897d321e86f47cdf748b1838201527f267d96caeafde5dbd3db1f0668b09ccd532a22f0205494716a786219fb4c801c8482015261062082015262001a5962001d39565b7f39316997737610193c3f9ffcfd4e23d38aac12cd7b95b8d256d774101650a6ca81527f191e377462986563fdabf9b23529f7c84c6b200b9101b3a5096bca5f377981fb838201527f20f89af9722f79c860d2059a0ec209cf3a7925ad0798cab655eca62fe73ff3d98482015261064082015262001ad662001d39565b7f1ca568aeddb2ef391a7c78ecf104d32d785b9ca145d97e35879df3534a7d1e0b81527f25de9ba0a37472c3b4c0b9c3bc25cbbf78d91881b6f94ee70e4abf090211251c838201527f3393debd38d311881c7583bee07e605ef0e55c62f0508ccc2d26518cd568e1ef8482015261066082015262001b5362001d39565b7f038df2fd18a8d7563806aa9d994a611f642d5c397388d1dd3e78bc7a4515c5b181527f05c6503ff1ee548f2435ad9148d7fb94c9222b0908f445537a6667047f6d501c838201527f104c88d6d0682d82d3d664826dc9565db101a220aa8f90572eb798468a82a2ab8482015261068082015262001bd062001d39565b7f2caad6108c09ee6aee7851b4a2d2d3b7c3ca3c56a80003c8471f90bfa4ac628b81527f0a57dbd4c327826c8a97bc7285f94bcddb966177346f1792c4bd7088aa0353f3838201527f3c15552f9124318b8433d01bb53ba04ba1cc9eb91d83b918e32fea39fbe908fa848201526106a082015262001c4d62001d39565b7f0e10c10cbbe1717a9441c6299c4fc087c222208bd4fa8f3be66d2075f623b51381527f1e8b254cbff2c92a83dff1728c81dd22a9570f590e497cb2d640042cb879a930838201527f1812dbcd70c440610057bbfdd0cc4d31d1faf5786419b53841c4adc43f2b2352848201526106c0820152906009916000905b6037821062001ce55784600060ae5551613b33908162001d5a8239f35b82815160005b6003811062001d095750506003906001920194019101909262001cc8565b81518782015585929091019060010162001ceb565b634e487b7160e01b600052604160045260246000fd5b600080fd5b60405190606082016001600160401b0381118382101762001d1e5760405256fe6080604052600436101561001257600080fd5b60003560e01c806302ca70c91461016f5780630b775a80146101e257806319c56fed146101dd5780632a58cd44146101d85780633360a782146101d35780633586dbb4146101ce5780633b652b16146101c95780634120ea2c146101c4578063440fb8f5146101bf57806344d96745146101ba5780634f76a98e146101b557806355c0b20b146101b0578063719f7df0146101ab578063751833d9146101a657806383ef9d02146101a1578063863f0cd31461019c578063904902cd1461019757806398a31e2414610192578063ab31831b1461018d578063c307df5b14610188578063c77cf1d714610183578063ca426b761461017e578063d967882414610179578063e7c072f514610174578063eb383cc11461016f578063eee470831461016a578063f0ffe56d14610165578063f5dcae26146101605763f73571751461015b57600080fd5b611be5565b611bab565b611a8c565b6118b5565b610261565b61187b565b611792565b611737565b6116fd565b611649565b6114fe565b611385565b611313565b6111e5565b611065565b61100f565b610f12565b610eb2565b610e59565b610cc9565b610b94565b610ae0565b610a5f565b610907565b6107fc565b610792565b6106bc565b6105bb565b60005b8381106101fa5750506000910152565b81810151838201526020016101ea565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610246815180928187528780880191016101e7565b0116010190565b90602061025e92818152019061020a565b90565b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560005260b16020526102bf6102ab604060002061042c565b60405191829160208352602083019061020a565b0390f35b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761031357604052565b6102c8565b6101a0810190811067ffffffffffffffff82111761031357604052565b6060810190811067ffffffffffffffff82111761031357604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761031357604052565b6040519061039f826102f7565b565b6040519061039f82610318565b6040519061039f82610335565b906040516103c8816102f7565b602060018294805484520154910152565b90600182811c92168015610422575b60208310146103f357565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916103e8565b9060405191826000825492610440846103d9565b9081845260019485811690816000146104ad575060011461046a575b505061039f92500383610351565b9093915060005260209081600020936000915b81831061049557505061039f9350820101388061045c565b8554888401850152948501948794509183019161047d565b905061039f9550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b820101388061045c565b9995610553906105416105819761025e9f9e9b958e60ff6105a99f9a61056d9a6105959f9994608095151585521515602085015215156040840152166060820152019060208091805184520151910152565b805160c08d01526020015160e08c0152565b6101008a015280516101208a015260200151610140890152565b805161016088015260200151610180870152565b80516101a0860152602001516101c0850152565b80516101e084015260200151610200830152565b6102409081610220820152019061020a565b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560005260b0602052604060002080546102bf61060b600184016103bb565b92610618600382016103bb565b90600581015461062a600683016103bb565b610636600884016103bb565b90610643600a85016103bb565b9261065c600e610655600c88016103bb565b960161042c565b95604051998960ff8c9b60181c169060ff8160101c169060ff808260081c1691168d6104ef565b60405190610690826102f7565b601482527f436f64615369676e61747572652a2a2a2a2a2a2a0000000000000000000000006020830152565b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c3576102bf6102ab610683565b67ffffffffffffffff81116103135760051b60200190565b81601f820112156102c357803591610725836106f6565b926107336040519485610351565b808452602092838086019260051b8201019283116102c3578301905b82821061075d575050505090565b8135815290830190830161074f565b906020828203126102c357813567ffffffffffffffff81116102c35761025e920161070e565b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043567ffffffffffffffff81116102c3576107f36107e6602092369060040161070e565b6107ee613697565b6136e5565b51604051908152f35b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560ae548110156102c35760005260b06020526040600020600260ff825460181c16036108dd576108db906108ad61089b610866610392565b600181527f1b74b5a30a12937c53dfa9f06378ee548f655bd4333d477119cf7a23caed2abb6020820152600484015490613610565b80516008840155602001516009830155565b63030000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff825416179055565b005b60046040517fe8c31343000000000000000000000000000000000000000000000000000000008152fd5b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760206040517f1b74b5a30a12937c53dfa9f06378ee548f655bd4333d477119cf7a23caed2abb8152f35b90815180825260208080930193019160005b828110610980575050505090565b835185529381019392810192600101610972565b9061025e91602081526109ad60208201835160ff169052565b602082015160408201526109ca6040830151606083019015159052565b6060820151151560808201526080820151805160a08301526020015160c082015260a0820151805160e08301526020015161010082015260c082015161012082015260e082015190610100610a2e610160938461014085015261018084019061020a565b930151917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082850301910152610960565b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35767ffffffffffffffff6004358181116102c357366023820112156102c35780600401359182116102c35736602483830101116102c3576102bf916024610ad4920161200c565b60405191829182610994565b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c357602060405160058152f35b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60409101126102c357600490565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc60409101126102c357604490565b60a4359081151582036102c357565b359081151582036102c357565b346102c35760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c357610bcc36610b1a565b610bd536610b49565b60843567ffffffffffffffff8082116102c357366023830112156102c35781600401359081116102c3573660248260051b840101116102c3576102bf93610c28936024610c20610b78565b9401916122aa565b6040519081529081906020820190565b81601f820112156102c35780359067ffffffffffffffff82116103135760405192610c8b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160185610351565b828452602083830101116102c357816000926020809301838601378301015290565b929190610cc4602091604086526040860190610960565b930152565b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043567ffffffffffffffff81116102c357610d18903690600401610c38565b608080825111610dd557610d2a612721565b91600091825b8251811015610d975780610d82610d7c610d76610d50610d9295886127b8565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b60ff1690565b610d8c82886127d6565b526121dd565b610d30565b509190515b828110610dc15783610db0816107ee613697565b51906102bf60405192839283610cad565b8082610d8c610dd093876127d6565b610d9c565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f43697263756974537472696e672e66726f6d537472696e673a20696e7075742060448201527f737472696e672065786365656473206d6178206c656e677468210000000000006064820152fd5b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760206040517f40000000000000000000000000000000224698fc094cf91b992d30ed000000018152f35b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560005260af602052602073ffffffffffffffffffffffffffffffffffffffff60406000205416604051908152f35b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c3576000600435815260af60205273ffffffffffffffffffffffffffffffffffffffff604082205416330361100c5760b0602052611009600f60408320838155610f926001820160016000918281550155565b610fa56003820160016000918281550155565b836005820155610fbe6006820160016000918281550155565b610fd16008820160016000918281550155565b610fe4600a820160016000918281550155565b610ff7600c820160016000918281550155565b611003600e8201611d0a565b01611d53565b80f35b80fd5b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760206040517c40000000000000000000000000224698fc0994a8dd8c46eb21000000018152f35b346102c35760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35767ffffffffffffffff6004358181116102c3576110b5903690600401610c38565b906024359081116102c3576110ce90369060040161070e565b6110d6613697565b6110de61274f565b906020808551101561118757600090815b818110611145576102bf611134876107ee88887f40000000000000000000000000000000224698fc094cf91b992d30ed00000001890661112e836127c9565b526136e5565b516040519081529081906020820190565b8651811061115c575b611157906121dd565b6110ef565b9161115790611174610d7c610d76610d50878c6127b8565b61117d85611cef565b1b1792905061114e565b606490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152600f60248201527f70726566697820746f6f206c6f6e6700000000000000000000000000000000006044820152fd5b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560ae548110156102c3576112359060005260b0602052604060002090565b805460ff8160181c166108dd5760ff16156112b4578061128161125d600f6108db9401611d90565b611269600184016103bb565b60038401549061127b600e860161042c565b92613a20565b600582015563010000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff825416179055565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420696e697469616c697a656400000000000000000000000000000000006044820152606490fd5b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c357602060ae54604051908152f35b359060ff821682036102c357565b91908260409103126102c357604051611375816102f7565b6020808294803584520135910152565b346102c3577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6040813601126102c35760043567ffffffffffffffff918282116102c3576102609082360301126102c3576113de6103a1565b6113ea82600401610b87565b81526113f860248301610b87565b602082015261140960448301610b87565b604082015261141a6064830161134f565b606082015261142c366084840161135d565b608082015261143e3660c4840161135d565b60a082015261010482013560c082015261145c36610124840161135d565b60e082015261146f36610164840161135d565b610100820152611483366101a4840161135d565b610120820152611497366101e4840161135d565b6101408201526102248201358381116102c3576114ba9060043691850101610c38565b6101608201526102448201359283116102c3576114e36114f29260046102bf953692010161070e565b61018082015260243590612610565b6040519182918261024d565b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560ae548110156102c35761154e8160005260b0602052604060002090565b90600560ff611562845460ff9060181c1690565b16036108dd578161161d611627926115c6611582600c6102bf97016103bb565b60038501548151149081611639575b5084547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff1690151560101b62ff000016178455565b82547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff1663060000001783556116186116078261160286611ddf565b612610565b9160005260b1602052604060002090565b6124c0565b5460101c60ff1690565b60405190151581529081906020820190565b6001915060200151161538611591565b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560ae548110156102c35760005260b06020526040600020600360ff825460181c16036108dd578060206116c16116b660066108db95016103bb565b600584015490613610565b8051600a8401550151600b82015563040000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff825416179055565b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c357602060405160018152f35b346102c35760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c3576020611788604051611777816102f7565b60043581526024358382015261217c565b6040519015158152f35b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560ae548110156102c35760005260b06020526040600020600460ff6117ee835460ff9060181c1690565b16036108dd578061184d61183b61180a60086108db95016103bb565b611816600a85016103bb565b9061182660208351930151612458565b61182e610392565b9283526020830152612b50565b8051600c84015560200151600d830155565b63050000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff825416179055565b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c357602060405160808152f35b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560ae548110156102c35760005260b06020526040600020600160ff825460181c16036108dd578061195461194260016108db94015461193d60018060028701541614611931610392565b92835215156020830152565b6127ea565b80516006840155602001516007830155565b63020000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff825416179055565b9061025e916020815261199a60208201835115159052565b602082015115156040820152604082015115156060820152606082015160ff1660808201526080820151805160a08301526020015160c082015260a0820151805160e08301526020015161010082015260c0820151906101209182820152611a6c60e0840151611a1a610140918285019060208091805184520151910152565b611a5561010086015194611a3e610180968787019060208091805184520151910152565b86015180516101c0860152602001516101e0850152565b840151805161020084015260200151610220830152565b61016083015191610a2e610260938461024085015261028084019061020a565b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c3576060610180604051611acc81610318565b600081526000602082015260006040820152600083820152611aec611d77565b6080820152611af9611d77565b60a0820152600060c0820152611b0d611d77565b60e0820152611b1a611d77565b610100820152611b28611d77565b610120820152611b36611d77565b6101408201528261016082015201526102bf611b66611b6160043560005260b0602052604060002090565b611ddf565b60405191829182611982565b60405190611b7f826102f7565b601482527f4d696e615369676e61747572654d61696e6e65740000000000000000000000006020830152565b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c3576102bf6102ab611b72565b346102c35760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35767ffffffffffffffff6004358181116102c357611c3590369060040161070e565b9060407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc3601126102c357604051611c6c816102f7565b602435815260443560208201526084359182116102c357602092611c97611ca1933690600401610c38565b9160643591613a20565b604051908152f35b818110611cb4575050565b60008155600101611ca9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b908160031b9180830460081490151715611d0557565b611cc0565b611d1481546103d9565b9081611d1e575050565b81601f60009311600114611d30575055565b908083918252611d4f601f60208420940160051c840160018501611ca9565b5555565b80546000825580611d62575050565b61039f91600052602060002090810190611ca9565b60405190611d84826102f7565b60006020838281520152565b9060405191828154918282526020928383019160005283600020936000905b828210611dc55750505061039f92500383610351565b855484526001958601958895509381019390910190611daf565b90611eba600f611ded6103a1565b93611e2f60ff8254611e03828216899015159052565b600881901c821615156020890152601081901c82161515604089015260181c16606087019060ff169052565b611e3b600182016103bb565b6080860152611e4c600382016103bb565b60a0860152600581015460c0860152611e67600682016103bb565b60e0860152611e78600882016103bb565b610100860152611e8a600a82016103bb565b610120860152611e9c600c82016103bb565b610140860152611eae600e820161042c565b61016086015201611d90565b610180830152565b60405190610120820182811067ffffffffffffffff82111761031357604052606061010083600081526000602082015260006040820152600083820152611f07611d77565b6080820152611f14611d77565b60a0820152600060c08201528260e08201520152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9015611f625790565b611f2a565b9060211015611f625760210190565b9060221015611f625760220190565b906021116102c35760010190602090565b909291928360c3116102c35783116102c35760c301917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3d0190565b359060208110611fdf575090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060200360031b1b1690565b9061213c612144918061201d611ec2565b9461205e612057610d766120318585611f59565b357fff000000000000000000000000000000000000000000000000000000000000001690565b60ff168752565b61207161206b8383611f85565b90611fd1565b60208701526120b17fff000000000000000000000000000000000000000000000000000000000000006120a76120318585611f67565b1615156040880152565b6120f26120e96120c46120318585611f76565b7fff000000000000000000000000000000000000000000000000000000000000001690565b15156060880152565b608086016023820135815152602060438301359151015260a086016063820135815152602060838301359151015260a381013560c0870152612132610683565b60e0870152611f96565b81019061076c565b61010082015290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8051907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001908183108015906121cf575b6121c757600582602081930151948181800909089180091490565b505050600090565b5081602082015110156121ac565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611d055760010190565b9190601f811161221957505050565b61039f926000526020600020906020601f840160051c83019310612245575b601f0160051c0190611ca9565b9091508190612238565b61225981546103d9565b601f8111612288575b507f436f64615369676e61747572652a2a2a2a2a2a2a0000000000000000000000289055565b6122a49082600052601f6020600020910160051c810190611ca9565b38612262565b939290916122c06122bb368761135d565b61217c565b1561242e5761234e61ff009361233c60ae54976122dc896121dd565b60ae556122f38960005260b0602052604060002090565b9788547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff00006001998a93151560081b16911617178855868801906020600191803584550135910155565b80356003870155602001356004860155565b600f84019067ffffffffffffffff831161031357680100000000000000008311610313578154838355808410612410575b50906000526020806000209060005b8481106123ff57505050505050600e6123a7910161224f565b61025e336123bf8360005260af602052604060002090565b9073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b83358382015592810192850161238e565b61242890836000528460206000209182019101611ca9565b3861237f565b60046040517fa2d0fee8000000000000000000000000000000000000000000000000000000008152fd5b907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001918203918211611d0557565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201918211611d0557565b91908203918211611d0557565b919091825167ffffffffffffffff8111610313576124e8816124e284546103d9565b8461220a565b602080601f8311600114612541575081929394600092612536575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c1916179055565b015190503880612503565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe083169561257585600052602060002090565b926000905b8882106125d057505083600195969710612599575b505050811b019055565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c1916905538808061258f565b8060018596829496860151815501950193019061257a565b90602061025e928181520190610960565b9061260c602092828151948592016101e7565b0190565b602081810151604080840151608085015180519085015160a087015180519087015160c089015195517f0200000000000000000000000000000000000000000000000000000000000000818a0152602181019a909a5295151560f890811b60418b015293151590931b604289015260438801919091526063870152608386015260a385019190915260c38085019190915283527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0916126d060e385610351565b61018001516040518091838201906126e7916125e8565b0383810182526126f79082610351565b6040519384928301612708916125f9565b612711916125f9565b03908101825261025e9082610351565b60405190611020820182811067ffffffffffffffff8211176103135760405260808252611000366020840137565b6040519061275c826102f7565b6001825260203681840137565b90612773826106f6565b6127806040519182610351565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06127ae82946106f6565b0190602036910137565b908151811015611f62570160200190565b805115611f625760200190565b8051821015611f625760209160051b010190565b6127f2611d77565b508051907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001602061282c82600581878181800909086128ca565b920151151560018084161403612855575b506040519161284b836102f7565b8252602082015290565b908103908111611d05573861283d565b1561286c57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f53717561726520726f6f7420646f6573206e6f742065786973740000000000006044820152fd5b8015612a785760007f40000000000000000000000000000000224698fc094cf91b992d30ed000000005b600180821661290e571c90612908906121dd565b906128f4565b50909160025b7f40000000000000000000000000000000224698fc094cf91b992d30ed0000000061293e82612a7e565b146129515761294c906121dd565b612914565b8261295b91612af7565b9261296a600193841c83612af7565b906000947f40000000000000000000000000000000224698fc094cf91b992d30ed00000001808095850980979409905b8582036129aa5750505050505090565b856000979394959697918184905b612a36575b506129c9868410612865565b946000915b6129f8575b5050936129f357848080858009809309936000930995949391929061299a565b61214d565b86612a0e612a0985849995996124b3565b612486565b871015612a2d576129f357612a2788838b9409966121dd565b916129ce565b508195506129d3565b92909180889185141580612a6f575b15612a6657506129f357612a5d88848b9509916121dd565b929190826129b8565b929193506129bd565b50878310612a45565b50600090565b60405190602082526020808301526020604083015260608201527f2000000000000000000000000000000011234c7e04a67c8dcc9698768000000060808201527f40000000000000000000000000000000224698fc094cf91b992d30ed0000000160a082015260208160c08160055afa156102c3575190565b90604051916020835260208084015260206040840152606083015260808201527f40000000000000000000000000000000224698fc094cf91b992d30ed0000000160a082015260208160c08160055afa156102c3575190565b61025e91612b72612b6c612b7893612b66611d77565b50612b9c565b91612b9c565b90612d39565b612c05565b60405190612b8a82610335565b60006040838281528260208201520152565b612ba4612b7d565b5080511580612bf9575b612bd7576020815191015160405191612bc683610335565b825260208201526001604082015290565b50604051612be481610335565b60018152600160208201526000604082015290565b50602081015115612bae565b612c0d611d77565b5060408101805115612d1d57518015612cbf5760006001917f40000000000000000000000000000000224698fc094cf91b992d30ed0000000190805b612ca75750507f40000000000000000000000000000000224698fc094cf91b992d30ed000000018092508111612ca0575b81808280096020828287510995015192612c92610392565b958652099009602082015290565b8101612c7a565b80820484810290930393929091908202900380612c49565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f7420696e76657274203000000000000000000000000000000000006044820152fd5b5050604051612d2b816102f7565b600081526000602082015290565b90612d42612b7d565b5060408201519081156134fd5760408101519182156134f7577f40000000000000000000000000000000224698fc094cf91b992d30ed0000000180848009855109917f40000000000000000000000000000000224698fc094cf91b992d30ed000000018083800982510990602080870151910151957f40000000000000000000000000000000224698fc094cf91b992d30ed000000018581038408156133ec5750612deb6103ae565b957f40000000000000000000000000000000224698fc094cf91b992d30ed0000000185810384087f40000000000000000000000000000000224698fc094cf91b992d30ed000000018681038508907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910960047f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191097f40000000000000000000000000000000224698fc094cf91b992d30ed000000019086097f40000000000000000000000000000000224698fc094cf91b992d30ed0000000186810385087f40000000000000000000000000000000224698fc094cf91b992d30ed000000018781038608907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910960047f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191097f40000000000000000000000000000000224698fc094cf91b992d30ed000000018781038608907f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109927f40000000000000000000000000000000224698fc094cf91b992d30ed000000018880097f40000000000000000000000000000000224698fc094cf91b992d30ed000000019089097f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910991827f40000000000000000000000000000000224698fc094cf91b992d30ed0000000103907f40000000000000000000000000000000224698fc094cf91b992d30ed000000018780097f40000000000000000000000000000000224698fc094cf91b992d30ed000000019088097f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109907f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191087f40000000000000000000000000000000224698fc094cf91b992d30ed0000000190600209917f40000000000000000000000000000000224698fc094cf91b992d30ed00000001826002097f40000000000000000000000000000000224698fc094cf91b992d30ed000000019085087f40000000000000000000000000000000224698fc094cf91b992d30ed00000001037f40000000000000000000000000000000224698fc094cf91b992d30ed00000001848009907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910893848a527f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191097f40000000000000000000000000000000224698fc094cf91b992d30ed00000001906002097f40000000000000000000000000000000224698fc094cf91b992d30ed0000000103927f40000000000000000000000000000000224698fc094cf91b992d30ed00000001037f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191087f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910860208601527f40000000000000000000000000000000224698fc094cf91b992d30ed00000001848308927f40000000000000000000000000000000224698fc094cf91b992d30ed00000001037f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910892807f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910990807f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109907f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191087f40000000000000000000000000000000224698fc094cf91b992d30ed000000010390807f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109907f40000000000000000000000000000000224698fc094cf91b992d30ed000000019108907f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109604082015290565b947f40000000000000000000000000000000224698fc094cf91b992d30ed00000001809495508092935081800990099009917f40000000000000000000000000000000224698fc094cf91b992d30ed0000000180808480098409850983146134ea57507f40000000000000000000000000000000224698fc094cf91b992d30ed000000019283828181819509900990099008156134e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c696420706f696e74206164646974696f6e000000000000000000006044820152606490fd5b612be46103ae565b91505061025e9150613503565b50505090565b91505090565b61350b612b7d565b506040810180511561360c5760208201918251156135ad575191519051907f40000000000000000000000000000000224698fc094cf91b992d30ed000000019182918280868009818080808080888009818180099c0881808d8808810391800908600209926003098180808560020981038184800908938161358b6103ae565b9b868d5260080982039482039008900908602086015209600209604082015290565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f43616e6e6f7420646f75626c6520706f696e74207769746820793d30000000006044820152606490fd5b5090565b61361c90612b66611d77565b9060405161362981610335565b816001918281528260208201526000604082015293905b6136505750505061025e90612c05565b818084161461366d575b61366390613503565b91811c9182613640565b9261367b8461366392612d39565b93905061365a565b6040519061369082610335565b6060368337565b60606040516136a581610335565b3690376040516136b481610335565b60008152600060208201526000604082015290565b9060018201809211611d0557565b9060038201809211611d0557565b6136ed613683565b508151156137b5576000905b8251821080156137ae579061372291613777575b613716836136c9565b845111613734576137bb565b9060028101809111611d0557906136f9565b602081017f40000000000000000000000000000000224698fc094cf91b992d30ed00000001815161376d613767876136c9565b886127d6565b51900890526137bb565b7f40000000000000000000000000000000224698fc094cf91b992d30ed0000000181516137a485876127d6565b519008815261370d565b5091505090565b61025e91505b6137c3613683565b506000805b603781106137d557505090565b6137df835161387a565b83526020908184016137f1815161387a565b905261380d604094858101613806815161387a565b905261397d565b938480519361381b846138aa565b956129f357613875947f40000000000000000000000000000000224698fc094cf91b992d30ed0000000196879108825281018581516138598661392f565b900890520180519361386a83613956565b6000950890526121dd565b6137c8565b7f40000000000000000000000000000000224698fc094cf91b992d30ed0000000190818082818180090980090990565b603781108080613927575b156138c95715611f62576003026009015490565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f496e76616c696420726f756e6420636f6e7374616e7420696e646963657300006044820152fd5b5060016138b5565b60378110808061394e575b156138c95715611f6257600302600a015490565b50600161393a565b603781108080613975575b156138c95715611f6257600302600b015490565b506001613961565b90613986613683565b91600054907f40000000000000000000000000000000224698fc094cf91b992d30ed000000018080809484519009818080600154938160208901958651900990089581600254978160408401998a51900990088a528180806003548451900981600454885190099008816005548a519009900860208b01526006549051900991600754905190099008916008549051900990086040830152565b91939293613a36613a3184516136d7565b612769565b9280519060005b828110613ae357505091613ac59495916107ee936002835191602080958194828460051b8c0101520151836001830160051b8a0101520160051b86010152613a83613697565b90613a8c61274f565b9281815191012090613a9c611b72565b805191012003613ac9577374656e6e69614d65727574616e676953616e694d5b61112e836127c9565b5190565b732a2a2a2a2a2a2a65727574616e67695361646f43613abc565b8060019160051b6020808286010151918901015201613a3d56fea26469706673582212200047f095a85117bdc454241752066326707d185e26a04d67e96f9e36e63d611764736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806302ca70c91461016f5780630b775a80146101e257806319c56fed146101dd5780632a58cd44146101d85780633360a782146101d35780633586dbb4146101ce5780633b652b16146101c95780634120ea2c146101c4578063440fb8f5146101bf57806344d96745146101ba5780634f76a98e146101b557806355c0b20b146101b0578063719f7df0146101ab578063751833d9146101a657806383ef9d02146101a1578063863f0cd31461019c578063904902cd1461019757806398a31e2414610192578063ab31831b1461018d578063c307df5b14610188578063c77cf1d714610183578063ca426b761461017e578063d967882414610179578063e7c072f514610174578063eb383cc11461016f578063eee470831461016a578063f0ffe56d14610165578063f5dcae26146101605763f73571751461015b57600080fd5b611be5565b611bab565b611a8c565b6118b5565b610261565b61187b565b611792565b611737565b6116fd565b611649565b6114fe565b611385565b611313565b6111e5565b611065565b61100f565b610f12565b610eb2565b610e59565b610cc9565b610b94565b610ae0565b610a5f565b610907565b6107fc565b610792565b6106bc565b6105bb565b60005b8381106101fa5750506000910152565b81810151838201526020016101ea565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610246815180928187528780880191016101e7565b0116010190565b90602061025e92818152019061020a565b90565b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560005260b16020526102bf6102ab604060002061042c565b60405191829160208352602083019061020a565b0390f35b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761031357604052565b6102c8565b6101a0810190811067ffffffffffffffff82111761031357604052565b6060810190811067ffffffffffffffff82111761031357604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761031357604052565b6040519061039f826102f7565b565b6040519061039f82610318565b6040519061039f82610335565b906040516103c8816102f7565b602060018294805484520154910152565b90600182811c92168015610422575b60208310146103f357565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916103e8565b9060405191826000825492610440846103d9565b9081845260019485811690816000146104ad575060011461046a575b505061039f92500383610351565b9093915060005260209081600020936000915b81831061049557505061039f9350820101388061045c565b8554888401850152948501948794509183019161047d565b905061039f9550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b820101388061045c565b9995610553906105416105819761025e9f9e9b958e60ff6105a99f9a61056d9a6105959f9994608095151585521515602085015215156040840152166060820152019060208091805184520151910152565b805160c08d01526020015160e08c0152565b6101008a015280516101208a015260200151610140890152565b805161016088015260200151610180870152565b80516101a0860152602001516101c0850152565b80516101e084015260200151610200830152565b6102409081610220820152019061020a565b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560005260b0602052604060002080546102bf61060b600184016103bb565b92610618600382016103bb565b90600581015461062a600683016103bb565b610636600884016103bb565b90610643600a85016103bb565b9261065c600e610655600c88016103bb565b960161042c565b95604051998960ff8c9b60181c169060ff8160101c169060ff808260081c1691168d6104ef565b60405190610690826102f7565b601482527f436f64615369676e61747572652a2a2a2a2a2a2a0000000000000000000000006020830152565b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c3576102bf6102ab610683565b67ffffffffffffffff81116103135760051b60200190565b81601f820112156102c357803591610725836106f6565b926107336040519485610351565b808452602092838086019260051b8201019283116102c3578301905b82821061075d575050505090565b8135815290830190830161074f565b906020828203126102c357813567ffffffffffffffff81116102c35761025e920161070e565b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043567ffffffffffffffff81116102c3576107f36107e6602092369060040161070e565b6107ee613697565b6136e5565b51604051908152f35b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560ae548110156102c35760005260b06020526040600020600260ff825460181c16036108dd576108db906108ad61089b610866610392565b600181527f1b74b5a30a12937c53dfa9f06378ee548f655bd4333d477119cf7a23caed2abb6020820152600484015490613610565b80516008840155602001516009830155565b63030000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff825416179055565b005b60046040517fe8c31343000000000000000000000000000000000000000000000000000000008152fd5b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760206040517f1b74b5a30a12937c53dfa9f06378ee548f655bd4333d477119cf7a23caed2abb8152f35b90815180825260208080930193019160005b828110610980575050505090565b835185529381019392810192600101610972565b9061025e91602081526109ad60208201835160ff169052565b602082015160408201526109ca6040830151606083019015159052565b6060820151151560808201526080820151805160a08301526020015160c082015260a0820151805160e08301526020015161010082015260c082015161012082015260e082015190610100610a2e610160938461014085015261018084019061020a565b930151917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082850301910152610960565b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35767ffffffffffffffff6004358181116102c357366023820112156102c35780600401359182116102c35736602483830101116102c3576102bf916024610ad4920161200c565b60405191829182610994565b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c357602060405160058152f35b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60409101126102c357600490565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc60409101126102c357604490565b60a4359081151582036102c357565b359081151582036102c357565b346102c35760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c357610bcc36610b1a565b610bd536610b49565b60843567ffffffffffffffff8082116102c357366023830112156102c35781600401359081116102c3573660248260051b840101116102c3576102bf93610c28936024610c20610b78565b9401916122aa565b6040519081529081906020820190565b81601f820112156102c35780359067ffffffffffffffff82116103135760405192610c8b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160185610351565b828452602083830101116102c357816000926020809301838601378301015290565b929190610cc4602091604086526040860190610960565b930152565b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043567ffffffffffffffff81116102c357610d18903690600401610c38565b608080825111610dd557610d2a612721565b91600091825b8251811015610d975780610d82610d7c610d76610d50610d9295886127b8565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b60ff1690565b610d8c82886127d6565b526121dd565b610d30565b509190515b828110610dc15783610db0816107ee613697565b51906102bf60405192839283610cad565b8082610d8c610dd093876127d6565b610d9c565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f43697263756974537472696e672e66726f6d537472696e673a20696e7075742060448201527f737472696e672065786365656473206d6178206c656e677468210000000000006064820152fd5b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760206040517f40000000000000000000000000000000224698fc094cf91b992d30ed000000018152f35b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560005260af602052602073ffffffffffffffffffffffffffffffffffffffff60406000205416604051908152f35b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c3576000600435815260af60205273ffffffffffffffffffffffffffffffffffffffff604082205416330361100c5760b0602052611009600f60408320838155610f926001820160016000918281550155565b610fa56003820160016000918281550155565b836005820155610fbe6006820160016000918281550155565b610fd16008820160016000918281550155565b610fe4600a820160016000918281550155565b610ff7600c820160016000918281550155565b611003600e8201611d0a565b01611d53565b80f35b80fd5b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760206040517c40000000000000000000000000224698fc0994a8dd8c46eb21000000018152f35b346102c35760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35767ffffffffffffffff6004358181116102c3576110b5903690600401610c38565b906024359081116102c3576110ce90369060040161070e565b6110d6613697565b6110de61274f565b906020808551101561118757600090815b818110611145576102bf611134876107ee88887f40000000000000000000000000000000224698fc094cf91b992d30ed00000001890661112e836127c9565b526136e5565b516040519081529081906020820190565b8651811061115c575b611157906121dd565b6110ef565b9161115790611174610d7c610d76610d50878c6127b8565b61117d85611cef565b1b1792905061114e565b606490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152600f60248201527f70726566697820746f6f206c6f6e6700000000000000000000000000000000006044820152fd5b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560ae548110156102c3576112359060005260b0602052604060002090565b805460ff8160181c166108dd5760ff16156112b4578061128161125d600f6108db9401611d90565b611269600184016103bb565b60038401549061127b600e860161042c565b92613a20565b600582015563010000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff825416179055565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420696e697469616c697a656400000000000000000000000000000000006044820152606490fd5b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c357602060ae54604051908152f35b359060ff821682036102c357565b91908260409103126102c357604051611375816102f7565b6020808294803584520135910152565b346102c3577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6040813601126102c35760043567ffffffffffffffff918282116102c3576102609082360301126102c3576113de6103a1565b6113ea82600401610b87565b81526113f860248301610b87565b602082015261140960448301610b87565b604082015261141a6064830161134f565b606082015261142c366084840161135d565b608082015261143e3660c4840161135d565b60a082015261010482013560c082015261145c36610124840161135d565b60e082015261146f36610164840161135d565b610100820152611483366101a4840161135d565b610120820152611497366101e4840161135d565b6101408201526102248201358381116102c3576114ba9060043691850101610c38565b6101608201526102448201359283116102c3576114e36114f29260046102bf953692010161070e565b61018082015260243590612610565b6040519182918261024d565b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560ae548110156102c35761154e8160005260b0602052604060002090565b90600560ff611562845460ff9060181c1690565b16036108dd578161161d611627926115c6611582600c6102bf97016103bb565b60038501548151149081611639575b5084547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff1690151560101b62ff000016178455565b82547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff1663060000001783556116186116078261160286611ddf565b612610565b9160005260b1602052604060002090565b6124c0565b5460101c60ff1690565b60405190151581529081906020820190565b6001915060200151161538611591565b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560ae548110156102c35760005260b06020526040600020600360ff825460181c16036108dd578060206116c16116b660066108db95016103bb565b600584015490613610565b8051600a8401550151600b82015563040000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff825416179055565b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c357602060405160018152f35b346102c35760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c3576020611788604051611777816102f7565b60043581526024358382015261217c565b6040519015158152f35b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560ae548110156102c35760005260b06020526040600020600460ff6117ee835460ff9060181c1690565b16036108dd578061184d61183b61180a60086108db95016103bb565b611816600a85016103bb565b9061182660208351930151612458565b61182e610392565b9283526020830152612b50565b8051600c84015560200151600d830155565b63050000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff825416179055565b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c357602060405160808152f35b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35760043560ae548110156102c35760005260b06020526040600020600160ff825460181c16036108dd578061195461194260016108db94015461193d60018060028701541614611931610392565b92835215156020830152565b6127ea565b80516006840155602001516007830155565b63020000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff825416179055565b9061025e916020815261199a60208201835115159052565b602082015115156040820152604082015115156060820152606082015160ff1660808201526080820151805160a08301526020015160c082015260a0820151805160e08301526020015161010082015260c0820151906101209182820152611a6c60e0840151611a1a610140918285019060208091805184520151910152565b611a5561010086015194611a3e610180968787019060208091805184520151910152565b86015180516101c0860152602001516101e0850152565b840151805161020084015260200151610220830152565b61016083015191610a2e610260938461024085015261028084019061020a565b346102c35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c3576060610180604051611acc81610318565b600081526000602082015260006040820152600083820152611aec611d77565b6080820152611af9611d77565b60a0820152600060c0820152611b0d611d77565b60e0820152611b1a611d77565b610100820152611b28611d77565b610120820152611b36611d77565b6101408201528261016082015201526102bf611b66611b6160043560005260b0602052604060002090565b611ddf565b60405191829182611982565b60405190611b7f826102f7565b601482527f4d696e615369676e61747572654d61696e6e65740000000000000000000000006020830152565b346102c35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c3576102bf6102ab611b72565b346102c35760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c35767ffffffffffffffff6004358181116102c357611c3590369060040161070e565b9060407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc3601126102c357604051611c6c816102f7565b602435815260443560208201526084359182116102c357602092611c97611ca1933690600401610c38565b9160643591613a20565b604051908152f35b818110611cb4575050565b60008155600101611ca9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b908160031b9180830460081490151715611d0557565b611cc0565b611d1481546103d9565b9081611d1e575050565b81601f60009311600114611d30575055565b908083918252611d4f601f60208420940160051c840160018501611ca9565b5555565b80546000825580611d62575050565b61039f91600052602060002090810190611ca9565b60405190611d84826102f7565b60006020838281520152565b9060405191828154918282526020928383019160005283600020936000905b828210611dc55750505061039f92500383610351565b855484526001958601958895509381019390910190611daf565b90611eba600f611ded6103a1565b93611e2f60ff8254611e03828216899015159052565b600881901c821615156020890152601081901c82161515604089015260181c16606087019060ff169052565b611e3b600182016103bb565b6080860152611e4c600382016103bb565b60a0860152600581015460c0860152611e67600682016103bb565b60e0860152611e78600882016103bb565b610100860152611e8a600a82016103bb565b610120860152611e9c600c82016103bb565b610140860152611eae600e820161042c565b61016086015201611d90565b610180830152565b60405190610120820182811067ffffffffffffffff82111761031357604052606061010083600081526000602082015260006040820152600083820152611f07611d77565b6080820152611f14611d77565b60a0820152600060c08201528260e08201520152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9015611f625790565b611f2a565b9060211015611f625760210190565b9060221015611f625760220190565b906021116102c35760010190602090565b909291928360c3116102c35783116102c35760c301917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3d0190565b359060208110611fdf575090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060200360031b1b1690565b9061213c612144918061201d611ec2565b9461205e612057610d766120318585611f59565b357fff000000000000000000000000000000000000000000000000000000000000001690565b60ff168752565b61207161206b8383611f85565b90611fd1565b60208701526120b17fff000000000000000000000000000000000000000000000000000000000000006120a76120318585611f67565b1615156040880152565b6120f26120e96120c46120318585611f76565b7fff000000000000000000000000000000000000000000000000000000000000001690565b15156060880152565b608086016023820135815152602060438301359151015260a086016063820135815152602060838301359151015260a381013560c0870152612132610683565b60e0870152611f96565b81019061076c565b61010082015290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8051907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001908183108015906121cf575b6121c757600582602081930151948181800909089180091490565b505050600090565b5081602082015110156121ac565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611d055760010190565b9190601f811161221957505050565b61039f926000526020600020906020601f840160051c83019310612245575b601f0160051c0190611ca9565b9091508190612238565b61225981546103d9565b601f8111612288575b507f436f64615369676e61747572652a2a2a2a2a2a2a0000000000000000000000289055565b6122a49082600052601f6020600020910160051c810190611ca9565b38612262565b939290916122c06122bb368761135d565b61217c565b1561242e5761234e61ff009361233c60ae54976122dc896121dd565b60ae556122f38960005260b0602052604060002090565b9788547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff00006001998a93151560081b16911617178855868801906020600191803584550135910155565b80356003870155602001356004860155565b600f84019067ffffffffffffffff831161031357680100000000000000008311610313578154838355808410612410575b50906000526020806000209060005b8481106123ff57505050505050600e6123a7910161224f565b61025e336123bf8360005260af602052604060002090565b9073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b83358382015592810192850161238e565b61242890836000528460206000209182019101611ca9565b3861237f565b60046040517fa2d0fee8000000000000000000000000000000000000000000000000000000008152fd5b907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001918203918211611d0557565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201918211611d0557565b91908203918211611d0557565b919091825167ffffffffffffffff8111610313576124e8816124e284546103d9565b8461220a565b602080601f8311600114612541575081929394600092612536575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c1916179055565b015190503880612503565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe083169561257585600052602060002090565b926000905b8882106125d057505083600195969710612599575b505050811b019055565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c1916905538808061258f565b8060018596829496860151815501950193019061257a565b90602061025e928181520190610960565b9061260c602092828151948592016101e7565b0190565b602081810151604080840151608085015180519085015160a087015180519087015160c089015195517f0200000000000000000000000000000000000000000000000000000000000000818a0152602181019a909a5295151560f890811b60418b015293151590931b604289015260438801919091526063870152608386015260a385019190915260c38085019190915283527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0916126d060e385610351565b61018001516040518091838201906126e7916125e8565b0383810182526126f79082610351565b6040519384928301612708916125f9565b612711916125f9565b03908101825261025e9082610351565b60405190611020820182811067ffffffffffffffff8211176103135760405260808252611000366020840137565b6040519061275c826102f7565b6001825260203681840137565b90612773826106f6565b6127806040519182610351565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06127ae82946106f6565b0190602036910137565b908151811015611f62570160200190565b805115611f625760200190565b8051821015611f625760209160051b010190565b6127f2611d77565b508051907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001602061282c82600581878181800909086128ca565b920151151560018084161403612855575b506040519161284b836102f7565b8252602082015290565b908103908111611d05573861283d565b1561286c57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f53717561726520726f6f7420646f6573206e6f742065786973740000000000006044820152fd5b8015612a785760007f40000000000000000000000000000000224698fc094cf91b992d30ed000000005b600180821661290e571c90612908906121dd565b906128f4565b50909160025b7f40000000000000000000000000000000224698fc094cf91b992d30ed0000000061293e82612a7e565b146129515761294c906121dd565b612914565b8261295b91612af7565b9261296a600193841c83612af7565b906000947f40000000000000000000000000000000224698fc094cf91b992d30ed00000001808095850980979409905b8582036129aa5750505050505090565b856000979394959697918184905b612a36575b506129c9868410612865565b946000915b6129f8575b5050936129f357848080858009809309936000930995949391929061299a565b61214d565b86612a0e612a0985849995996124b3565b612486565b871015612a2d576129f357612a2788838b9409966121dd565b916129ce565b508195506129d3565b92909180889185141580612a6f575b15612a6657506129f357612a5d88848b9509916121dd565b929190826129b8565b929193506129bd565b50878310612a45565b50600090565b60405190602082526020808301526020604083015260608201527f2000000000000000000000000000000011234c7e04a67c8dcc9698768000000060808201527f40000000000000000000000000000000224698fc094cf91b992d30ed0000000160a082015260208160c08160055afa156102c3575190565b90604051916020835260208084015260206040840152606083015260808201527f40000000000000000000000000000000224698fc094cf91b992d30ed0000000160a082015260208160c08160055afa156102c3575190565b61025e91612b72612b6c612b7893612b66611d77565b50612b9c565b91612b9c565b90612d39565b612c05565b60405190612b8a82610335565b60006040838281528260208201520152565b612ba4612b7d565b5080511580612bf9575b612bd7576020815191015160405191612bc683610335565b825260208201526001604082015290565b50604051612be481610335565b60018152600160208201526000604082015290565b50602081015115612bae565b612c0d611d77565b5060408101805115612d1d57518015612cbf5760006001917f40000000000000000000000000000000224698fc094cf91b992d30ed0000000190805b612ca75750507f40000000000000000000000000000000224698fc094cf91b992d30ed000000018092508111612ca0575b81808280096020828287510995015192612c92610392565b958652099009602082015290565b8101612c7a565b80820484810290930393929091908202900380612c49565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f7420696e76657274203000000000000000000000000000000000006044820152fd5b5050604051612d2b816102f7565b600081526000602082015290565b90612d42612b7d565b5060408201519081156134fd5760408101519182156134f7577f40000000000000000000000000000000224698fc094cf91b992d30ed0000000180848009855109917f40000000000000000000000000000000224698fc094cf91b992d30ed000000018083800982510990602080870151910151957f40000000000000000000000000000000224698fc094cf91b992d30ed000000018581038408156133ec5750612deb6103ae565b957f40000000000000000000000000000000224698fc094cf91b992d30ed0000000185810384087f40000000000000000000000000000000224698fc094cf91b992d30ed000000018681038508907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910960047f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191097f40000000000000000000000000000000224698fc094cf91b992d30ed000000019086097f40000000000000000000000000000000224698fc094cf91b992d30ed0000000186810385087f40000000000000000000000000000000224698fc094cf91b992d30ed000000018781038608907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910960047f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191097f40000000000000000000000000000000224698fc094cf91b992d30ed000000018781038608907f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109927f40000000000000000000000000000000224698fc094cf91b992d30ed000000018880097f40000000000000000000000000000000224698fc094cf91b992d30ed000000019089097f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910991827f40000000000000000000000000000000224698fc094cf91b992d30ed0000000103907f40000000000000000000000000000000224698fc094cf91b992d30ed000000018780097f40000000000000000000000000000000224698fc094cf91b992d30ed000000019088097f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109907f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191087f40000000000000000000000000000000224698fc094cf91b992d30ed0000000190600209917f40000000000000000000000000000000224698fc094cf91b992d30ed00000001826002097f40000000000000000000000000000000224698fc094cf91b992d30ed000000019085087f40000000000000000000000000000000224698fc094cf91b992d30ed00000001037f40000000000000000000000000000000224698fc094cf91b992d30ed00000001848009907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910893848a527f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191097f40000000000000000000000000000000224698fc094cf91b992d30ed00000001906002097f40000000000000000000000000000000224698fc094cf91b992d30ed0000000103927f40000000000000000000000000000000224698fc094cf91b992d30ed00000001037f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191087f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910860208601527f40000000000000000000000000000000224698fc094cf91b992d30ed00000001848308927f40000000000000000000000000000000224698fc094cf91b992d30ed00000001037f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910892807f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910990807f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109907f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191087f40000000000000000000000000000000224698fc094cf91b992d30ed000000010390807f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109907f40000000000000000000000000000000224698fc094cf91b992d30ed000000019108907f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109604082015290565b947f40000000000000000000000000000000224698fc094cf91b992d30ed00000001809495508092935081800990099009917f40000000000000000000000000000000224698fc094cf91b992d30ed0000000180808480098409850983146134ea57507f40000000000000000000000000000000224698fc094cf91b992d30ed000000019283828181819509900990099008156134e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c696420706f696e74206164646974696f6e000000000000000000006044820152606490fd5b612be46103ae565b91505061025e9150613503565b50505090565b91505090565b61350b612b7d565b506040810180511561360c5760208201918251156135ad575191519051907f40000000000000000000000000000000224698fc094cf91b992d30ed000000019182918280868009818080808080888009818180099c0881808d8808810391800908600209926003098180808560020981038184800908938161358b6103ae565b9b868d5260080982039482039008900908602086015209600209604082015290565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f43616e6e6f7420646f75626c6520706f696e74207769746820793d30000000006044820152606490fd5b5090565b61361c90612b66611d77565b9060405161362981610335565b816001918281528260208201526000604082015293905b6136505750505061025e90612c05565b818084161461366d575b61366390613503565b91811c9182613640565b9261367b8461366392612d39565b93905061365a565b6040519061369082610335565b6060368337565b60606040516136a581610335565b3690376040516136b481610335565b60008152600060208201526000604082015290565b9060018201809211611d0557565b9060038201809211611d0557565b6136ed613683565b508151156137b5576000905b8251821080156137ae579061372291613777575b613716836136c9565b845111613734576137bb565b9060028101809111611d0557906136f9565b602081017f40000000000000000000000000000000224698fc094cf91b992d30ed00000001815161376d613767876136c9565b886127d6565b51900890526137bb565b7f40000000000000000000000000000000224698fc094cf91b992d30ed0000000181516137a485876127d6565b519008815261370d565b5091505090565b61025e91505b6137c3613683565b506000805b603781106137d557505090565b6137df835161387a565b83526020908184016137f1815161387a565b905261380d604094858101613806815161387a565b905261397d565b938480519361381b846138aa565b956129f357613875947f40000000000000000000000000000000224698fc094cf91b992d30ed0000000196879108825281018581516138598661392f565b900890520180519361386a83613956565b6000950890526121dd565b6137c8565b7f40000000000000000000000000000000224698fc094cf91b992d30ed0000000190818082818180090980090990565b603781108080613927575b156138c95715611f62576003026009015490565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f496e76616c696420726f756e6420636f6e7374616e7420696e646963657300006044820152fd5b5060016138b5565b60378110808061394e575b156138c95715611f6257600302600a015490565b50600161393a565b603781108080613975575b156138c95715611f6257600302600b015490565b506001613961565b90613986613683565b91600054907f40000000000000000000000000000000224698fc094cf91b992d30ed000000018080809484519009818080600154938160208901958651900990089581600254978160408401998a51900990088a528180806003548451900981600454885190099008816005548a519009900860208b01526006549051900991600754905190099008916008549051900990086040830152565b91939293613a36613a3184516136d7565b612769565b9280519060005b828110613ae357505091613ac59495916107ee936002835191602080958194828460051b8c0101520151836001830160051b8a0101520160051b86010152613a83613697565b90613a8c61274f565b9281815191012090613a9c611b72565b805191012003613ac9577374656e6e69614d65727574616e676953616e694d5b61112e836127c9565b5190565b732a2a2a2a2a2a2a65727574616e67695361646f43613abc565b8060019160051b6020808286010151918901015201613a3d56fea26469706673582212200047f095a85117bdc454241752066326707d185e26a04d67e96f9e36e63d611764736f6c63430008140033",
  "devdoc": {
    "details": "Verifies signatures over fields generated using mina-signer.",
    "kind": "dev",
    "methods": {
      "cleanupVFLifecycle(uint256)": {
        "details": "Can only be called by the creator of the verification process",
        "params": {
          "vfId": "The ID of the verification process to clean up"
        }
      },
      "decodeVFStateBytesCompressed(bytes)": {
        "params": {
          "data": "The compressed bytes containing all VF state fields. Expected minimum length is 195 bytes             plus additional bytes for the dynamic fields array"
        },
        "returns": {
          "state": "The decoded VerifyFieldsStateCompressed struct containing:               - verifyType (1 byte)               - vfId (32 bytes)               - mainnet flag (1 byte)               - isValid flag (1 byte)               - publicKey (x,y coordinates, 64 bytes)               - signature (r,s values, 64 bytes)               - messageHash (32 bytes)               - prefix (constant string)               - fields (dynamic uint256 array starting at byte 195)"
        }
      },
      "fromStringToHash(string)": {
        "details": "Matches the behavior of CircuitString.from(str).hash() from o1js Process: 1. Converts string to fixed-length character array 2. Pads array with zeros if needed 3. Computes Poseidon hash of the array",
        "params": {
          "str": "The input string to convert and hash"
        },
        "returns": {
          "_0": "uint256[] Array of character values, padded to DEFAULT_STRING_LENGTH",
          "_1": "uint256 Poseidon hash of the character array"
        }
      },
      "getVFState(uint256)": {
        "details": "Returns a copy of the state, not a reference",
        "params": {
          "vfId": "The ID of the verification process"
        },
        "returns": {
          "state": "The complete verification state structure"
        }
      },
      "getVFStateBytesCompressed(uint256)": {
        "params": {
          "vfId": "The ID of the verification process"
        },
        "returns": {
          "_0": "state The complete verification state structure in bytes"
        }
      },
      "hashMessage(uint256[],(uint256,uint256),uint256,string)": {
        "details": "Implements message hashing as specified in the signing scheme",
        "params": {
          "fields": "Array of message fields",
          "prefix": "Network-specific prefix",
          "publicKey": "Public key point",
          "r": "X-coordinate of signature point"
        },
        "returns": {
          "_0": "uint256 Resulting message hash"
        }
      },
      "isValidPublicKey((uint256,uint256))": {
        "details": "Checks if the point coordinates satisfy the curve equation y² = x³ + 5",
        "params": {
          "point": "The point to validate with x and y coordinates"
        },
        "returns": {
          "_0": "bool True if the point lies on the curve, false otherwise"
        }
      },
      "packVerifyFieldsStateCompressed((bool,bool,bool,uint8,(uint256,uint256),(uint256,uint256),uint256,(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),string,uint256[]),uint256)": {
        "details": "Combines fixed-length and dynamic data using abi.encodePacked and abi.encode",
        "params": {
          "state": "The VerifyFieldsState to be compressed",
          "vfId": "The unique identifier for this verification state"
        },
        "returns": {
          "_0": "bytes The packed binary representation of the state"
        }
      },
      "poseidonHash(uint256[])": {
        "details": "Main hashing function without prefix",
        "params": {
          "input": "Array of field elements to hash"
        },
        "returns": {
          "_0": "uint256 Resulting hash"
        }
      },
      "poseidonHashWithPrefix(string,uint256[])": {
        "details": "Hashes prefix followed by input array",
        "params": {
          "input": "Array of field elements to hash",
          "prefix": "String prefix to prepend"
        },
        "returns": {
          "_0": "uint256 Resulting hash"
        }
      },
      "step_0_VF_assignValues((uint256,uint256),(uint256,uint256),uint256[],bool)": {
        "params": {
          "fields": "Array of field elements to verify",
          "network": "Network identifier (mainnet/testnet). Note for _network : It doesn't matter what we use since mina-signer uses 'testnet' regardless of the network set.",
          "publicKey": "The public key point (x,y)",
          "signature": "Contains r (x-coordinate) and s (scalar)"
        }
      },
      "step_1_VF(uint256)": {
        "params": {
          "vfId": "id"
        }
      }
    },
    "stateVariables": {
      "vfCounter": {
        "details": "Used as a unique ID. Incremented for each new verification process"
      },
      "vfLifeCycle": {
        "details": "Main storage for verification process states"
      },
      "vfLifeCycleCreator": {
        "details": "Used for access control in cleanup operations"
      }
    },
    "title": "PallasFieldsSignatureVerifier",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BEQ()": {
        "notice": "Curve equation constant (B) where y² = x³ + B"
      },
      "DEFAULT_STRING_LENGTH()": {
        "notice": "Default length for string operations"
      },
      "FIELD_MODULUS()": {
        "notice": "Field modulus for Pallas curve"
      },
      "G_X()": {
        "notice": "Generator point x-coordinate"
      },
      "G_Y()": {
        "notice": "Generator point y-coordinate"
      },
      "MAINNET_SIGNATURE_PREFIX()": {
        "notice": "Signature prefix for mainnet"
      },
      "SCALAR_MODULUS()": {
        "notice": "Scalar field modulus for Pallas curve"
      },
      "SIGNATURE_PREFIX()": {
        "notice": "Default signature prefix for testnet"
      },
      "cleanupVFLifecycle(uint256)": {
        "notice": "Removes a verification process state from storage"
      },
      "decodeVFStateBytesCompressed(bytes)": {
        "notice": "Decodes a compressed byte array into a VerifyFieldsStateCompressed struct"
      },
      "fromStringToHash(string)": {
        "notice": "Converts a string to its character array representation and computes its Poseidon hash"
      },
      "getVFState(uint256)": {
        "notice": "Retrieves the complete state of a field verification process"
      },
      "getVFStateBytesCompressed(uint256)": {
        "notice": "Retrieves the complete state of a verification process in bytes"
      },
      "hashMessage(uint256[],(uint256,uint256),uint256,string)": {
        "notice": "Hashes message fields with public key and signature data"
      },
      "isValidPublicKey((uint256,uint256))": {
        "notice": "Validates if a point lies on the Pallas curve"
      },
      "packVerifyFieldsStateCompressed((bool,bool,bool,uint8,(uint256,uint256),(uint256,uint256),uint256,(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),string,uint256[]),uint256)": {
        "notice": "Packs a VerifyFieldsState into a compressed bytes format for efficient storage"
      },
      "poseidonHash(uint256[])": {
        "notice": "Computes Poseidon hash of input array"
      },
      "poseidonHashWithPrefix(string,uint256[])": {
        "notice": "Computes Poseidon hash with prefix"
      },
      "step_0_VF_assignValues((uint256,uint256),(uint256,uint256),uint256[],bool)": {
        "notice": "Zero step - Input assignment. =================================================="
      },
      "step_1_VF(uint256)": {
        "notice": "Compute hash of the message with network prefix ================================================== Matches the first part of verify(): let e = hashMessage(message, pk, r, networkId); Process: 1. Convert message to HashInput format 2. Append public key coordinates and signature.r 3. Apply network prefix and hash Order is critical: [message fields] + [pk.x, pk.y, sig.r]"
      },
      "step_2_VF(uint256)": {
        "notice": "Convert public key to curve point ================================================== From o1js: PublicKey.toGroup(publicKey) This converts compressed public key format (x, isOdd) to full curve point representation by: 1. Computing y² = x³ + 5 (Pallas curve equation) 2. Taking square root 3. Selecting appropriate y value based on isOdd"
      },
      "step_3_VF(uint256)": {
        "notice": "Compute s*G where G is generator point ================================================== From o1js: scale(one, s) Critical: Do not reduce scalar by SCALAR_MODULUS Uses projective coordinates internally for efficiency Must use exact generator point coordinates from o1js: G.x = 1 G.y = 0x1b74b5a30a12937c53dfa9f06378ee548f655bd4333d477119cf7a23caed2abb"
      },
      "step_4_VF(uint256)": {
        "notice": "Compute e*publicKey ================================================== From o1js: scale(Group.toProjective(pk), e) where e is the message hash computed in step 1 Uses same scalar multiplication as s*G Takes public key point from step 2"
      },
      "step_5_VF(uint256)": {
        "notice": "Compute R = sG - ePk ================================================== From o1js: sub(scale(one, s), scale(Group.toProjective(pk), e)) Implemented as point addition with negated ePk Point negation on Pallas: (x, -y) R will be used for final verification"
      },
      "step_6_VF(uint256)": {
        "notice": "Final signature verification ================================================== From o1js: let { x: rx, y: ry } = Group.fromProjective(R); return Field.isEven(ry) && Field.equal(rx, r); Two conditions must be met: 1. R.x equals signature.r 2. R.y is even Returns final verification result"
      },
      "vfCounter()": {
        "notice": "Counter for tracking total number of field verification processes."
      },
      "vfLifeCycle(uint256)": {
        "notice": "Maps verification IDs to their respective state structures"
      },
      "vfLifeCycleBytesCompressed(uint256)": {
        "notice": "Maps verification IDs to their respective state structures compressed into bytes form. Doesn't store intermediate states but only the important bits."
      },
      "vfLifeCycleCreator(uint256)": {
        "notice": "Maps verification IDs to their creators' addresses"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2477,
        "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
        "label": "mdsMatrix",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_array(t_uint256)3_storage)3_storage"
      },
      {
        "astId": 2704,
        "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
        "label": "roundConstants",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_array(t_uint256)3_storage)55_storage"
      },
      {
        "astId": 17,
        "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
        "label": "vfCounter",
        "offset": 0,
        "slot": "174",
        "type": "t_uint256"
      },
      {
        "astId": 22,
        "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
        "label": "vfLifeCycleCreator",
        "offset": 0,
        "slot": "175",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 28,
        "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
        "label": "vfLifeCycle",
        "offset": 0,
        "slot": "176",
        "type": "t_mapping(t_uint256,t_struct(VerifyFieldsState)1913_storage)"
      },
      {
        "astId": 33,
        "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
        "label": "vfLifeCycleBytesCompressed",
        "offset": 0,
        "slot": "177",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint256)3_storage)3_storage": {
        "base": "t_array(t_uint256)3_storage",
        "encoding": "inplace",
        "label": "uint256[3][3]",
        "numberOfBytes": "288"
      },
      "t_array(t_array(t_uint256)3_storage)55_storage": {
        "base": "t_array(t_uint256)3_storage",
        "encoding": "inplace",
        "label": "uint256[3][55]",
        "numberOfBytes": "5280"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_struct(VerifyFieldsState)1913_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PallasTypes.VerifyFieldsState)",
        "numberOfBytes": "32",
        "value": "t_struct(VerifyFieldsState)1913_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Point)1845_storage": {
        "encoding": "inplace",
        "label": "struct PallasTypes.Point",
        "members": [
          {
            "astId": 1842,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1844,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Signature)1857_storage": {
        "encoding": "inplace",
        "label": "struct PallasTypes.Signature",
        "members": [
          {
            "astId": 1854,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "r",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1856,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "s",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VerifyFieldsState)1913_storage": {
        "encoding": "inplace",
        "label": "struct PallasTypes.VerifyFieldsState",
        "members": [
          {
            "astId": 1869,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "init",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1872,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "mainnet",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1875,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "isValid",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1878,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "atStep",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1882,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "publicKey",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Point)1845_storage"
          },
          {
            "astId": 1886,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "signature",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Signature)1857_storage"
          },
          {
            "astId": 1889,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "messageHash",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1893,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "pkInGroup",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(Point)1845_storage"
          },
          {
            "astId": 1897,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "sG",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(Point)1845_storage"
          },
          {
            "astId": 1901,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "ePk",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(Point)1845_storage"
          },
          {
            "astId": 1905,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "R",
            "offset": 0,
            "slot": "12",
            "type": "t_struct(Point)1845_storage"
          },
          {
            "astId": 1908,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "prefix",
            "offset": 0,
            "slot": "14",
            "type": "t_string_storage"
          },
          {
            "astId": 1912,
            "contract": "contracts/CORE_FieldsVerification.sol:PallasFieldsSignatureVerifier",
            "label": "fields",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}