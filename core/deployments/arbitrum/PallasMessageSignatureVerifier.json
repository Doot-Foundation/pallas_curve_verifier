{
  "address": "0xB352B0dE8AF1e27a0fc927c1aD38BdB1bc4FCf40",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidPublicKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StepSkipped",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BEQ",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_STRING_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FIELD_MODULUS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "G_X",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "G_Y",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINNET_SIGNATURE_PREFIX",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALAR_MODULUS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNATURE_PREFIX",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vmId",
          "type": "uint256"
        }
      ],
      "name": "cleanupVMLifecycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "decodeVMStateBytesCompressed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "verifyType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "vmId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "mainnet",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "publicKey",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "r",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Signature",
              "name": "signature",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "messageHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "prefix",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "message",
              "type": "string"
            }
          ],
          "internalType": "struct PallasTypes.VerifyMessageStateCompressed",
          "name": "state",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vmId",
          "type": "uint256"
        }
      ],
      "name": "getVMState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "init",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "mainnet",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "atStep",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "publicKey",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "r",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Signature",
              "name": "signature",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "messageHash",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "pkInGroup",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "sG",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "ePk",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "R",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "message",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "prefix",
              "type": "string"
            }
          ],
          "internalType": "struct PallasTypes.VerifyMessageState",
          "name": "state",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vmId",
          "type": "uint256"
        }
      ],
      "name": "getVMStateBytesCompressed",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Point",
          "name": "point",
          "type": "tuple"
        }
      ],
      "name": "isValidPublicKey",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "init",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "mainnet",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "atStep",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "publicKey",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "r",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "s",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Signature",
              "name": "signature",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "messageHash",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "pkInGroup",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "sG",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "ePk",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PallasTypes.Point",
              "name": "R",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "message",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "prefix",
              "type": "string"
            }
          ],
          "internalType": "struct PallasTypes.VerifyMessageState",
          "name": "state",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "vmId",
          "type": "uint256"
        }
      ],
      "name": "packVerifyMessageStateCompressed",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "input",
          "type": "uint256[]"
        }
      ],
      "name": "poseidonLegacyHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "prefix",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "input",
          "type": "uint256[]"
        }
      ],
      "name": "poseidonLegacyHashWithPrefix",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Point",
          "name": "publicKey",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "r",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "s",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Signature",
          "name": "signature",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "network",
          "type": "bool"
        }
      ],
      "name": "step_0_VM_assignValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vmId",
          "type": "uint256"
        }
      ],
      "name": "step_1_VM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vmId",
          "type": "uint256"
        }
      ],
      "name": "step_2_VM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vmId",
          "type": "uint256"
        }
      ],
      "name": "step_3_VM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vmId",
          "type": "uint256"
        }
      ],
      "name": "step_4_VM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vmId",
          "type": "uint256"
        }
      ],
      "name": "step_5_VM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vmId",
          "type": "uint256"
        }
      ],
      "name": "step_6_VM",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vmCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vmLifeCycle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "init",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "mainnet",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "atStep",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Point",
          "name": "publicKey",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "r",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "s",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Signature",
          "name": "signature",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "messageHash",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Point",
          "name": "pkInGroup",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Point",
          "name": "sG",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Point",
          "name": "ePk",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct PallasTypes.Point",
          "name": "R",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "prefix",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vmLifeCycleBytesCompressed",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vmLifeCycleCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x36289ca26b082d8d254e6dde55f89b72d03baac16b807e87dfa8ad20470b8d66",
  "receipt": {
    "to": null,
    "from": "0x22b4fD82537573614340314f29bCb2fab182f409",
    "contractAddress": "0xB352B0dE8AF1e27a0fc927c1aD38BdB1bc4FCf40",
    "transactionIndex": 4,
    "gasUsed": "17051781",
    "logsBloom": "0x
    "blockHash": "0xe105c45e1ce354b5d9dbf5d307cd308a784492d8329809f688ae40ef53362a9f",
    "transactionHash": "0x36289ca26b082d8d254e6dde55f89b72d03baac16b807e87dfa8ad20470b8d66",
    "logs": [],
    "blockNumber": 291968827,
    "cumulativeGasUsed": "18129488",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "20c9985a174c6978dfcb458f40069725",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidPublicKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StepSkipped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BEQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_STRING_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIELD_MODULUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"G_X\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"G_Y\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINNET_SIGNATURE_PREFIX\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALAR_MODULUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_PREFIX\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vmId\",\"type\":\"uint256\"}],\"name\":\"cleanupVMLifecycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeVMStateBytesCompressed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"verifyType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vmId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mainnet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"internalType\":\"struct PallasTypes.VerifyMessageStateCompressed\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vmId\",\"type\":\"uint256\"}],\"name\":\"getVMState\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"init\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mainnet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"atStep\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"pkInGroup\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"sG\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"ePk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"R\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"internalType\":\"struct PallasTypes.VerifyMessageState\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vmId\",\"type\":\"uint256\"}],\"name\":\"getVMStateBytesCompressed\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"point\",\"type\":\"tuple\"}],\"name\":\"isValidPublicKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"init\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mainnet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"atStep\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"pkInGroup\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"sG\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"ePk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"R\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"internalType\":\"struct PallasTypes.VerifyMessageState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"vmId\",\"type\":\"uint256\"}],\"name\":\"packVerifyMessageStateCompressed\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"poseidonLegacyHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"poseidonLegacyHashWithPrefix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"network\",\"type\":\"bool\"}],\"name\":\"step_0_VM_assignValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vmId\",\"type\":\"uint256\"}],\"name\":\"step_1_VM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vmId\",\"type\":\"uint256\"}],\"name\":\"step_2_VM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vmId\",\"type\":\"uint256\"}],\"name\":\"step_3_VM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vmId\",\"type\":\"uint256\"}],\"name\":\"step_4_VM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vmId\",\"type\":\"uint256\"}],\"name\":\"step_5_VM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vmId\",\"type\":\"uint256\"}],\"name\":\"step_6_VM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vmCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vmLifeCycle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"init\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mainnet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"atStep\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"pkInGroup\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"sG\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"ePk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct PallasTypes.Point\",\"name\":\"R\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vmLifeCycleBytesCompressed\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vmLifeCycleCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Verifies signatures over message generated using mina-signer.\",\"kind\":\"dev\",\"methods\":{\"cleanupVMLifecycle(uint256)\":{\"details\":\"Can only be called by the creator of the verification process\",\"params\":{\"vmId\":\"The ID of the verification process to clean up\"}},\"decodeVMStateBytesCompressed(bytes)\":{\"details\":\"The prefix is set conditionally based on the mainnet flag:      - mainnet=true: \\\"MinaSignatureMainnet\\\"      - mainnet=false: \\\"CodaSignature*******\\\"\",\"params\":{\"data\":\"The compressed bytes containing all VM state fields. Expected minimum length is 195 bytes             plus additional bytes for the dynamic message string\"},\"returns\":{\"state\":\"The decoded VerifyMessageStateCompressed struct containing:               - verifyType (1 byte)               - vmId (32 bytes)               - mainnet flag (1 byte)               - isValid flag (1 byte)               - publicKey (x,y coordinates, 64 bytes)               - signature (r,s values, 64 bytes)               - messageHash (32 bytes)               - prefix (network-dependent string)               - message (dynamic string starting at byte 195)\"}},\"getVMState(uint256)\":{\"details\":\"Returns a copy of the state, not a reference\",\"params\":{\"vmId\":\"The ID of the verification process\"},\"returns\":{\"state\":\"The complete verification state structure\"}},\"getVMStateBytesCompressed(uint256)\":{\"params\":{\"vmId\":\"The ID of the verification process\"},\"returns\":{\"_0\":\"state The complete verification state structure in bytes\"}},\"isValidPublicKey((uint256,uint256))\":{\"details\":\"Checks if the point coordinates satisfy the curve equation y\\u00b2 = x\\u00b3 + 5\",\"params\":{\"point\":\"The point to validate with x and y coordinates\"},\"returns\":{\"_0\":\"bool True if the point lies on the curve, false otherwise\"}},\"packVerifyMessageStateCompressed((bool,bool,bool,uint8,(uint256,uint256),(uint256,uint256),uint256,(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),string,string),uint256)\":{\"details\":\"Combines fixed-length data with the dynamic message string using abi.encodePacked and abi.encode\",\"params\":{\"state\":\"The VerifyMessageState to be compressed\",\"vmId\":\"The unique identifier for this message verification state\"},\"returns\":{\"_0\":\"bytes The packed binary representation of the state\"}},\"poseidonLegacyHash(uint256[])\":{\"details\":\"Main hashing function without prefix\",\"params\":{\"input\":\"Array to hash\"},\"returns\":{\"_0\":\"uint256 Hash result\"}},\"poseidonLegacyHashWithPrefix(string,uint256[])\":{\"details\":\"Hashes prefix followed by input array\",\"params\":{\"input\":\"Array to hash\",\"prefix\":\"String prefix\"},\"returns\":{\"_0\":\"uint256 Hash result\"}},\"step_0_VM_assignValues((uint256,uint256),(uint256,uint256),string,bool)\":{\"params\":{\"message\":\"The string message to verify\",\"network\":\"Network identifier (true for mainnet, false for testnet)\",\"publicKey\":\"The public key point (x,y)\",\"signature\":\"Contains r (x-coordinate) and s (scalar)\"}},\"step_1_VM(uint256)\":{\"params\":{\"vmId\":\"Verification state identifier\"}},\"step_2_VM(uint256)\":{\"params\":{\"vmId\":\"Verification state identifier\"}},\"step_3_VM(uint256)\":{\"params\":{\"vmId\":\"Verification state identifier\"}},\"step_4_VM(uint256)\":{\"params\":{\"vmId\":\"Verification state identifier\"}},\"step_5_VM(uint256)\":{\"params\":{\"vmId\":\"Verification state identifier\"}},\"step_6_VM(uint256)\":{\"params\":{\"vmId\":\"Verification state identifier\"},\"returns\":{\"_0\":\"bool True if signature is valid, false otherwise\"}}},\"stateVariables\":{\"vmCounter\":{\"details\":\"Used as a unique ID. Incremented for each new verification process\"},\"vmLifeCycle\":{\"details\":\"Main storage for verification process states\"},\"vmLifeCycleCreator\":{\"details\":\"Used for access control in cleanup operations\"}},\"title\":\"PallasMessageSignatureVerifier\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BEQ()\":{\"notice\":\"Curve equation constant (B) where y\\u00b2 = x\\u00b3 + B\"},\"DEFAULT_STRING_LENGTH()\":{\"notice\":\"Default length for string operations\"},\"FIELD_MODULUS()\":{\"notice\":\"Field modulus for Pallas curve\"},\"G_X()\":{\"notice\":\"Generator point x-coordinate\"},\"G_Y()\":{\"notice\":\"Generator point y-coordinate\"},\"MAINNET_SIGNATURE_PREFIX()\":{\"notice\":\"Signature prefix for mainnet\"},\"SCALAR_MODULUS()\":{\"notice\":\"Scalar field modulus for Pallas curve\"},\"SIGNATURE_PREFIX()\":{\"notice\":\"Default signature prefix for testnet\"},\"cleanupVMLifecycle(uint256)\":{\"notice\":\"Removes a verification process state from storage\"},\"decodeVMStateBytesCompressed(bytes)\":{\"notice\":\"Decodes a compressed byte array into a VerifyMessageStateCompressed struct\"},\"getVMState(uint256)\":{\"notice\":\"Retrieves the complete state of a verification process\"},\"getVMStateBytesCompressed(uint256)\":{\"notice\":\"Retrieves the complete state of a verification process in bytes\"},\"isValidPublicKey((uint256,uint256))\":{\"notice\":\"Validates if a point lies on the Pallas curve\"},\"packVerifyMessageStateCompressed((bool,bool,bool,uint8,(uint256,uint256),(uint256,uint256),uint256,(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),string,string),uint256)\":{\"notice\":\"Packs a VerifyMessageState into a compressed bytes format for efficient storage\"},\"poseidonLegacyHashWithPrefix(string,uint256[])\":{\"notice\":\"Computes Poseidon hash with prefix\"},\"step_0_VM_assignValues((uint256,uint256),(uint256,uint256),string,bool)\":{\"notice\":\"Zero step - Input assignment for message verification ================================================== Initializes the verification state for a message signature\"},\"step_1_VM(uint256)\":{\"notice\":\"Compute hash of the message with network prefix ================================================== Matches the first part of verify(): let e = hashMessage(message, pk, r, networkId) Process: 1. Convert string message to bytes 2. Append public key coordinates and signature.r 3. Apply network prefix and hash\"},\"step_2_VM(uint256)\":{\"notice\":\"Convert public key to curve point ================================================== From o1js: PublicKey.toGroup(publicKey) This converts compressed public key format (x, isOdd) to full curve point representation by: 1. Computing y\\u00b2 = x\\u00b3 + 5 (Pallas curve equation) 2. Taking square root 3. Selecting appropriate y value based on isOdd\"},\"step_3_VM(uint256)\":{\"notice\":\"Compute s*G where G is generator point ================================================== From o1js: scale(one, s) Critical: Do not reduce scalar by SCALAR_MODULUS Uses projective coordinates internally for efficiency Must use exact generator point coordinates from o1js: G.x = 1 G.y = specific value from PallasConstants\"},\"step_4_VM(uint256)\":{\"notice\":\"Compute e*publicKey ================================================== From o1js: scale(Group.toProjective(pk), e) where e is the message hash computed in step 1 Uses same scalar multiplication as s*G Takes public key point from step 2\"},\"step_5_VM(uint256)\":{\"notice\":\"Compute R = sG - ePk ================================================== From o1js: sub(scale(one, s), scale(Group.toProjective(pk), e)) Implemented as point addition with negated ePk Point negation on Pallas: (x, -y) R will be used for final verification\"},\"step_6_VM(uint256)\":{\"notice\":\"Final signature verification ================================================== From o1js: let { x: rx, y: ry } = Group.fromProjective(R); return Field.isEven(ry) && Field.equal(rx, r); Two conditions must be met: 1. R.x equals signature.r 2. R.y is even\"},\"vmCounter()\":{\"notice\":\"Counter for tracking total number of verification processes\"},\"vmLifeCycle(uint256)\":{\"notice\":\"Maps verification IDs to their respective state structures\"},\"vmLifeCycleBytesCompressed(uint256)\":{\"notice\":\"Maps verification IDs to their respective state structures compressed into bytes form. Doesn't store intermediate states but only the important bits.\"},\"vmLifeCycleCreator(uint256)\":{\"notice\":\"Maps verification IDs to their creators' addresses\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CORE_MessageVerification.sol\":\"PallasMessageSignatureVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/CORE_MessageVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./legacy/PoseidonLegacy.sol\\\";\\n\\nerror InvalidPublicKey();\\nerror StepSkipped();\\n\\n/**\\n * @title PallasMessageSignatureVerifier\\n * @dev Verifies signatures over message generated using mina-signer.\\n */\\n\\ncontract PallasMessageSignatureVerifier is PoseidonLegacy {\\n    /// @notice Identifier for the type of verification.\\n    uint8 constant TYPE_VERIFY_MESSAGE = 1;\\n\\n    /// @notice Counter for tracking total number of verification processes\\n    /// @dev Used as a unique ID. Incremented for each new verification process\\n    uint256 public vmCounter = 0;\\n\\n    /// @notice Maps verification IDs to their creators' addresses\\n    /// @dev Used for access control in cleanup operations\\n    mapping(uint256 => address) public vmLifeCycleCreator;\\n\\n    /// @notice Maps verification IDs to their respective state structures\\n    /// @dev Main storage for verification process states\\n    mapping(uint256 => VerifyMessageState) public vmLifeCycle;\\n\\n    /// @notice Maps verification IDs to their respective state structures compressed into bytes form.\\n    /// Doesn't store intermediate states but only the important bits.\\n    mapping(uint256 => bytes) public vmLifeCycleBytesCompressed;\\n\\n    /// @notice Ensures only the creator of a verification process can access it\\n    /// @param vmId The verification process ID\\n    modifier isVMCreator(uint256 vmId) {\\n        if (msg.sender != vmLifeCycleCreator[vmId]) revert();\\n        _;\\n    }\\n\\n    /// @notice Ensures the verification ID exists\\n    /// @param vmId The verification process ID to check\\n    modifier isValidVMId(uint256 vmId) {\\n        if (vmId >= vmCounter) revert();\\n        _;\\n    }\\n\\n    /// @notice Removes a verification process state from storage\\n    /// @dev Can only be called by the creator of the verification process\\n    /// @param vmId The ID of the verification process to clean up\\n    function cleanupVMLifecycle(uint256 vmId) external isVMCreator(vmId) {\\n        delete vmLifeCycle[vmId];\\n    }\\n\\n    /// @notice Retrieves the complete state of a verification process\\n    /// @dev Returns a copy of the state, not a reference\\n    /// @param vmId The ID of the verification process\\n    /// @return state The complete verification state structure\\n    function getVMState(\\n        uint256 vmId\\n    ) external view returns (VerifyMessageState memory state) {\\n        return vmLifeCycle[vmId];\\n    }\\n\\n    /// @notice Retrieves the complete state of a verification process in bytes\\n    /// @param vmId The ID of the verification process\\n    /// @return state The complete verification state structure in bytes\\n    function getVMStateBytesCompressed(\\n        uint256 vmId\\n    ) external view returns (bytes memory) {\\n        return vmLifeCycleBytesCompressed[vmId];\\n    }\\n\\n    /// @notice Decodes a compressed byte array into a VerifyMessageStateCompressed struct\\n    /// @param data The compressed bytes containing all VM state fields. Expected minimum length is 195 bytes\\n    ///             plus additional bytes for the dynamic message string\\n    /// @return state The decoded VerifyMessageStateCompressed struct containing:\\n    ///               - verifyType (1 byte)\\n    ///               - vmId (32 bytes)\\n    ///               - mainnet flag (1 byte)\\n    ///               - isValid flag (1 byte)\\n    ///               - publicKey (x,y coordinates, 64 bytes)\\n    ///               - signature (r,s values, 64 bytes)\\n    ///               - messageHash (32 bytes)\\n    ///               - prefix (network-dependent string)\\n    ///               - message (dynamic string starting at byte 195)\\n    /// @dev The prefix is set conditionally based on the mainnet flag:\\n    ///      - mainnet=true: \\\"MinaSignatureMainnet\\\"\\n    ///      - mainnet=false: \\\"CodaSignature*******\\\"\\n    function decodeVMStateBytesCompressed(\\n        bytes calldata data\\n    ) external pure returns (VerifyMessageStateCompressed memory state) {\\n        state.verifyType = uint8(data[0]);\\n        state.vmId = uint256(bytes32(data[1:33]));\\n        state.mainnet = (data[33] != 0);\\n        state.isValid = (data[34] != 0);\\n\\n        uint256 x;\\n        uint256 y;\\n        uint256 r;\\n        uint256 s;\\n        uint256 messageHash;\\n\\n        assembly {\\n            // Load all values first\\n            x := calldataload(add(data.offset, 35))\\n            y := calldataload(add(data.offset, 67))\\n            r := calldataload(add(data.offset, 99))\\n            s := calldataload(add(data.offset, 131))\\n            messageHash := calldataload(add(data.offset, 163))\\n        }\\n\\n        // Then assign to struct fields\\n        state.publicKey.x = x;\\n        state.publicKey.y = y;\\n        state.signature.r = r;\\n        state.signature.s = s;\\n        state.messageHash = messageHash;\\n        state.prefix = state.mainnet\\n            ? \\\"MinaSignatureMainnet\\\"\\n            : \\\"CodaSignature*******\\\";\\n\\n        state.message = abi.decode(data[195:], (string));\\n        return state;\\n    }\\n\\n    /// @notice Validates if a point lies on the Pallas curve\\n    /// @dev Checks if the point coordinates satisfy the curve equation y\\u00b2 = x\\u00b3 + 5\\n    /// @param point The point to validate with x and y coordinates\\n    /// @return bool True if the point lies on the curve, false otherwise\\n    function isValidPublicKey(Point memory point) public pure returns (bool) {\\n        if (point.x >= FIELD_MODULUS || point.y >= FIELD_MODULUS) {\\n            return false;\\n        }\\n\\n        uint256 x2 = mulmod(point.x, point.x, FIELD_MODULUS);\\n        uint256 lhs = mulmod(point.y, point.y, FIELD_MODULUS);\\n        return\\n            lhs == addmod(mulmod(x2, point.x, FIELD_MODULUS), 5, FIELD_MODULUS);\\n    }\\n\\n    /// @notice Zero step - Input assignment for message verification\\n    /// ==================================================\\n    /// Initializes the verification state for a message signature\\n    /// @param publicKey The public key point (x,y)\\n    /// @param signature Contains r (x-coordinate) and s (scalar)\\n    /// @param message The string message to verify\\n    /// @param network Network identifier (true for mainnet, false for testnet)\\n    function step_0_VM_assignValues(\\n        Point calldata publicKey,\\n        Signature calldata signature,\\n        string calldata message,\\n        bool network\\n    ) external returns (uint256) {\\n        if (!isValidPublicKey(publicKey)) revert InvalidPublicKey();\\n\\n        uint256 toSetId = vmCounter;\\n        ++vmCounter;\\n\\n        VerifyMessageState storage toPush = vmLifeCycle[toSetId];\\n        toPush.atStep = 0;\\n        toPush.publicKey = publicKey;\\n        toPush.signature = signature;\\n        toPush.message = message;\\n        toPush.mainnet = network;\\n        toPush.init = true;\\n\\n        toPush.prefix = network\\n            ? \\\"MinaSignatureMainnet\\\"\\n            : \\\"CodaSignature*******\\\";\\n\\n        vmLifeCycleCreator[toSetId] = msg.sender;\\n\\n        return toSetId;\\n    }\\n\\n    /// @notice Compute hash of the message with network prefix\\n    /// ==================================================\\n    /// Matches the first part of verify():\\n    /// let e = hashMessage(message, pk, r, networkId)\\n    /// Process:\\n    /// 1. Convert string message to bytes\\n    /// 2. Append public key coordinates and signature.r\\n    /// 3. Apply network prefix and hash\\n    /// @param vmId Verification state identifier\\n    function step_1_VM(uint256 vmId) external isValidVMId(vmId) {\\n        VerifyMessageState storage current = vmLifeCycle[vmId];\\n        if (current.atStep != 0) revert StepSkipped();\\n        if (!current.init) revert(\\\"Not initialized\\\");\\n\\n        // Cache values to reduce storage reads\\n        string memory message = current.message;\\n        Point memory publicKey = current.publicKey;\\n        uint256 sigR = current.signature.r;\\n        string memory prefix = current.prefix;\\n\\n        current.messageHash = hashMessageLegacy(\\n            message,\\n            publicKey,\\n            sigR,\\n            prefix\\n        );\\n        current.atStep = 1;\\n    }\\n\\n    /// @notice Convert public key to curve point\\n    /// ==================================================\\n    /// From o1js: PublicKey.toGroup(publicKey)\\n    /// This converts compressed public key format (x, isOdd)\\n    /// to full curve point representation by:\\n    /// 1. Computing y\\u00b2 = x\\u00b3 + 5 (Pallas curve equation)\\n    /// 2. Taking square root\\n    /// 3. Selecting appropriate y value based on isOdd\\n    /// @param vmId Verification state identifier\\n    function step_2_VM(uint256 vmId) external isValidVMId(vmId) {\\n        VerifyMessageState storage current = vmLifeCycle[vmId];\\n        if (current.atStep != 1) revert StepSkipped();\\n\\n        uint256 pubKeyX = current.publicKey.x;\\n        uint256 pubKeyY = current.publicKey.y;\\n\\n        current.pkInGroup = _defaultToGroup(\\n            PointCompressed({x: pubKeyX, isOdd: (pubKeyY & 1 == 1)})\\n        );\\n\\n        current.atStep = 2;\\n    }\\n\\n    /// @notice Compute s*G where G is generator point\\n    /// ==================================================\\n    /// From o1js: scale(one, s)\\n    /// Critical: Do not reduce scalar by SCALAR_MODULUS\\n    /// Uses projective coordinates internally for efficiency\\n    /// Must use exact generator point coordinates from o1js:\\n    /// G.x = 1\\n    /// G.y = specific value from PallasConstants\\n    /// @param vmId Verification state identifier\\n    function step_3_VM(uint256 vmId) external isValidVMId(vmId) {\\n        VerifyMessageState storage current = vmLifeCycle[vmId];\\n        if (current.atStep != 2) revert StepSkipped();\\n\\n        Point memory G = Point(G_X, G_Y);\\n        current.sG = scalarMul(G, current.signature.s);\\n        current.atStep = 3;\\n    }\\n\\n    /// @notice Compute e*publicKey\\n    /// ==================================================\\n    /// From o1js: scale(Group.toProjective(pk), e)\\n    /// where e is the message hash computed in step 1\\n    /// Uses same scalar multiplication as s*G\\n    /// Takes public key point from step 2\\n    /// @param vmId Verification state identifier\\n    function step_4_VM(uint256 vmId) external isValidVMId(vmId) {\\n        VerifyMessageState storage current = vmLifeCycle[vmId];\\n        if (current.atStep != 3) revert StepSkipped();\\n\\n        Point memory pkInGroup = current.pkInGroup;\\n        uint256 messageHash = current.messageHash;\\n\\n        current.ePk = scalarMul(pkInGroup, messageHash);\\n        current.atStep = 4;\\n    }\\n\\n    /// @notice Compute R = sG - ePk\\n    /// ==================================================\\n    /// From o1js: sub(scale(one, s), scale(Group.toProjective(pk), e))\\n    /// Implemented as point addition with negated ePk\\n    /// Point negation on Pallas: (x, -y)\\n    /// R will be used for final verification\\n    /// @param vmId Verification state identifier\\n    function step_5_VM(uint256 vmId) external isValidVMId(vmId) {\\n        VerifyMessageState storage current = vmLifeCycle[vmId];\\n        if (current.atStep != 4) revert StepSkipped();\\n\\n        uint256 negY;\\n        unchecked {\\n            negY = FIELD_MODULUS - current.ePk.y;\\n        }\\n\\n        current.R = addPoints(current.sG, Point(current.ePk.x, negY));\\n        current.atStep = 5;\\n    }\\n\\n    /// @notice Final signature verification\\n    /// ==================================================\\n    /// From o1js:\\n    /// let { x: rx, y: ry } = Group.fromProjective(R);\\n    /// return Field.isEven(ry) && Field.equal(rx, r);\\n    /// Two conditions must be met:\\n    /// 1. R.x equals signature.r\\n    /// 2. R.y is even\\n    /// @param vmId Verification state identifier\\n    /// @return bool True if signature is valid, false otherwise\\n    function step_6_VM(uint256 vmId) external isValidVMId(vmId) returns (bool) {\\n        VerifyMessageState storage current = vmLifeCycle[vmId];\\n        if (current.atStep != 5) revert StepSkipped();\\n\\n        Point memory R = current.R;\\n        uint256 sigR = current.signature.r;\\n\\n        current.isValid = (R.x == sigR) && (R.y & 1 == 0);\\n        current.atStep = 6;\\n\\n        bytes memory stateBytesCompressed = packVerifyMessageStateCompressed(\\n            current,\\n            vmId\\n        );\\n        vmLifeCycleBytesCompressed[vmId] = stateBytesCompressed;\\n\\n        return current.isValid;\\n    }\\n\\n    /// @notice Packs a VerifyMessageState into a compressed bytes format for efficient storage\\n    /// @dev Combines fixed-length data with the dynamic message string using abi.encodePacked and abi.encode\\n    /// @param state The VerifyMessageState to be compressed\\n    /// @param vmId The unique identifier for this message verification state\\n    /// @return bytes The packed binary representation of the state\\n    function packVerifyMessageStateCompressed(\\n        VerifyMessageState memory state,\\n        uint256 vmId\\n    ) public pure returns (bytes memory) {\\n        bytes memory fixedData = abi.encodePacked(\\n            TYPE_VERIFY_MESSAGE,\\n            vmId,\\n            state.mainnet,\\n            state.isValid,\\n            state.publicKey.x,\\n            state.publicKey.y,\\n            state.signature.r,\\n            state.signature.s,\\n            state.messageHash\\n        );\\n\\n        return abi.encodePacked(fixedData, abi.encode(state.message));\\n    }\\n\\n    /// @notice Converts a compressed point to its full curve point representation\\n    /// @dev Implements point decompression for Pallas curve (y\\u00b2 = x\\u00b3 + 5)\\n    /// Process:\\n    /// 1. Calculate y\\u00b2 using curve equation\\n    /// 2. Find square root of y\\u00b2\\n    /// 3. Choose correct y value based on oddness flag\\n    /// @param compressed The compressed point containing x-coordinate and oddness flag\\n    /// @return Point Complete point with both x and y coordinates\\n    function _defaultToGroup(\\n        PointCompressed memory compressed\\n    ) internal view returns (Point memory) {\\n        uint256 _x = compressed.x;\\n\\n        uint256 x2 = mulmod(_x, _x, FIELD_MODULUS);\\n        uint256 y2 = addmod(mulmod(x2, _x, FIELD_MODULUS), BEQ, FIELD_MODULUS);\\n\\n        uint256 _y = sqrtmod(y2, FIELD_MODULUS);\\n\\n        if ((_y & 1 == 1) != compressed.isOdd) {\\n            _y = FIELD_MODULUS - _y;\\n        }\\n\\n        return Point({x: _x, y: _y});\\n    }\\n}\\n\",\"keccak256\":\"0x6346aab2fc3e98d410b2618fac953a4ff88dbc39e995eab1a2fd107df4f471c8\",\"license\":\"MIT\"},\"contracts/PallasTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title PallasTypes\\n * @dev Common types used in Pallas operations\\n */\\ncontract PallasTypes {\\n    /// @title Point Structure\\n    /// @notice Represents a point on an elliptic curve with x and y coordinates\\n    /// @dev Used for public key and signature operations\\n    struct Point {\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    /// @title Compressed Point Structure\\n    /// @notice Represents a compressed form of an elliptic curve point\\n    /// @dev Uses x-coordinate and a boolean flag instead of full coordinates\\n    struct PointCompressed {\\n        uint256 x;\\n        bool isOdd;\\n    }\\n\\n    /// @title Digital Signature Structure\\n    /// @notice Represents a digital signature with its components\\n    /// @dev Used for cryptographic signature verification\\n    struct Signature {\\n        uint256 r;\\n        uint256 s;\\n    }\\n\\n    /// @title Projective Point Structure\\n    /// @notice Represents a point in projective coordinates\\n    /// @dev Used for efficient elliptic curve operations\\n    struct ProjectivePoint {\\n        uint256 x;\\n        uint256 y;\\n        uint256 z;\\n    }\\n\\n    /// @title Verify Fields State Structure\\n    /// @notice Holds the state for field array signature verification process\\n    /// @dev Used to track the progress and store intermediate results during verification\\n    struct VerifyFieldsState {\\n        /// @notice Indicates if the state has been properly initialized\\n        bool init;\\n        /// @notice Network flag - true for mainnet, false for testnet\\n        bool mainnet;\\n        /// @notice Final verification result\\n        bool isValid;\\n        /// @notice Tracks the current step of verification (0-6)\\n        uint8 atStep;\\n        /// @notice The public key point (x,y) being verified against\\n        Point publicKey;\\n        /// @notice The signature containing r (x-coordinate) and s (scalar)\\n        Signature signature;\\n        /// @notice Hash of the fields array with prefix ('e' value)\\n        uint256 messageHash;\\n        /// @notice Public key converted to curve point format\\n        Point pkInGroup;\\n        /// @notice Result of scalar multiplication s*G\\n        Point sG;\\n        /// @notice Result of scalar multiplication e*pkInGroup\\n        Point ePk;\\n        /// @notice Final computed point R = sG - ePk\\n        Point R;\\n        /// @notice Network-specific prefix for message hashing\\n        string prefix;\\n        /// @notice Array of field elements to verify\\n        uint256[] fields;\\n    }\\n\\n    /// @title Verification Fields State Compressed Structure.\\n    /// @notice Holds only the primary state for message signature verification process\\n    struct VerifyFieldsStateCompressed {\\n        /// @notice Indicates the type. 1 for Message, 2 for Fields. Helpful when reading\\n        uint8 verifyType;\\n        /// @notice The unique id\\n        uint256 vfId;\\n        /// @notice Network flag - true for mainnet, false for testnet\\n        bool mainnet;\\n        /// @notice Final verification result\\n        bool isValid;\\n        /// @notice The public key point (x,y) being verified against\\n        Point publicKey;\\n        /// @notice The signature containing r (x-coordinate) and s (scalar)\\n        Signature signature;\\n        /// @notice Hash of the fields array with prefix ('e' value)\\n        uint256 messageHash;\\n        /// @notice Network-specific prefix for message hashing\\n        string prefix;\\n        /// @notice Array of field elements to verify\\n        uint256[] fields;\\n    }\\n\\n    /// @title Verification Message State Structure\\n    /// @notice Holds the state for message signature verification process\\n    /// @dev Used to track the progress and store intermediate results during verification\\n    struct VerifyMessageState {\\n        /// @notice Indicates if the state has been properly initialized\\n        bool init;\\n        /// @notice Network flag - true for mainnet, false for testnet\\n        bool mainnet;\\n        /// @notice Final verification result\\n        bool isValid;\\n        /// @notice Tracks the current step of verification (0-6)\\n        uint8 atStep;\\n        /// @notice The public key point (x,y) being verified against\\n        Point publicKey;\\n        /// @notice The signature containing r (x-coordinate) and s (scalar)\\n        Signature signature;\\n        /// @notice Stores the computed hash of the message\\n        uint256 messageHash;\\n        /// @notice Public key converted to group form\\n        Point pkInGroup;\\n        /// @notice Result of scalar multiplication s*G\\n        Point sG;\\n        /// @notice Result of scalar multiplication e*pkInGroup\\n        Point ePk;\\n        /// @notice Final computed point R = sG - ePk\\n        Point R;\\n        /// @notice The message being verified\\n        string message;\\n        /// @notice Network-specific prefix for message hashing\\n        string prefix;\\n    }\\n\\n    /// @title Verification Message State Compressed Structure.\\n    /// @notice Holds only the primary state for message signature verification process\\n    struct VerifyMessageStateCompressed {\\n        /// @notice Indicates the type. 1 for Message, 2 for Fields. Helpful when reading\\n        uint8 verifyType;\\n        /// @notice The unique id\\n        uint256 vmId;\\n        /// @notice Network flag - true for mainnet, false for testnet\\n        bool mainnet;\\n        /// @notice Final verification result\\n        bool isValid;\\n        /// @notice The public key point (x,y) being verified against\\n        Point publicKey;\\n        /// @notice The signature containing r (x-coordinate) and s (scalar)\\n        Signature signature;\\n        /// @notice Stores the computed hash of the message\\n        uint256 messageHash;\\n        /// @notice Network-specific prefix for message hashing\\n        string prefix;\\n        /// @notice The message being verified\\n        string message;\\n    }\\n}\\n\",\"keccak256\":\"0x96de136ce962c0dea55a977505ce4a23d1b5b83509a3e5356f6679f290561715\",\"license\":\"MIT\"},\"contracts/legacy/PallasConstantsLegacy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract PallasConstantsLegacy {\\n    // Poseidon parameters matching poseidonParamsLegacyFp\\n    uint256 internal constant POSEIDON_FULL_ROUNDS = 63;\\n    uint256 internal constant POSEIDON_STATE_SIZE = 3;\\n    uint256 internal constant POSEIDON_RATE = 2;\\n    uint256 internal constant POSEIDON_POWER = 5;\\n    bool internal constant POSEIDON_HAS_INITIAL_ROUND_CONSTANT = true;\\n\\n    uint256[3][3] internal mdsMatrix = [\\n        [\\n            5328350144166205084223774245058198666309664348635459768305312917086056785354,\\n            15214731724107930304595906373487084110291887262136882623959435918484004667388,\\n            22399519358931858664262538157042328690232277435337286643350379269028878354609\\n        ],\\n        [\\n            10086628405675314879458652402278736459294354590428582803795166650930540770072,\\n            17127968360683744052278857147989507037142007029142438136689352416106177192235,\\n            14207324749280135281015658576564097509614634975132487654324863824516044294735\\n        ],\\n        [\\n            3059104278162906687184746935153057867173086006783171716838577369156969739687,\\n            16755849208683706534025643823697988418063305979108082130624352443958404325985,\\n            16889774624482628108075965871448623911656600744832339664842346756371603433407\\n        ]\\n    ];\\n\\n    uint256[3][100] internal roundConstants = [\\n        [\\n            1346081094044643970582493287085428191977688221215786919106342366360741041016,\\n            10635969173348128974923358283368657934408577270968219574411363948927109531877,\\n            18431955373344919956072236142080066866861234899777299873162413437379924987003\\n        ],\\n        [\\n            5797044060651575840084283729791357462720161727701814038830889113712361837236,\\n            931288489507796144596974766082847744938192694315568692730730202141894005205,\\n            13659894470945121760517769979107966886673294523737498361566285362771110125394\\n        ],\\n        [\\n            6076231707445968054305995680347976771585015308155855387339303513025362636128,\\n            28822740034050339685362260108484262889265034407340240070058997651710236456303,\\n            23420266473857869790486107029614186913447272961845992963194006142267563993493\\n        ],\\n        [\\n            13753917374184785903125509246122783296344288469304898921025291716613575849357,\\n            22396739346703340038555577564698139382745239004673153148674304627904081092826,\\n            13064238335532551154986111986409392866270911640785653458047811526842088084911\\n        ],\\n        [\\n            23165923875642452719095776619341762858050322341374771345641255745672274104746,\\n            1876216571769482372914291210815859835162659440705283782713345335434924136736,\\n            25448252060136178247213604035267580231762596830634036926922217427938159849142\\n        ],\\n        [\\n            2161875315509206970842862195937323600322108268401381254431163181777726747153,\\n            19159855698625842998331760283165907305622417625829203038229273729196960321630,\\n            24828563875172432296791053766778475681869974948122169083176331088266823626561\\n        ],\\n        [\\n            15959479662608710141128458274961057999257961784282074767105536637788386907463,\\n            8006369581283017287449277389162056290714176164680299906116833200510117952858,\\n            18794336794618132129607701188430371953320538976527988886453665523008714542779\\n        ],\\n        [\\n            19408271715954593722501381885401160867835377473312521553027032015227895029571,\\n            13654747284005184272412579731446984220568337794941823533879059135026064413631,\\n            14094055032353750931629930778481002727722804310855727808905931659115939920989\\n        ],\\n        [\\n            13241818625838429282823260827177433104574315653706102174619924764342778921524,\\n            25709259239494174564705048436260891089407557689981668111890003079561388887725,\\n            26866626910239634723971078462134580196819809568632305020800296809092442642381\\n        ],\\n        [\\n            23886826350713085163238005260075062110062681905356997481925492650252417143049,\\n            16853602711255261520713463306790360324679500458440235992292027384928526778856,\\n            18444710386168488194610417945072711530390091945738595259171890487504771614189\\n        ],\\n        [\\n            16896789009769903615328691751424474161656500693270070895928499575572871141439,\\n            23842266984616972287898037872537536999393060934879414668030219493005225085992,\\n            24369698563802298585444760814856330583118549706483939267059237951238240608187\\n        ],\\n        [\\n            25360195173713628054110426524260405937218170863260484655473435413697869858790,\\n            1486437708678506228822038923353468635394979165769861487132708983207562337116,\\n            18653498960429911228442559598959970807723487073275324556015861725806677047150\\n        ],\\n        [\\n            18878179044241268037057256060083772636369783391816038647949347814518015576522,\\n            178715779905629247116805974152863592571182389085419970371289655361443016848,\\n            8381006794425876451998903949255801618132578446062133243427381291481465852184\\n        ],\\n        [\\n            4176946262813877719206528849579392120806054050640974718891398605746592169324,\\n            16376345520728802444699629729684297833862527190772376028981704525651968727081,\\n            8399065769082251057361366626601550736334213197703006866551331927128775757919\\n        ],\\n        [\\n            15435308585611812393531506745122614542196708285088622615406141986333182280857,\\n            4082259282787276939431186930090898350392871145699460879678141552997816391817,\\n            26348742719959309014730178326877937464605873211235784184917342950648457078699\\n        ],\\n        [\\n            9707631711734344681918469569872517425107158187591261754498805460753455298868,\\n            27910768846011709391567916011595957279088224137468948238696800459136335473132,\\n            20407239095656434708569263842372155762970847207558227886302782130015730063802\\n        ],\\n        [\\n            22726225412881182965250630589245572283256255052470345984553083359461473893802,\\n            12443967854426795490638709950679156338200426963050610832781263082981525248175,\\n            27102543658848146076219989119639465430524061997280788166887046421706499775415\\n        ],\\n        [\\n            14427224233985680214097547669945064793149553513421479297921556194475574770861,\\n            22917454832925781549840198815703114840452733537799472739275668965081704937832,\\n            3455076056123630366063931123762198941796412458154689469887583689725886013901\\n        ],\\n        [\\n            4513100023937785913596662867311227004762025658663076805918211014066645403017,\\n            18187619530784075723418065322038024507729605774832001333883311123910954334059,\\n            9447065431426150382325592560406989926365684509675374414068135115024495130938\\n        ],\\n        [\\n            3227816098015819796753427754968234889554095489076864339942014527747604603014,\\n            14798316759185072116520458171957899889489461918408669809912344751222514418582,\\n            23013904852315603905843158448056763116188801262838729536210355401378476650033\\n        ],\\n        [\\n            20979191509934291452182967564058656088941447895799901211038858159903580333267,\\n            20772973010251235271448378823573767262405703078344288856168565499702414379868,\\n            10105446427739226002497411811738001382334316505480517822035303561899927603685\\n        ],\\n        [\\n            11079074761356717003579108002319997196881121172538617046865136940931215263187,\\n            4693927775411489288330326150094711670434597808961717172753867514688725690438,\\n            18581720304902876944842830383273503265470859268712618325357902881821721540119\\n        ],\\n        [\\n            3065369948183164725765083504606321683481629263177690053939474679689088169185,\\n            18515622379147081456114962668688706121098539582467584736624699157043365677487,\\n            17563088600719312877716085528177751048248154461245613291986010180187238198006\\n        ],\\n        [\\n            26199746176994924146211004840756471702409132230831594954444947705902602287290,\\n            7576136600627345523051497639367002272003104458453478964661395239732811642605,\\n            20058687874612168338994287374025378897088936171250328231848098497610185784281\\n        ],\\n        [\\n            16894722532414195606958290526999761110785277556463400588047573469106594850228,\\n            13961730805696859614283621225672002906734926278118993580398533742874863598733,\\n            25256842011135514243352951950573936602906198374305137963222382546140030647211\\n        ],\\n        [\\n            18530360047537856737482157200091774590035773602620205695980247565433703032532,\\n            23014819965938599260086897799541446473887833964178378497976832161473586995397,\\n            27911426213258307990762460361663504655967992659180759140364181941291843542489\\n        ],\\n        [\\n            1067338118323302017358103178057182291035336430305886255160210378977812067042,\\n            17219092885519007424608854460610388434712113621163885775309496940189894433620,\\n            16432921127615937542183846559291144733339643093361323334499888895135356545408\\n        ],\\n        [\\n            28608851042959977114787048070153637607786033079364369200270218128830983558707,\\n            10121629780013165888398831090128011045011860641816380162950736555305748332191,\\n            2348036340843128746981122630521268144839343500596932561106759754644596320722\\n        ],\\n        [\\n            16619881370356823200358060093334065394764987467483650323706184068451904156452,\\n            2302436627861989749837563733434625231689351276818486757748445924305258835336,\\n            27514536540953539473280001431110316405453388911725550380123851609652679788049\\n        ],\\n        [\\n            9459277727420672604737117687200019308525004979918488827092207438664125039815,\\n            23425670740358068509956137586663046763224562225383386726193078231034380596217,\\n            7641885067011661443791509688937280323563328029517832788240965464798835873658\\n        ],\\n        [\\n            9579420382351699601929202663836555665702024548386778299996961509578687980280,\\n            18513671386572584282611234979588379470994484682444053600751415262497237017703,\\n            24923151431234706142737221165378041700050312199585085101919834422744926421604\\n        ],\\n        [\\n            21131320841803068139502705966375283830095161079635803028011171241658723560073,\\n            19208476595309656066589572658712717685014329237892885950958199953675225096566,\\n            24023185216737416080949689106968568821656545490748664446389634158498624398204\\n        ],\\n        [\\n            7510552996848634969347937904645640209946785877619890235458182993413526028718,\\n            3694415017252995094553868781762548289196990492336482360084813900937464847638,\\n            9219021070107873028263141554048987416559034633883158827414043929220388719352\\n        ],\\n        [\\n            5058327241234443421111591959922712922949620710493120384930391763032694640881,\\n            13148252221647574076185511663661016015859769210867362839817254885265598775418,\\n            15186790492457240277904880519227706403545816456632095870015828239411033220638\\n        ],\\n        [\\n            2775942914650502409705888572245750999561427024488403026572311267798009048466,\\n            6277965230841030155341171319927732572492215818164736949144854827643964384893,\\n            24144742149845235561087977558785057713814731737434473021812189457617252043745\\n        ],\\n        [\\n            25789129719327437503403457598813971826156253950521984610569937361506914183550,\\n            21500534320778995945845999974779950304491968082325255355181901574840373597824,\\n            17185359848218837018503091932245529880546896465437232425673134558221638601375\\n        ],\\n        [\\n            12253896579078110143384981818031883112606762215016553811786428215758384195713,\\n            12956658260778456372481429232709881794962204180363200699121804724437678625542,\\n            3023603786717368708677300377055384474816569333060487675635618249403832078921\\n        ],\\n        [\\n            4186492855716808019562789862833898284927736051002588766326482010810259565130,\\n            4263939782228419774639068267872291539552889472311225829898746091327730032923,\\n            24068843626280451423530509388397151179174104901782990365720205643492047328816\\n        ],\\n        [\\n            14564937827374621319716285527475223392664010281568256859627186463065876537730,\\n            28367596550218705971881480694115935470211319172596432472834880507822452927283,\\n            28712267437482356021504544448225827500268648754270274754623969882031853409874\\n        ],\\n        [\\n            4542596163006916397403529184431773692747461300288194722982487051249951403191,\\n            2530461821259252672899452671728393208543894014761816288817584587718369998371,\\n            12886393063011539390567049190923398676964700147222878509238966758839020897414\\n        ],\\n        [\\n            21593897590707514492037699253654745501762191795293908682495110982956631870528,\\n            13233005790593128135480716846773978578237145313006994631606474472023504621256,\\n            21621863098292803642478350494794106282518362577273973885587684567452726939909\\n        ],\\n        [\\n            26068620073001644720969640099644251616742620988609091568084348314770436291745,\\n            18248589586787935500122854210401321966459127818593446990365211078521058875685,\\n            21247134484403265289037859533347798468858819117600251067578809852124865474448\\n        ],\\n        [\\n            7947383127165915366383984718363902897504221803836013123394785749404572432524,\\n            22173041014621867335598230447618036223462011647696367239478182269973488867154,\\n            16773227734018849308448505860847939069870370055633571816925675705713088305139\\n        ],\\n        [\\n            10708707957340055662073314227607620808612686977606082605219160019699644826999,\\n            21249897193797038261479589555720746994050836195265348846222835266344091683000,\\n            12581195059139097540117398803363514148192715293133623516709277290477633379593\\n        ],\\n        [\\n            19779599816866992123290302397082614570282926215253589712189610064229996603178,\\n            21749216503901548676985371189807470207364320167486559936962401093285243029177,\\n            17600045923623503357380202389718735904174992978547372448837488832457719009224\\n        ],\\n        [\\n            2732872979548118117758016335601225525660858727422778256671975055129965858636,\\n            13703031005128062046175331918702218558750713240446179585947851411173844703597,\\n            28447710105386636841938034820015573492556750872924193415447818187228356409281\\n        ],\\n        [\\n            28539960355005748517007309210788803416171161412204526246799800716567376494244,\\n            21329318452221893900731030722137844458345358926323127858742388587761302609863,\\n            28135302149599894709369178097439582767613940517471323224020113411362601191873\\n        ],\\n        [\\n            24980774120400248734054527936006392540889095705961960837980443629260392758683,\\n            20339911045808632098936066397942175169549806052128535543540543556255197716643,\\n            7929293103930252545581851978492699598413941396422930641071359388697302362494\\n        ],\\n        [\\n            8911092207145893152276662096451247820054843777071569723455408545101628926203,\\n            19648860643145256523615441075182036100116634560394529500146405733687718224516,\\n            14635387208623683806428528837466762532853903031263830054986064902455379735903\\n        ],\\n        [\\n            11555212214346132926966321609673228184079851030522218543981385635403167028692,\\n            20896918157639814425520058178561910811657326967880217845710779511927814874973,\\n            4650158165912007049140499755153804318686705949436165235742106170124284287326\\n        ],\\n        [\\n            13880660273492757167295696447853232191657893303250187467329180558670697369810,\\n            8043529172463774320604378774840863923445982272478964686447801046272917236836,\\n            2134399296482715903442913099374581981696436050603410080564843555725771329441\\n        ],\\n        [\\n            27320952903412641133501507962185246982787769547770982814240701526492601978122,\\n            23417491374379751329394424924400186404791519133465537872457405970098902747611,\\n            17612427354278346772575179176139417348059847375297761006336024476146551185903\\n        ],\\n        [\\n            10710998507064742997612080847223278109404482930427999113323732519626499166548,\\n            14958094513415797513745395709487730603918953350067504982704138489305723550923,\\n            24096319595904213497633343966229498735553590589105811393277073274927955202995\\n        ],\\n        [\\n            17983724131200292654039765185049138356840415443160477259330748730019147254309,\\n            17598096800487588874709548646068838880468456205252324677357706597166777506441,\\n            27420647821110229619898200875848631488422182349567475956209153112306555222281\\n        ],\\n        [\\n            448538544835457571662601142415301047108854812427100562339376187510452313026,\\n            23494184556634922103535803143214434479598067155171780264810485708203176455201,\\n            22626342941879801989161990529511235538216563009907378573817996229389756621777\\n        ],\\n        [\\n            26128268137723417163973860961686381960826033145738852158792607959175787222856,\\n            20225791828042873305317281581105429726352058325970107209484198122707862156597,\\n            7538871133759632802857159609785118198934349221046986784429069814655215585732\\n        ],\\n        [\\n            26184554861259642274153262777073624024579929401668865520166966302070394487366,\\n            28755259264665180745537307265993667261709206143628938749669440804401623257679,\\n            11896066093033549470312328497237649508068258723531931099214795928200015717321\\n        ],\\n        [\\n            21657721599978732693249012287058163532690942515202465984736373311077240614059,\\n            9214914097169852704753116653702415951907628005986883140609006971322091003693,\\n            18710111680849814325169297240208687402588261569152088592693815711857504371037\\n        ],\\n        [\\n            6813635166770764528979084175325709935892248249948967889926276426090222296643,\\n            20546585456429436268067726231902751119458200511988152296570567167520382569278,\\n            20087466019194902429054761607398988292568594301671509779549344754172952693871\\n        ],\\n        [\\n            28185105286740691904534067831357491310995891986363455251895371651360605333143,\\n            10108348212894231193041286244259038275269464277821588425688314560368589986063,\\n            11433633215392393209829215018579238412423821563056156785641278458497271271546\\n        ],\\n        [\\n            27870881917195016999862550657996865268956893566432995492427618003637597051321,\\n            102309803677783876701097881491240456320211833502658383473112057006867019389,\\n            22844040227595875612525628393174357057929113317578127744718774517498324646590\\n        ],\\n        [\\n            18364790233947478619325319418813215212267974311771564959136180502266118026133,\\n            2480624341921718230432383518425561514824501138863702825916674641657321180841,\\n            16778939567530361665956758171503829349658551798564323167725356065198936433124\\n        ],\\n        [\\n            11947564511486966895926950599696532964589539443187518177489990556481125699966,\\n            3133187646540385483015602955087323554103587039123577645562801570574691666057,\\n            27704797101265438206569218421707753788081674727344603874614391656565567951541\\n        ],\\n        [\\n            13001484695584753475562184349533365512515447041450030471627087395341039487710,\\n            477322000667279478600757543806155989948171541982639893984064422067850617496,\\n            13913755821658634147813329813115566967428755223601185963529801459396673113438\\n        ],\\n        [\\n            16621869429023470107454028095846067937827722393398508604914831452950874033411,\\n            21755744236927410239079501831014076529931327263341620300431356747367343619046,\\n            26538666591151124505694487799121414506088199961481579132019627484065014831180\\n        ],\\n        [\\n            3066480818457008068617042549071052338581291837882909165666223566402713429090,\\n            16182268213934119294035309949459684472027705439038023775276926916166831108357,\\n            28907604876608422892474268478706783033050951245339691569015166507728369585190\\n        ],\\n        [\\n            27973960109508292680965426133498827831691369851701664449575719912259359998113,\\n            1456924360278399121996742356757866616312146358469991014696110099534285524446,\\n            8234248752911525485438611255163504976087091103090603316695312869292347668495\\n        ],\\n        [\\n            8716078950082339630026654067608811496722305720644485560320987802533380421009,\\n            19016744645809919602099479306503354923553336014593353020688463619133130053825,\\n            24379650661051444982012238084495990858827340608012118841005379796362233056432\\n        ],\\n        [\\n            2245379544097631382062919677963998259142792890502492881341386639439507471783,\\n            28788137434161061988371619554419440748189388934884757179010092973102292086583,\\n            7187000185648741287953633167647835668543536354944774631102766873251849991238\\n        ],\\n        [\\n            18319349500538500800225762827448369057030532278398270164660609327776487168142,\\n            2622932985948021877314529887962683530522545893985767148345336304947201715671,\\n            13805188629797792210337544360632964855143280581052079479249966961215582531026\\n        ],\\n        [\\n            27457600993464082637917106210690168172469473943609357897393615707457194410878,\\n            15448646156961779103834447043970817898237835202826003934642165760908058355399,\\n            9396792545729486882231669677795667529746274932273033601723318032992363022062\\n        ],\\n        [\\n            9927877141952679457141759789181418464292082444806533413864151258248124544859,\\n            23827901395971835838179844085051957393677906360196119690926757794561937573142,\\n            3273544693673216914876067527455588276979859627093391584406340272737391174619\\n        ],\\n        [\\n            19571510438350300564152393820251652609646082150148656806391655428002614034315,\\n            4458840243585913642400750597703353770666314833058197517675446022682775625834,\\n            6452218213610300363069953741424106105609715382419342511693148495219793324457\\n        ],\\n        [\\n            14558167930891460678441266912176752652821641543245953113671886345167213541771,\\n            10650967986920075561478528461783351160938460620955779955379459848889204404950,\\n            19990009778942542934049216419052172134625404062770188357110708518621145688588\\n        ],\\n        [\\n            26855242974447190235826233682457047761532515293146087151296725996543442567035,\\n            22785340043356532865086769889360674409753343398766563441587096485751538658065,\\n            28603049427449348335651629195385434188071937908693764500052489540779792538285\\n        ],\\n        [\\n            20545812864989828913452616721240947168977365844984763819184465128164378967167,\\n            23234068381345797209897730226956922073109641728569353961504167817770340037954,\\n            26031714567641615877877111172701145299483019910006153132858512509897185854695\\n        ],\\n        [\\n            9512221744061419790435674197238913998387834650389922233458121639503195504983,\\n            12587458000103271975978240683793268604398305885278203470492658961734100340536,\\n            9670291694005369437277651504604785512303147991710650505302465204429311229197\\n        ],\\n        [\\n            26995526763045548800439747262386290359229145489609341602564040676717570935439,\\n            23742712112104280264401317024221734961713400615669958343926511931219510484675,\\n            27931469778579449247589315744656633392873808631802461175539563849884447358271\\n        ],\\n        [\\n            20669006894143187877081688942720159738269397552445286314270368345994751825389,\\n            26891772301075275370472640177651637211280740381619976926886106618375467277414,\\n            28387986011980449959047232529988203397251084614417760995257355718700961696092\\n        ],\\n        [\\n            6579105010484741592730389416372694666279917604793318157514380025250233913402,\\n            11007035767869292700964744408562802781669930023548892567535397874932420229930,\\n            981148366863906885900456473323410468923514528856216824044152942069412627408\\n        ],\\n        [\\n            22213671088722307302576907504985884923571642958053627659840326928319445671280,\\n            1318836216310789598614608105109389429335273432455224127576823891011367206122,\\n            25586582796990779718352441955439394949194222626688223867952982491529809559257\\n        ],\\n        [\\n            4923739488579452777913681531125585976446366144127161879759262506690369040090,\\n            23505612338866210737103599484620591026802005128655081877133994175016351514827,\\n            323887003859465324514901860965142186539600668250760639664361851354147799637\\n        ],\\n        [\\n            10198923064967306784017949469108033682156920551672348936591491217255268794658,\\n            9593680688139131432883442351722730169325112619984238956948153423155998917175,\\n            27027988263960602112273050725720071355535922812577299127302015348825197871870\\n        ],\\n        [\\n            14419883951157390867695097127684346981136020111885301573583640959136319507752,\\n            5104414988075833278683649298543440897371415916271358703850262680431809374355,\\n            24739655595299332818980677669648719986462429574612913501586844601377825836782\\n        ],\\n        [\\n            28522818684103966731129743408029731246564480741348128436668680764518115102581,\\n            21520350704208288978690888796633940487888044365108767319141211249242880355961,\\n            17391005598311948834360476853940353239444383292422171321575043660157438608537\\n        ],\\n        [\\n            15367833944125677011173327826570204350687925236257190051755087781855930646142,\\n            21715073802090413714601069529558707101797361591183718695054701329871284436172,\\n            8994093285353831008525761670339342200997965950202092028313103110478252647618\\n        ],\\n        [\\n            8370824693889782161629525898408725452177580012023459750897244954935682978671,\\n            16123253540853556024347150096993154278773652905830608614979368087152152043083,\\n            3535380953353495025888433493640531836449699255364366295870140701379497967423\\n        ],\\n        [\\n            6954518484798178646508803478426114267143074508396663899281411171704702743829,\\n            28903134801897070276701950388422104654018369750191967384271618837091859516942,\\n            20872505363530172448468374920196608937030884647150175861507911076568784054834\\n        ],\\n        [\\n            6902861581703501105786795670676641959401710346423594578401934671029571262513,\\n            10124161387604183369443890585742198433184078889862870469507328332805848271064,\\n            10488004060799269337071647841224034919633445750252076195310163972966405029030\\n        ],\\n        [\\n            507704911991278613147490289466075160618843900088471236546244459176211783848,\\n            7252739745607302667257774481690407709040936359589867974787811552896597703097,\\n            23278073497974004442836030100920157527910770509761505828038443336325476654930\\n        ],\\n        [\\n            22766285055433137793164317120096790621982728188995759745859222009100808389090,\\n            23129058299483468195787339200845749049960038336751758017949899311636830205152,\\n            16665333681978951552434356320651834889869437822496200946959897681307959400425\\n        ],\\n        [\\n            12145699202182574939376505075528461451757079041659894988784442097333218352048,\\n            26340666275844437932755852805027863696219004039301187587209926587657008948704,\\n            19208771804191839410002226941825269105677187954811130189835856228258013753206\\n        ],\\n        [\\n            21957102494792377508237608216278079874536155315851198461024084071231867104453,\\n            6933367436450995525851693784691226222726503560893470094614235356287049091852,\\n            15707767379191450768747057313641112321773921923533732633534831270357733757271\\n        ],\\n        [\\n            27661963645951389261638591385668507557739541354225916772550248746235106571003,\\n            19699458096897937575096494582288688995241392471402204995195057374756282223421,\\n            902873385171181344315871113842580653512118892800584003934454469411716098791\\n        ],\\n        [\\n            17184835876565576154014372215369798779520343573944211203710896053325717110660,\\n            664657295519303589036289440053175741110032988007278988577620229144220576240,\\n            10803972669668998371638869508774217165881281885838503958226056357738500321396\\n        ],\\n        [\\n            2329846733754251453632375727999372856194157027336139087170310553870624325301,\\n            14139944357035048486675740400655356660678187875721949218090128899571575479791,\\n            18368148273419807418427674359327442879484531833435081951870369910704734685351\\n        ],\\n        [\\n            10480273665080572189328459165704340191901489646067580012574464138528963201459,\\n            21773636700078124500346009061678153597323236568110076029811348966753228682835,\\n            18184268307211429260956076021417309535471438696101133218049142374847151474905\\n        ],\\n        [\\n            25957533025669311312382992376854735734491934602484112256289764602447226406852,\\n            22223261506176684934865714490719116745135417403915426392159449667435294570739,\\n            22937309162832499167063076416585504361695925730111272512450449042837586253575\\n        ],\\n        [\\n            16956181785481598286719868503945127919581091625126206673934113115358441284347,\\n            8497782777197814773596870810881707148695901557289856910220737358078100998191,\\n            21135503731586600979470064722475007625236017670426339278983640892218291297054\\n        ],\\n        [\\n            17809297343844488723046665739910571149089769215421130894378638450427880983923,\\n            72435395972188389387093550708873189001876361107443937983754878061522372356,\\n            7511239878692099209014947248389283109997289411550315391143819429585903287870\\n        ]\\n    ];\\n}\\n\",\"keccak256\":\"0xeda2c624a3bdb6ba7971d10fedd09029a7dd5b2f5297f1ad09f4b10831bc6cb3\",\"license\":\"MIT\"},\"contracts/legacy/PallasCurveLegacy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../PallasTypes.sol\\\";\\n\\n/**\\n * @title PallasCurve\\n * @dev Implementation of Pallas curve operations\\n */\\ncontract PallasCurveLegacy is PallasTypes {\\n    /// @notice Field modulus for Pallas curve\\n    uint256 public constant FIELD_MODULUS =\\n        0x40000000000000000000000000000000224698fc094cf91b992d30ed00000001;\\n\\n    /// @notice Scalar field modulus for Pallas curve\\n    uint256 public constant SCALAR_MODULUS =\\n        0x40000000000000000000000000224698fc0994a8dd8c46eb2100000001;\\n\\n    /// @notice Curve equation constant (B) where y\\u00b2 = x\\u00b3 + B\\n    uint256 public constant BEQ = 5;\\n\\n    /// @notice Default signature prefix for testnet\\n    string public constant SIGNATURE_PREFIX = \\\"CodaSignature*******\\\";\\n\\n    /// @notice Signature prefix for mainnet\\n    string public constant MAINNET_SIGNATURE_PREFIX = \\\"MinaSignatureMainnet\\\";\\n\\n    /// @notice Default length for string operations\\n    uint256 public constant DEFAULT_STRING_LENGTH = 128;\\n\\n    /// @notice Generator point x-coordinate\\n    uint256 public constant G_X = 1;\\n\\n    /// @notice Generator point y-coordinate\\n    uint256 public constant G_Y =\\n        0x1b74b5a30a12937c53dfa9f06378ee548f655bd4333d477119cf7a23caed2abb;\\n\\n    /// @notice Performs modular addition\\n    /// @dev Wrapper around Solidity's addmod\\n    /// @param x First operand\\n    /// @param y Second operand\\n    /// @param k Modulus\\n    /// @return uint256 Result of (x + y) mod k\\n    function add(uint x, uint y, uint k) internal pure returns (uint256) {\\n        return addmod(x, y, k);\\n    }\\n\\n    /// @notice Performs modular multiplication\\n    /// @dev Wrapper around Solidity's mulmod\\n    /// @param x First operand\\n    /// @param y Second operand\\n    /// @param k Modulus\\n    /// @return uint256 Result of (x * y) mod k\\n    function mul(uint x, uint y, uint k) internal pure returns (uint256) {\\n        return mulmod(x, y, k);\\n    }\\n\\n    /// @notice Computes modular multiplicative inverse\\n    /// @dev Implements extended Euclidean algorithm\\n    /// @param a Value to invert\\n    /// @return uint256 Modular multiplicative inverse of a\\n    function invmod(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) revert(\\\"Cannot invert 0\\\");\\n\\n        uint256 t = 0;\\n        uint256 newt = 1;\\n        uint256 r = FIELD_MODULUS;\\n        uint256 newr = a;\\n        uint256 quotient;\\n        uint256 temp;\\n\\n        unchecked {\\n            while (newr != 0) {\\n                quotient = r / newr;\\n\\n                temp = t;\\n                t = newt;\\n                newt = temp - quotient * newt;\\n\\n                temp = r;\\n                r = newr;\\n                newr = temp - quotient * newr;\\n            }\\n\\n            if (t > FIELD_MODULUS) {\\n                t += FIELD_MODULUS;\\n            }\\n        }\\n        return t;\\n    }\\n\\n    /// @notice Performs modular exponentiation\\n    /// @dev Uses precompiled contract at address 0x05\\n    /// @param base Base value\\n    /// @param exponent Exponent value\\n    /// @param modulus Modulus for operation\\n    /// @return result Result of base^exponent mod modulus\\n    function modExp(\\n        uint256 base,\\n        uint256 exponent,\\n        uint256 modulus\\n    ) internal view returns (uint256 result) {\\n        assembly {\\n            // Free memory pointer\\n            let p := mload(0x40)\\n\\n            // Store length of base, exponent and modulus\\n            mstore(p, 0x20)\\n            mstore(add(p, 0x20), 0x20)\\n            mstore(add(p, 0x40), 0x20)\\n\\n            // Store base, exponent and modulus\\n            mstore(add(p, 0x60), base)\\n            mstore(add(p, 0x80), exponent)\\n            mstore(add(p, 0xa0), modulus)\\n\\n            // Call precompiled contract for modular exponentiation\\n            if iszero(staticcall(gas(), 0x05, p, 0xc0, p, 0x20)) {\\n                revert(0, 0)\\n            }\\n\\n            result := mload(p)\\n        }\\n    }\\n\\n    /// @notice Computes modular square root using Tonelli-Shanks algorithm\\n    /// @dev Implements for prime modulus\\n    /// @param n Value to find square root of\\n    /// @param p Modulus (must be prime)\\n    /// @return uint256 Modular square root of n\\n    function sqrtmod(uint256 n, uint256 p) internal view returns (uint256) {\\n        if (n == 0) return 0;\\n\\n        // Calculate Q and M where p - 1 = Q * 2^M and Q is odd\\n        uint256 Q = p - 1;\\n        uint256 M = 0;\\n        while (Q % 2 == 0) {\\n            Q /= 2;\\n            M++;\\n        }\\n\\n        // Find a non-residue z\\n        uint256 z = 2;\\n        while (true) {\\n            if (modExp(z, (p - 1) / 2, p) == p - 1) break; // Found a non-residue\\n            z++;\\n        }\\n\\n        uint256 c = modExp(z, Q, p);\\n        uint256 t = modExp(n, Q >> 1, p); // n^((Q-1)/2)\\n        uint256 R = mulmod(t, n, p); // n^((Q+1)/2)\\n        t = mulmod(t, R, p); // n^Q\\n\\n        while (t != 1) {\\n            uint256 i = 0;\\n            uint256 s = t;\\n            while (s != 1 && i < M) {\\n                s = mulmod(s, s, p);\\n                i++;\\n            }\\n            require(i < M, \\\"Square root does not exist\\\");\\n\\n            uint256 b = c;\\n            for (uint256 j = 0; j < M - i - 1; j++) {\\n                b = mulmod(b, b, p);\\n            }\\n            M = i;\\n            c = mulmod(b, b, p);\\n            t = mulmod(t, c, p);\\n            R = mulmod(R, b, p);\\n        }\\n\\n        return R;\\n    }\\n\\n    /// @notice Checks if a number is even\\n    /// @dev Uses bitwise AND operation\\n    /// @param x Number to check\\n    /// @return bool True if number is even\\n    function isEven(uint256 x) internal pure returns (bool) {\\n        return (x & 1) == 0;\\n    }\\n\\n    /// @notice Verifies if a point lies on the Pallas curve\\n    /// @dev Checks if point satisfies y\\u00b2 = x\\u00b3 + 5\\n    /// @param p Point to check\\n    /// @return bool True if point is on curve\\n    function isOnCurve(Point memory p) internal pure returns (bool) {\\n        if (p.x >= FIELD_MODULUS || p.y >= FIELD_MODULUS) {\\n            return false;\\n        }\\n\\n        uint256 lhs = mulmod(p.y, p.y, FIELD_MODULUS);\\n        uint256 x2 = mulmod(p.x, p.x, FIELD_MODULUS);\\n        uint256 x3 = mulmod(x2, p.x, FIELD_MODULUS);\\n        uint256 rhs = addmod(x3, BEQ, FIELD_MODULUS);\\n\\n        return lhs == rhs;\\n    }\\n\\n    /// @notice Converts a point from affine to projective coordinates\\n    /// @dev Returns (1:1:0) for point at infinity\\n    /// @param p Point in affine coordinates\\n    /// @return ProjectivePoint Point in projective coordinates\\n    function toProjective(\\n        Point memory p\\n    ) internal pure returns (ProjectivePoint memory) {\\n        if (p.x == 0 && p.y == 0) {\\n            return ProjectivePoint(1, 1, 0); // Point at infinity\\n        }\\n        return ProjectivePoint(p.x, p.y, 1);\\n    }\\n\\n    /// @notice Converts a point from projective to affine coordinates\\n    /// @dev Handles point at infinity case\\n    /// @param p Point in projective coordinates\\n    /// @return Point Point in affine coordinates\\n    function toAffine(\\n        ProjectivePoint memory p\\n    ) internal pure returns (Point memory) {\\n        if (p.z == 0) {\\n            return Point(0, 0); // Point at infinity\\n        }\\n\\n        uint256 zinv = invmod(p.z);\\n        uint256 zinv_squared = mulmod(zinv, zinv, FIELD_MODULUS);\\n\\n        return\\n            Point(\\n                mulmod(p.x, zinv_squared, FIELD_MODULUS),\\n                mulmod(\\n                    p.y,\\n                    mulmod(zinv, zinv_squared, FIELD_MODULUS),\\n                    FIELD_MODULUS\\n                )\\n            );\\n    }\\n\\n    /// @notice Doubles a point in projective coordinates\\n    /// @dev Specialized operation for when both points are the same\\n    /// @param g Point to double\\n    /// @return ProjectivePoint Doubled point\\n    function projectiveDouble(\\n        ProjectivePoint memory g\\n    ) internal pure returns (ProjectivePoint memory) {\\n        if (g.z == 0) return g;\\n        if (g.y == 0) revert(\\\"Cannot double point with y=0\\\");\\n\\n        unchecked {\\n            // Cache x, y, z values\\n            uint256 x = g.x;\\n            uint256 y = g.y;\\n            uint256 z = g.z;\\n\\n            // A = X1^2\\n            uint256 A = mulmod(x, x, FIELD_MODULUS);\\n            // B = Y1^2\\n            uint256 B = mulmod(y, y, FIELD_MODULUS);\\n            // C = B^2\\n            uint256 C = mulmod(B, B, FIELD_MODULUS);\\n\\n            // Cache X1+B\\n            uint256 xPlusB = addmod(x, B, FIELD_MODULUS);\\n            // D = 2*((X1+B)^2-A-C)\\n            uint256 D = mulmod(\\n                2,\\n                addmod(\\n                    mulmod(xPlusB, xPlusB, FIELD_MODULUS),\\n                    FIELD_MODULUS - addmod(A, C, FIELD_MODULUS),\\n                    FIELD_MODULUS\\n                ),\\n                FIELD_MODULUS\\n            );\\n\\n            // E = 3*A\\n            uint256 E = mulmod(3, A, FIELD_MODULUS);\\n            // F = E^2\\n            uint256 F = mulmod(E, E, FIELD_MODULUS);\\n\\n            // Calculate X3 first as it's needed for Y3\\n            uint256 X3 = addmod(\\n                F,\\n                FIELD_MODULUS - mulmod(2, D, FIELD_MODULUS),\\n                FIELD_MODULUS\\n            );\\n\\n            return\\n                ProjectivePoint(\\n                    X3,\\n                    addmod(\\n                        mulmod(\\n                            E,\\n                            addmod(D, FIELD_MODULUS - X3, FIELD_MODULUS),\\n                            FIELD_MODULUS\\n                        ),\\n                        FIELD_MODULUS - mulmod(8, C, FIELD_MODULUS),\\n                        FIELD_MODULUS\\n                    ),\\n                    mulmod(2, mulmod(y, z, FIELD_MODULUS), FIELD_MODULUS)\\n                );\\n        }\\n    }\\n\\n    /// @notice Adds two points in projective coordinates\\n    /// @dev Complete addition formula for Pallas curve\\n    /// @param g First point\\n    /// @param h Second point\\n    /// @return ProjectivePoint Resulting point\\n    function projectiveAdd(\\n        ProjectivePoint memory g,\\n        ProjectivePoint memory h\\n    ) internal pure returns (ProjectivePoint memory) {\\n        if (g.z == 0) return h;\\n        if (h.z == 0) return g;\\n\\n        unchecked {\\n            uint256 z1 = g.z;\\n            uint256 z2 = h.z;\\n\\n            uint256 Z1Z1 = mulmod(z1, z1, FIELD_MODULUS);\\n            uint256 Z2Z2 = mulmod(z2, z2, FIELD_MODULUS);\\n            uint256 U1 = mulmod(g.x, Z2Z2, FIELD_MODULUS);\\n            uint256 U2 = mulmod(h.x, Z1Z1, FIELD_MODULUS);\\n            uint256 S1 = mulmod(\\n                g.y,\\n                mulmod(z2, Z2Z2, FIELD_MODULUS),\\n                FIELD_MODULUS\\n            );\\n            uint256 S2 = mulmod(\\n                h.y,\\n                mulmod(z1, Z1Z1, FIELD_MODULUS),\\n                FIELD_MODULUS\\n            );\\n            uint256 H = addmod(U2, FIELD_MODULUS - U1, FIELD_MODULUS);\\n\\n            if (H == 0) {\\n                if (S1 == S2) {\\n                    return projectiveDouble(g);\\n                }\\n                if (addmod(S1, S2, FIELD_MODULUS) == 0) {\\n                    return ProjectivePoint(1, 1, 0);\\n                }\\n                revert(\\\"Invalid point addition\\\");\\n            }\\n\\n            uint256 I = mulmod(mulmod(H, H, FIELD_MODULUS), 4, FIELD_MODULUS);\\n            uint256 J = mulmod(H, I, FIELD_MODULUS);\\n            uint256 r = mulmod(\\n                2,\\n                addmod(S2, FIELD_MODULUS - S1, FIELD_MODULUS),\\n                FIELD_MODULUS\\n            );\\n            uint256 V = mulmod(U1, I, FIELD_MODULUS);\\n\\n            // Calculate X3 first as it's needed for Y3\\n            uint256 X3 = addmod(\\n                mulmod(r, r, FIELD_MODULUS),\\n                FIELD_MODULUS -\\n                    addmod(J, mulmod(2, V, FIELD_MODULUS), FIELD_MODULUS),\\n                FIELD_MODULUS\\n            );\\n\\n            return\\n                ProjectivePoint(\\n                    X3,\\n                    addmod(\\n                        mulmod(\\n                            r,\\n                            addmod(V, FIELD_MODULUS - X3, FIELD_MODULUS),\\n                            FIELD_MODULUS\\n                        ),\\n                        FIELD_MODULUS -\\n                            mulmod(\\n                                2,\\n                                mulmod(S1, J, FIELD_MODULUS),\\n                                FIELD_MODULUS\\n                            ),\\n                        FIELD_MODULUS\\n                    ),\\n                    mulmod(\\n                        addmod(\\n                            mulmod(\\n                                addmod(z1, z2, FIELD_MODULUS),\\n                                addmod(z1, z2, FIELD_MODULUS),\\n                                FIELD_MODULUS\\n                            ),\\n                            FIELD_MODULUS - addmod(Z1Z1, Z2Z2, FIELD_MODULUS),\\n                            FIELD_MODULUS\\n                        ),\\n                        H,\\n                        FIELD_MODULUS\\n                    )\\n                );\\n        }\\n    }\\n\\n    /// @notice Adds two points in affine coordinates\\n    /// @dev Converts to projective, adds, then converts back\\n    /// @param p1 First point\\n    /// @param p2 Second point\\n    /// @return Point Sum of the points\\n    function addPoints(\\n        Point memory p1,\\n        Point memory p2\\n    ) internal pure returns (Point memory) {\\n        ProjectivePoint memory g = toProjective(p1);\\n        ProjectivePoint memory h = toProjective(p2);\\n        ProjectivePoint memory r = projectiveAdd(g, h);\\n        return toAffine(r);\\n    }\\n\\n    /// @notice Performs scalar multiplication\\n    /// @dev Uses double-and-add algorithm\\n    /// @param p Base point\\n    /// @param scalar Scalar value\\n    /// @return Point Resulting point\\n    function scalarMul(\\n        Point memory p,\\n        uint256 scalar\\n    ) internal pure returns (Point memory) {\\n        ProjectivePoint memory g = toProjective(p);\\n        ProjectivePoint memory result = ProjectivePoint(1, 1, 0);\\n        ProjectivePoint memory current = g;\\n\\n        // scalar = scalar % SCALAR_MODULUS;\\n        while (scalar > 0) {\\n            if (scalar & 1 == 1) {\\n                result = projectiveAdd(result, current);\\n            }\\n            current = projectiveDouble(current);\\n            scalar >>= 1;\\n        }\\n\\n        return toAffine(result);\\n    }\\n}\\n\",\"keccak256\":\"0x9c50c228c6a0d1555da893c2d2996743d03d5456167157c9c0b162dc40c5b753\",\"license\":\"MIT\"},\"contracts/legacy/PoseidonLegacy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./PallasConstantsLegacy.sol\\\";\\nimport \\\"./PallasCurveLegacy.sol\\\";\\n\\n/**\\n * @title PoseidonLegacy\\n * @dev Implementation of Poseidon hash function for t = 3 (2 inputs)\\n */\\n\\ncontract PoseidonLegacy is PallasCurveLegacy, PallasConstantsLegacy {\\n    uint256 internal constant BITS_PER_FIELD = 254;\\n    uint256 internal constant CODA_PREFIX_FIELD =\\n        240717916736854602989207148466022993262069182275;\\n    uint256 internal constant MINA_PREFIX_FIELD =\\n        664504924603203994814403132056773144791042910541;\\n\\n    struct HashInputLegacy {\\n        uint256[] fields;\\n        bool[] bits;\\n    }\\n\\n    /// @notice Computes x^5 mod FIELD_MODULUS\\n    /// @dev Optimized power5 implementation using square-and-multiply\\n    /// @param x Base value\\n    /// @return uint256 Result of x^5\\n    function power5(uint256 x) internal pure returns (uint256) {\\n        uint256 x2 = mulmod(x, x, FIELD_MODULUS);\\n        uint256 x4 = mulmod(x2, x2, FIELD_MODULUS);\\n        return mulmod(x4, x, FIELD_MODULUS);\\n    }\\n\\n    /// @notice Initial state array [0, 0, 0]\\n    /// @dev Creates starting state for Poseidon hash\\n    /// @return uint256[3] Initial state array\\n    function initialState() internal pure returns (uint256[3] memory) {\\n        return [uint256(0), uint256(0), uint256(0)];\\n    }\\n\\n    /// @notice Retrieves value from MDS matrix at specified position\\n    /// @dev Used in the Poseidon permutation\\n    /// @param row Row index\\n    /// @param col Column index\\n    /// @return uint256 Matrix value at position\\n    function getMdsValue(\\n        uint256 row,\\n        uint256 col\\n    ) internal view returns (uint256) {\\n        require(row < 3 && col < 3, \\\"Invalid MDS indices\\\");\\n        return mdsMatrix[row][col];\\n    }\\n\\n    /// @notice Gets round constant for specified round and position\\n    /// @dev Access round constants array with bounds checking\\n    /// @param round Round number\\n    /// @param pos Position in the round\\n    /// @return uint256 Round constant value\\n    function getRoundConstant(\\n        uint256 round,\\n        uint256 pos\\n    ) internal view returns (uint256) {\\n        require(\\n            round < (POSEIDON_FULL_ROUNDS + 1) && pos < 3, // +1 for initial round constant\\n            \\\"Invalid round constant indices\\\"\\n        );\\n        return roundConstants[round][pos];\\n    }\\n\\n    /// @notice Performs matrix multiplication with MDS matrix\\n    /// @dev Core operation in Poseidon permutation\\n    /// @param state Current state array\\n    /// @return result Result of matrix multiplication\\n    function mdsMultiply(\\n        uint256[3] memory state\\n    ) internal view returns (uint256[3] memory result) {\\n        // Unroll the loops for gas efficiency\\n        result[0] = addmod(\\n            addmod(\\n                mulmod(getMdsValue(0, 0), state[0], FIELD_MODULUS),\\n                mulmod(getMdsValue(0, 1), state[1], FIELD_MODULUS),\\n                FIELD_MODULUS\\n            ),\\n            mulmod(getMdsValue(0, 2), state[2], FIELD_MODULUS),\\n            FIELD_MODULUS\\n        );\\n\\n        result[1] = addmod(\\n            addmod(\\n                mulmod(getMdsValue(1, 0), state[0], FIELD_MODULUS),\\n                mulmod(getMdsValue(1, 1), state[1], FIELD_MODULUS),\\n                FIELD_MODULUS\\n            ),\\n            mulmod(getMdsValue(1, 2), state[2], FIELD_MODULUS),\\n            FIELD_MODULUS\\n        );\\n\\n        result[2] = addmod(\\n            addmod(\\n                mulmod(getMdsValue(2, 0), state[0], FIELD_MODULUS),\\n                mulmod(getMdsValue(2, 1), state[1], FIELD_MODULUS),\\n                FIELD_MODULUS\\n            ),\\n            mulmod(getMdsValue(2, 2), state[2], FIELD_MODULUS),\\n            FIELD_MODULUS\\n        );\\n    }\\n\\n    /// @notice Performs the Poseidon permutation\\n    /// @dev Main cryptographic operation including rounds of substitution and diffusion\\n    /// @param state Input state array\\n    /// @return uint256[3] Permuted state\\n    function poseidonPermutation(\\n        uint256[3] memory state\\n    ) internal view returns (uint256[3] memory) {\\n        uint256 offset = 0;\\n\\n        if (POSEIDON_HAS_INITIAL_ROUND_CONSTANT) {\\n            state[0] = addmod(state[0], roundConstants[0][0], FIELD_MODULUS);\\n            state[1] = addmod(state[1], roundConstants[0][1], FIELD_MODULUS);\\n            state[2] = addmod(state[2], roundConstants[0][2], FIELD_MODULUS);\\n            offset = 1;\\n        }\\n\\n        for (uint256 round = 0; round < POSEIDON_FULL_ROUNDS; round++) {\\n            state[0] = power5(state[0]);\\n            state[1] = power5(state[1]);\\n            state[2] = power5(state[2]);\\n\\n            state = mdsMultiply(state);\\n\\n            state[0] = addmod(\\n                state[0],\\n                getRoundConstant(round + offset, 0),\\n                FIELD_MODULUS\\n            );\\n            state[1] = addmod(\\n                state[1],\\n                getRoundConstant(round + offset, 1),\\n                FIELD_MODULUS\\n            );\\n            state[2] = addmod(\\n                state[2],\\n                getRoundConstant(round + offset, 2),\\n                FIELD_MODULUS\\n            );\\n        }\\n\\n        return state;\\n    }\\n\\n    /// @notice Updates hash state with input\\n    /// @dev Processes input in rate-sized blocks\\n    /// @param state Current state\\n    /// @param input Input values\\n    /// @return uint256[3] Updated state\\n    function update(\\n        uint256[3] memory state,\\n        uint256[] memory input\\n    ) internal view returns (uint256[3] memory) {\\n        if (input.length == 0) {\\n            return poseidonPermutation(state);\\n        }\\n\\n        uint256 n = ((input.length + POSEIDON_RATE - 1) / POSEIDON_RATE) *\\n            POSEIDON_RATE;\\n        uint256[] memory paddedInput = new uint256[](n);\\n        for (uint256 i = 0; i < input.length; i++) {\\n            paddedInput[i] = input[i];\\n        }\\n\\n        for (\\n            uint256 blockIndex = 0;\\n            blockIndex < n;\\n            blockIndex += POSEIDON_RATE\\n        ) {\\n            state[0] = addmod(state[0], paddedInput[blockIndex], FIELD_MODULUS);\\n            if (blockIndex + 1 < n) {\\n                state[1] = addmod(\\n                    state[1],\\n                    paddedInput[blockIndex + 1],\\n                    FIELD_MODULUS\\n                );\\n            }\\n            state = poseidonPermutation(state);\\n        }\\n        return state;\\n    }\\n\\n    /// @notice Converts string to array of bits\\n    /// @dev Matches o1js bit ordering\\n    /// @param str Input string\\n    /// @return bool[] Array of bits\\n    function stringToBits(\\n        string memory str\\n    ) internal pure returns (bool[] memory) {\\n        bytes memory strBytes = bytes(str);\\n        bool[] memory bits = new bool[](strBytes.length * 8);\\n\\n        for (uint i = 0; i < strBytes.length; i++) {\\n            uint8 b = uint8(strBytes[i]);\\n            for (uint j = 0; j < 8; j++) {\\n                bits[i * 8 + j] = (b & (1 << (7 - j))) != 0;\\n            }\\n        }\\n        return bits;\\n    }\\n\\n    /// @notice Converts bits to bytes\\n    /// @dev Used in field element conversion\\n    /// @param bits Array of bits\\n    /// @return bytes Resulting byte array\\n    function bitsToBytes(\\n        bool[] memory bits\\n    ) internal pure returns (bytes memory) {\\n        uint256 numBytes = (bits.length + 7) / 8;\\n        bytes memory result = new bytes(numBytes);\\n\\n        for (uint256 i = 0; i < numBytes; i++) {\\n            uint8 byteVal = 0;\\n            for (uint8 bit = 0; bit < 8; bit++) {\\n                uint256 bitIndex = i * 8 + bit;\\n                if (bitIndex < bits.length && bits[bitIndex]) {\\n                    byteVal |= uint8(1 << bit);\\n                }\\n            }\\n            result[i] = bytes1(byteVal);\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Converts bytes to field element\\n    /// @dev Reduces result modulo FIELD_MODULUS\\n    /// @param b Input bytes\\n    /// @return uint256 Field element\\n    function bytesToFieldElement(\\n        bytes memory b\\n    ) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            result += uint256(uint8(b[i])) << (i * 8);\\n        }\\n        return result % FIELD_MODULUS;\\n    }\\n\\n    /// @notice Converts prefix string to field element\\n    /// @dev Uses little-endian byte ordering\\n    /// @param prefix Input string\\n    /// @return uint256 Field element\\n    function prefixToField(\\n        string memory prefix\\n    ) internal pure returns (uint256) {\\n        bytes memory prefixBytes = bytes(prefix);\\n        require(prefixBytes.length < 32, \\\"prefix too long\\\");\\n\\n        uint256 result = 0;\\n        // Process in little-endian order (like o1js)\\n        for (uint i = 0; i < 32; i++) {\\n            if (i < prefixBytes.length) {\\n                result |= uint256(uint8(prefixBytes[i])) << (i * 8);\\n            }\\n        }\\n\\n        return result % FIELD_MODULUS;\\n    }\\n\\n    /// @notice Packs HashInputLegacy into array of field elements\\n    /// @dev Handles both field and bit inputs\\n    /// @param input HashInputLegacy struct\\n    /// @return uint256[] Array of packed field elements\\n    function packToFieldsLegacy(\\n        HashInputLegacy memory input\\n    ) internal pure returns (uint256[] memory) {\\n        uint256 numBitFields = (input.bits.length + BITS_PER_FIELD - 1) /\\n            BITS_PER_FIELD;\\n        uint256[] memory result = new uint256[](\\n            input.fields.length + numBitFields\\n        );\\n\\n        for (uint256 i = 0; i < input.fields.length; i++) {\\n            result[i] = input.fields[i];\\n        }\\n\\n        uint256 bitsProcessed = 0;\\n        for (uint256 i = 0; i < numBitFields; i++) {\\n            uint256 bitsToTake = bitsProcessed + BITS_PER_FIELD >\\n                input.bits.length\\n                ? input.bits.length - bitsProcessed\\n                : BITS_PER_FIELD;\\n\\n            bool[] memory fieldBits = new bool[](BITS_PER_FIELD);\\n            for (uint256 j = 0; j < bitsToTake; j++) {\\n                fieldBits[j] = input.bits[bitsProcessed + j];\\n            }\\n\\n            bytes memory fieldBytes = bitsToBytes(fieldBits);\\n            result[input.fields.length + i] = bytesToFieldElement(fieldBytes);\\n            bitsProcessed += bitsToTake;\\n        }\\n\\n        return result;\\n    }\\n\\n    /// @notice Combines two HashInputLegacy structs\\n    /// @dev Concatenates both fields and bits arrays\\n    /// @param input1 First input\\n    /// @param input2 Second input\\n    /// @return HashInputLegacy Combined input\\n    function appendHashInputs(\\n        HashInputLegacy memory input1,\\n        HashInputLegacy memory input2\\n    ) internal pure returns (HashInputLegacy memory) {\\n        uint256[] memory combinedFields = new uint256[](\\n            input1.fields.length + input2.fields.length\\n        );\\n        bool[] memory combinedBits = new bool[](\\n            input1.bits.length + input2.bits.length\\n        );\\n\\n        for (uint256 i = 0; i < input1.fields.length; i++) {\\n            combinedFields[i] = input1.fields[i];\\n        }\\n        for (uint256 i = 0; i < input2.fields.length; i++) {\\n            combinedFields[input1.fields.length + i] = input2.fields[i];\\n        }\\n\\n        for (uint256 i = 0; i < input1.bits.length; i++) {\\n            combinedBits[i] = input1.bits[i];\\n        }\\n        for (uint256 i = 0; i < input2.bits.length; i++) {\\n            combinedBits[input1.bits.length + i] = input2.bits[i];\\n        }\\n\\n        return HashInputLegacy({fields: combinedFields, bits: combinedBits});\\n    }\\n\\n    // @notice Computes Poseidon hash of input array\\n    /// @dev Main hashing function without prefix\\n    /// @param input Array to hash\\n    /// @return uint256 Hash result\\n    function poseidonLegacyHash(\\n        uint256[] memory input\\n    ) public view returns (uint256) {\\n        uint256[3] memory state = initialState();\\n        state = update(state, input);\\n\\n        return state[0];\\n    }\\n\\n    /// @notice Computes Poseidon hash with prefix\\n    /// @dev Hashes prefix followed by input array\\n    /// @param prefix String prefix\\n    /// @param input Array to hash\\n    /// @return uint256 Hash result\\n    function poseidonLegacyHashWithPrefix(\\n        string memory prefix,\\n        uint256[] memory input\\n    ) public view returns (uint256) {\\n        // Start with initial state [0, 0, 0]\\n        uint256[3] memory state = initialState();\\n\\n        // Create prefix array with single element\\n        uint256[] memory prefixArray = new uint256[](1);\\n        prefixArray[0] = prefixToField(prefix);\\n\\n        // First update with prefix\\n        state = update(state, prefixArray);\\n\\n        // Then update with input\\n        state = update(state, input);\\n\\n        return state[0];\\n    }\\n\\n    /// @notice Hashes message with public key and signature data\\n    /// @dev Complete message hashing matching o1js implementation\\n    /// @param message String message\\n    /// @param publicKey Public key point\\n    /// @param r Signature r value\\n    /// @param prefix Network prefix\\n    /// @return uint256 Hash result\\n    function hashMessageLegacy(\\n        string memory message,\\n        Point memory publicKey,\\n        uint256 r,\\n        string memory prefix\\n    ) internal view returns (uint256) {\\n        HashInputLegacy memory messageInput = HashInputLegacy({\\n            fields: new uint256[](0),\\n            bits: stringToBits(message)\\n        });\\n\\n        uint256[] memory pkFields = new uint256[](3);\\n        pkFields[0] = publicKey.x;\\n        pkFields[1] = publicKey.y;\\n        pkFields[2] = r;\\n\\n        HashInputLegacy memory pkInput = HashInputLegacy({\\n            fields: pkFields,\\n            bits: new bool[](0)\\n        });\\n\\n        HashInputLegacy memory fullInput = appendHashInputs(\\n            messageInput,\\n            pkInput\\n        );\\n        uint256[] memory packedFields = packToFieldsLegacy(fullInput);\\n\\n        // Use cached prefix values\\n        uint256 prefixField = keccak256(bytes(prefix)) ==\\n            keccak256(bytes(\\\"MinaSignatureMainnet\\\"))\\n            ? MINA_PREFIX_FIELD\\n            : CODA_PREFIX_FIELD;\\n\\n        uint256[] memory prefixArray = new uint256[](1);\\n        prefixArray[0] = prefixField;\\n\\n        uint256[3] memory state = initialState();\\n        state = update(state, prefixArray);\\n        state = update(state, packedFields);\\n\\n        return state[0];\\n    }\\n}\\n\",\"keccak256\":\"0x87fa2556c4d054e9033843a3308291fedb4f4475cbf1741dee54e6510132c3dc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8063051007e51461018657806307d4175e146101c25780630fe8b624146101bd57806319c56fed146101b8578063261884ec146101b3578063320d34b6146101ae5780633586dbb4146101a95780634120ea2c146101a45780634bae56801461019f5780634f76a98e1461019a57806353b8ac4a1461019557806360fe7c78146101905780636b595e1d1461018b57806374f4a7ae14610186578063751833d91461018157806378ab39bf1461017c5780637aea07a014610177578063905bf7f71461017257806398bc818c1461016d578063b61243bd14610168578063c77cf1d714610163578063c9f3ddf11461015e578063ca426b7614610159578063ca71e6ce14610154578063e399ff5c1461014f578063e7c072f51461014a5763f5dcae261461014557600080fd5b611cfa565b611c87565b611c4a565b611be5565b611b8a565b611ab4565b611956565b6118f5565b61177c565b611595565b611422565b6112d4565b61127e565b610241565b611095565b610eda565b610d10565b610cb7565b610be8565b610bae565b610b55565b610a6e565b610729565b610647565b6103e2565b6102ba565b60005b8381106101da5750506000910152565b81810151838201526020016101ca565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610226815180928187528780880191016101c7565b0116010190565b90602061023e9281815201906101ea565b90565b346102b55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b5576004356000526101386020526102b161029661029d6040600020604051928380926111c9565b038261056a565b6040519182916020835260208301906101ea565b0390f35b600080fd5b346102b55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b557600435610135548110156102b5576000526101376020526040600020600460ff610318835460ff9060181c1690565b16036103b85780610388610376600b6103b69401547f40000000000000000000000000000000224698fc094cf91b992d30ed0000000103600a8401549061035d6105ab565b918252602082015261037160088501611990565b612879565b8051600c84015560200151600d830155565b63050000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff825416179055565b005b60046040517fe8c31343000000000000000000000000000000000000000000000000000000008152fd5b346102b55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b5576000600435815261013660205273ffffffffffffffffffffffffffffffffffffffff60408220541633036104de576101376020526104db600f604083208381556104646001820160016000918281550155565b6104776003820160016000918281550155565b8360058201556104906006820160016000918281550155565b6104a36008820160016000918281550155565b6104b6600a820160016000918281550155565b6104c9600c820160016000918281550155565b6104d5600e8201611dab565b01611dab565b80f35b80fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101a0810190811067ffffffffffffffff82111761052d57604052565b6104e1565b6040810190811067ffffffffffffffff82111761052d57604052565b6060810190811067ffffffffffffffff82111761052d57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761052d57604052565b604051906105b882610532565b565b604051906105b882610510565b604051906105b88261054e565b67ffffffffffffffff811161052d57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6040519061061b82610532565b601482527f436f64615369676e61747572652a2a2a2a2a2a2a0000000000000000000000006020830152565b346102b55760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b5576102b161029d61060e565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60409101126102b557600490565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc60409101126102b557604490565b9181601f840112156102b55782359167ffffffffffffffff83116102b557602083818601950101116102b557565b60a4359081151582036102b557565b359081151582036102b557565b346102b55760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b55761076136610681565b61076a366106b0565b60843567ffffffffffffffff81116102b55761078a9036906004016106df565b909261079461070d565b6107ad6107a96107a43685611754565b61208f565b1590565b61090957610842610890936102b19661083961013554976107d66107d08a6120f0565b61013555565b6108276107ee8a600052610137602052604060002090565b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff16815597803560018a0155602001356002890155565b80356003880155602001356004870155565b600e8501612162565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ff009115801560081b929092161760011782556108f957600f610888611cc1565b915b01612283565b6108e9336108a983600052610136602052604060002090565b9073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b6040519081529081906020820190565b600f61090361060e565b9161088a565b60046040517fa2d0fee8000000000000000000000000000000000000000000000000000000008152fd5b9061023e916020815261094b60208201835115159052565b602082015115156040820152604082015115156060820152606082015160ff1660808201526080820151805160a08301526020015160c082015260a0820151805160e08301526020015161010082015260c0820151906101209182820152610a1d60e08401516109cb610140918285019060208091805184520151910152565b610a06610100860151946109ef610180968787019060208091805184520151910152565b86015180516101c0860152602001516101e0850152565b840151805161020084015260200151610220830152565b61016083015191610a3d61026093846102408501526102808401906101ea565b930151917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828503019101526101ea565b346102b55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b5576060610180604051610aae81610510565b600081526000602082015260006040820152600083820152610ace611df4565b6080820152610adb611df4565b60a0820152600060c0820152610aef611df4565b60e0820152610afc611df4565b610100820152610b0a611df4565b610120820152610b18611df4565b6101408201528261016082015201526102b1610b49610b44600435600052610137602052604060002090565b611e0d565b60405191829182610933565b346102b55760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b55760206040517f1b74b5a30a12937c53dfa9f06378ee548f655bd4333d477119cf7a23caed2abb8152f35b346102b55760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b557602060405160058152f35b346102b55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b557600435610135548110156102b5576000526101376020526040600020600160ff825460181c16036103b85780610c89610c7760016103b6940154610c7260018060028701541614610c666105ab565b92835215156020830152565b612513565b80516006840155602001516007830155565b63020000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff825416179055565b346102b55760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b55760206040517f40000000000000000000000000000000224698fc094cf91b992d30ed000000018152f35b346102b55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b557600435610135548110156102b557610d6290600052610137602052604060002090565b805460ff8160181c166103b85760ff1615610de15780610dae610d8a600e6103b694016119ae565b610d9660018401611990565b600384015490610da8600f86016119ae565b92613952565b600582015563010000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff825416179055565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420696e697469616c697a656400000000000000000000000000000000006044820152606490fd5b9061023e9160208152610e5960208201835160ff169052565b60208201516040820152610e766040830151606083019015159052565b6060820151151560808201526080820151805160a08301526020015160c082015260a0820151805160e08301526020015161010082015260c082015161012082015260e082015190610100610a3d61016093846101408501526101808401906101ea565b346102b55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b55760043567ffffffffffffffff81116102b55761106e611076610f326102b19336906004016106df565b80610f3e949294611ef0565b94610f85610f7e610f78610f528585611f87565b357fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b60ff168752565b610f98610f928383611fb3565b90611fff565b60208701526110577fff00000000000000000000000000000000000000000000000000000000000000610fce610f528585611f95565b16151560408801908152611019611010610feb610f528787611fa4565b7fff000000000000000000000000000000000000000000000000000000000000001690565b151560608a0152565b608088016023840135815152602060438501359151015260a088016063840135815152602060838501359151015260a383013560c089015251151590565b1561108857611064611cc1565b60e0870152611fc4565b81019061203a565b61010082015260405191829182610e40565b61109061060e565b611064565b346102b55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b557600435610135548110156102b5576000526101376020526040600020600260ff825460181c16036103b8576103b6906111486111366111016105ab565b600181527f1b74b5a30a12937c53dfa9f06378ee548f655bd4333d477119cf7a23caed2abb6020820152600484015490613339565b80516008840155602001516009830155565b63030000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff825416179055565b90600182811c921680156111bf575b602083101461119057565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691611185565b90600092918054916111da83611176565b91828252600193848116908160001461123c57506001146111fc575b50505050565b90919394506000526020928360002092846000945b8386106112285750505050010190388080806111f6565b805485870183015294019385908201611211565b91505060209495507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009193501683830152151560051b010190388080806111f6565b346102b55760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b55760206040517c40000000000000000000000000224698fc0994a8dd8c46eb21000000018152f35b346102b55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b557600435610135548110156102b55761132681600052610137602052604060002090565b90600560ff61133a845460ff9060181c1690565b16036103b857816113f66114009261139e61135a600c6102b19701611990565b60038501548151149081611412575b5084547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff1690151560101b62ff000016178455565b82547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff1663060000001783556113f16113df826113da86611e0d565b6123ba565b91600052610138602052604060002090565b612283565b5460101c60ff1690565b60405190151581529081906020820190565b6001915060200151161538611369565b346102b55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b557600435610135548110156102b5576000526101376020526040600020600360ff825460181c16036103b85780602061149c61149160066103b69501611990565b600584015490613339565b8051600a8401550151600b82015563040000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff825416179055565b81601f820112156102b5578035906114ef826105d4565b926114fd604051948561056a565b828452602083830101116102b557816000926020809301838601378301015290565b67ffffffffffffffff811161052d5760051b60200190565b81601f820112156102b55780359161154e8361151f565b9261155c604051948561056a565b808452602092838086019260051b8201019283116102b5578301905b828210611586575050505090565b81358152908301908301611578565b346102b55760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b55767ffffffffffffffff6004358181116102b5576115e59036906004016114d8565b906024359081116102b5576115fe903690600401611537565b6116066133c0565b61160e613437565b90602080855110156116e857600090815b81811061167a576102b16116698761166488887f40000000000000000000000000000000224698fc094cf91b992d30ed00000001890661165e836134f5565b52613536565b613536565b516040519081529081906020820190565b86518110611691575b61168c906120f0565b61161f565b9161168c906116d56116cf610f786116a9878c613913565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60ff1690565b6116de85611d7a565b1b17929050611683565b606490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152600f60248201527f70726566697820746f6f206c6f6e6700000000000000000000000000000000006044820152fd5b359060ff821682036102b557565b91908260409103126102b55760405161176c81610532565b6020808294803584520135910152565b346102b5577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6040813601126102b55760043567ffffffffffffffff918282116102b5576102609082360301126102b5576117d56105ba565b6117e18260040161071c565b81526117ef6024830161071c565b60208201526118006044830161071c565b604082015261181160648301611746565b60608201526118233660848401611754565b60808201526118353660c48401611754565b60a082015261010482013560c0820152611853366101248401611754565b60e0820152611866366101648401611754565b61010082015261187a366101a48401611754565b61012082015261188e366101e48401611754565b6101408201526102248201358381116102b5576118b190600436918501016114d8565b6101608201526102448201359283116102b5576118da6118e99260046102b195369201016114d8565b610180820152602435906123ba565b6040519182918261022d565b346102b55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b557600435600052610136602052602073ffffffffffffffffffffffffffffffffffffffff60406000205416604051908152f35b346102b55760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b557602060405160018152f35b9060405161199d81610532565b602060018294805484520154910152565b906105b86119c292604051938480926111c9565b038361056a565b9b989296611a3d611a7f9761023e9f9d998f611a2c611aa59f9a611a1a611a939f989b611a1060c096611a579c611a6b9f1515885215156020880152604087019015159052565b60ff166060850152565b805160808401526020015160a0830152565b019060208091805184520151910152565b6101008d015280516101208d0152602001516101408c0152565b80516101608b0152602001516101808a0152565b80516101a0890152602001516101c0880152565b80516101e087015260200151610200860152565b610260806102208601528401906101ea565b916102408184039101526101ea565b346102b55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b557600435600052610137602052604060002080546102b1611b0560018401611990565b92611b1260038201611990565b906005810154611b2460068301611990565b611b3060088401611990565b611b3c600a8501611990565b91611b49600c8601611990565b93611b62600f611b5b600e89016119ae565b97016119ae565b966040519a8a60ff8d9c60181c169060ff8160101c16908d60ff808360081c169216906119c9565b346102b55760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b5576020611bdb604051611bca81610532565b60043581526024358382015261208f565b6040519015158152f35b346102b55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b55760043567ffffffffffffffff81116102b557611c41611c396020923690600401611537565b6116646133c0565b51604051908152f35b346102b55760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b557602061013554604051908152f35b346102b55760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b557602060405160808152f35b60405190611cce82610532565b601482527f4d696e615369676e61747572654d61696e6e65740000000000000000000000006020830152565b346102b55760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b5576102b161029d611cc1565b818110611d3f575050565b60008155600101611d34565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b908160031b9180830460081490151715611d9057565b611d4b565b908160011b9180830460021490151715611d9057565b611db58154611176565b9081611dbf575050565b81601f60009311600114611dd1575055565b908083918252611df0601f60208420940160051c840160018501611d34565b5555565b60405190611e0182610532565b60006020838281520152565b90611ee8600f611e1b6105ba565b93611e5d60ff8254611e31828216899015159052565b600881901c821615156020890152601081901c82161515604089015260181c16606087019060ff169052565b611e6960018201611990565b6080860152611e7a60038201611990565b60a0860152600581015460c0860152611e9560068201611990565b60e0860152611ea660088201611990565b610100860152611eb8600a8201611990565b610120860152611eca600c8201611990565b610140860152611edc600e82016119ae565b610160860152016119ae565b610180830152565b60405190610120820182811067ffffffffffffffff82111761052d57604052606061010083600081526000602082015260006040820152600083820152611f35611df4565b6080820152611f42611df4565b60a0820152600060c08201528260e08201520152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9015611f905790565b611f58565b9060211015611f905760210190565b9060221015611f905760220190565b906021116102b55760010190602090565b909291928360c3116102b55783116102b55760c301917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3d0190565b35906020811061200d575090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060200360031b1b1690565b906020828203126102b557813567ffffffffffffffff81116102b55761023e92016114d8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8051907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001908183108015906120e2575b6120da57600582602081930151948181800909089180091490565b505050600090565b5081602082015110156120bf565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611d905760010190565b9190601f811161212c57505050565b6105b8926000526020600020906020601f840160051c83019310612158575b601f0160051c0190611d34565b909150819061214b565b90929167ffffffffffffffff811161052d57612188816121828454611176565b8461211d565b6000601f82116001146121df57819293946000926121d4575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c1916179055565b0135905038806121a1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082169461221284600052602060002090565b91805b87811061226b575083600195969710612233575b505050811b019055565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88560031b161c19910135169055388080612229565b90926020600181928686013581550194019101612215565b919091825167ffffffffffffffff811161052d576122a5816121828454611176565b602080601f83116001146122fd5750819293946000926122f25750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c1916179055565b0151905038806121a1565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe083169561233185600052602060002090565b926000905b88821061238b5750508360019596971061235457505050811b019055565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055388080612229565b80600185968294968601518155019501930190612336565b906123b6602092828151948592016101c7565b0190565b602081810151604080840151608085015180519085015160a087015180519087015160c089015195517f0100000000000000000000000000000000000000000000000000000000000000818a0152602181019a909a5295151560f890811b60418b015293151590931b604289015260438801919091526063870152608386015260a385019190915260c38085019190915283527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09161247a60e38561056a565b61016001516040518091838201906124919161022d565b0383810182526124a1908261056a565b60405193849283016124b2916123a3565b6124bb916123a3565b03908101825261023e908261056a565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201918211611d9057565b6007039060078211611d9057565b91908203918211611d9057565b61251b611df4565b508051907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001602061255582600581878181800909086125f3565b92015115156001808416140361257e575b506040519161257483610532565b8252602082015290565b908103908111611d905738612566565b1561259557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f53717561726520726f6f7420646f6573206e6f742065786973740000000000006044820152fd5b80156127a15760007f40000000000000000000000000000000224698fc094cf91b992d30ed000000005b6001808216612637571c90612631906120f0565b9061261d565b50909160025b7f40000000000000000000000000000000224698fc094cf91b992d30ed00000000612667826127a7565b1461267a57612675906120f0565b61263d565b8261268491612820565b92612693600193841c83612820565b906000947f40000000000000000000000000000000224698fc094cf91b992d30ed00000001808095850980979409905b8582036126d35750505050505090565b856000979394959697918184905b61275f575b506126f286841061258e565b946000915b612721575b50509361271c5784808085800980930993600093099594939192906126c3565b612060565b866127376127328584999599612506565b6124cb565b8710156127565761271c5761275088838b9409966120f0565b916126f7565b508195506126fc565b92909180889185141580612798575b1561278f575061271c5761278688848b9509916120f0565b929190826126e1565b929193506126e6565b5087831061276e565b50600090565b60405190602082526020808301526020604083015260608201527f2000000000000000000000000000000011234c7e04a67c8dcc9698768000000060808201527f40000000000000000000000000000000224698fc094cf91b992d30ed0000000160a082015260208160c08160055afa156102b5575190565b90604051916020835260208084015260206040840152606083015260808201527f40000000000000000000000000000000224698fc094cf91b992d30ed0000000160a082015260208160c08160055afa156102b5575190565b61023e9161289b6128956128a19361288f611df4565b506128c5565b916128c5565b90612a62565b61292e565b604051906128b38261054e565b60006040838281528260208201520152565b6128cd6128a6565b5080511580612922575b6129005760208151910151604051916128ef8361054e565b825260208201526001604082015290565b5060405161290d8161054e565b60018152600160208201526000604082015290565b506020810151156128d7565b612936611df4565b5060408101805115612a46575180156129e85760006001917f40000000000000000000000000000000224698fc094cf91b992d30ed0000000190805b6129d05750507f40000000000000000000000000000000224698fc094cf91b992d30ed0000000180925081116129c9575b818082800960208282875109950151926129bb6105ab565b958652099009602082015290565b81016129a3565b80820484810290930393929091908202900380612972565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f7420696e76657274203000000000000000000000000000000000006044820152fd5b5050604051612a5481610532565b600081526000602082015290565b90612a6b6128a6565b506040820151908115613226576040810151918215613220577f40000000000000000000000000000000224698fc094cf91b992d30ed0000000180848009855109917f40000000000000000000000000000000224698fc094cf91b992d30ed000000018083800982510990602080870151910151957f40000000000000000000000000000000224698fc094cf91b992d30ed000000018581038408156131155750612b146105c7565b957f40000000000000000000000000000000224698fc094cf91b992d30ed0000000185810384087f40000000000000000000000000000000224698fc094cf91b992d30ed000000018681038508907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910960047f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191097f40000000000000000000000000000000224698fc094cf91b992d30ed000000019086097f40000000000000000000000000000000224698fc094cf91b992d30ed0000000186810385087f40000000000000000000000000000000224698fc094cf91b992d30ed000000018781038608907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910960047f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191097f40000000000000000000000000000000224698fc094cf91b992d30ed000000018781038608907f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109927f40000000000000000000000000000000224698fc094cf91b992d30ed000000018880097f40000000000000000000000000000000224698fc094cf91b992d30ed000000019089097f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910991827f40000000000000000000000000000000224698fc094cf91b992d30ed0000000103907f40000000000000000000000000000000224698fc094cf91b992d30ed000000018780097f40000000000000000000000000000000224698fc094cf91b992d30ed000000019088097f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109907f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191087f40000000000000000000000000000000224698fc094cf91b992d30ed0000000190600209917f40000000000000000000000000000000224698fc094cf91b992d30ed00000001826002097f40000000000000000000000000000000224698fc094cf91b992d30ed000000019085087f40000000000000000000000000000000224698fc094cf91b992d30ed00000001037f40000000000000000000000000000000224698fc094cf91b992d30ed00000001848009907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910893848a527f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191097f40000000000000000000000000000000224698fc094cf91b992d30ed00000001906002097f40000000000000000000000000000000224698fc094cf91b992d30ed0000000103927f40000000000000000000000000000000224698fc094cf91b992d30ed00000001037f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191087f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109907f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910860208601527f40000000000000000000000000000000224698fc094cf91b992d30ed00000001848308927f40000000000000000000000000000000224698fc094cf91b992d30ed00000001037f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910892807f40000000000000000000000000000000224698fc094cf91b992d30ed00000001910990807f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109907f40000000000000000000000000000000224698fc094cf91b992d30ed0000000191087f40000000000000000000000000000000224698fc094cf91b992d30ed000000010390807f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109907f40000000000000000000000000000000224698fc094cf91b992d30ed000000019108907f40000000000000000000000000000000224698fc094cf91b992d30ed000000019109604082015290565b947f40000000000000000000000000000000224698fc094cf91b992d30ed00000001809495508092935081800990099009917f40000000000000000000000000000000224698fc094cf91b992d30ed00000001808084800984098509831461321357507f40000000000000000000000000000000224698fc094cf91b992d30ed0000000192838281818195099009900990081561320b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c696420706f696e74206164646974696f6e000000000000000000006044820152606490fd5b61290d6105c7565b91505061023e915061322c565b50505090565b91505090565b6132346128a6565b50604081018051156133355760208201918251156132d6575191519051907f40000000000000000000000000000000224698fc094cf91b992d30ed000000019182918280868009818080808080888009818180099c0881808d880881039180090860020992600309818080856002098103818480090893816132b46105c7565b9b868d5260080982039482039008900908602086015209600209604082015290565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f43616e6e6f7420646f75626c6520706f696e74207769746820793d30000000006044820152606490fd5b5090565b6133459061288f611df4565b906040516133528161054e565b816001918281528260208201526000604082015293905b6133795750505061023e9061292e565b8180841614613396575b61338c9061322c565b91811c9182613369565b926133a48461338c92612a62565b939050613383565b604051906133b98261054e565b6060368337565b60606040516133ce8161054e565b3690376040516133dd8161054e565b60008152600060208201526000604082015290565b9060028201809211611d9057565b9060018201809211611d9057565b9060fe8201809211611d9057565b9060078201809211611d9057565b91908201809211611d9057565b6040519061344482610532565b6001825260203681840137565b6040516020810181811067ffffffffffffffff82111761052d5760405260008152906000368137565b604051906080820182811067ffffffffffffffff82111761052d57604052600382526060366020840137565b906134b08261151f565b6134bd604051918261056a565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06134eb829461151f565b0190602036910137565b805115611f905760200190565b805160011015611f905760400190565b805160021015611f905760600190565b8051821015611f905760209160051b010190565b91906135406133ac565b508051156136535761356661356161355b61273284516133f2565b60011c90565b611d95565b91613570836134a6565b9360005b83518110156135a1578061358b61359c9286613522565b516135968289613522565b526120f0565b613574565b509290939150600091825b8284106135ba575050505090565b909192938181516135cb8786613522565b519161271c577f40000000000000000000000000000000224698fc094cf91b992d30ed000000019182910882528461360287613400565b10613623575b5061361561361b9161365a565b946133f2565b9291906135ac565b915061361581602061361b930180519461364561363f8a613400565b88613522565b516000960890529150613608565b509061023e905b6136626133ac565b5080517f40000000000000000000000000000000224698fc094cf91b992d30ed00000001809160095490088252602090818301818151600a5490089052604091828401828151600b549008905260009182935b603f84106136c557505050505090565b9091929394806136d86136fd9251613767565b81528481016136e78151613767565b90528281016136f68151613767565b9052613870565b809581519161371361370e88613400565b613794565b9161271c5784849261375f940881528581018581516137396137348b613400565b61381c565b9008905201948551958461375461374f84613400565b613846565b6000980890526120f0565b9291906136b5565b7f40000000000000000000000000000000224698fc094cf91b992d30ed0000000190818082800980090990565b6040811080613814575b156137b6576064811015611f90576003026009015490565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f496e76616c696420726f756e6420636f6e7374616e7420696e646963657300006044820152fd5b50600161379e565b604081108061383e575b156137b6576064811015611f9057600302600a015490565b506001613826565b6040811080613868575b156137b6576064811015611f9057600302600b015490565b506001613850565b906138796133ac565b91600054907f40000000000000000000000000000000224698fc094cf91b992d30ed000000018080809484519009818080600154938160208901958651900990089581600254978160408401998a51900990088a528180806003548451900981600454885190099008816005548a519009900860208b01526006549051900991600754905190099008916008549051900990086040830152565b908151811015611f90570160200190565b60405190611fe0820182811067ffffffffffffffff82111761052d5760405260fe8252611fc0366020840137565b6139cf916139ca91613a22959461397061396a613451565b92613a43565b6139786105ab565b9283526020830152602061398a61347a565b938051613996866134f5565b5201516139a284613502565b526139ac83613512565b526139b5613451565b6139bd6105ab565b9283526020830152613dd7565b613ae9565b90602081519101206139df611cc1565b6020815191012014600014613a26576116647374656e6e69614d65727574616e676953616e694d5b613a0f613437565b90613a19826134f5565b526116646133c0565b5190565b611664732a2a2a2a2a2a2a65727574616e67695361646f43613a07565b8051908160031b600892808204841490151715611d9057613a63906134a6565b90600090815b8151811015613ae157613a82610f786116a98385613913565b835b868110613a9b575050613a96906120f0565b613a69565b80613ad760ff6001613aaf613adc956124f8565b1b8516161515613ad0613aca84613ac589611d7a565b61342a565b8a613522565b9015159052565b6120f0565b613a84565b505050905090565b9060208201613b06613aff61273283515161340e565b60fe900490565b91613b1b613b168486515161342a565b6134a6565b9160005b85518051821015613b485790613b3881613b4393613522565b516135968287613522565b613b1f565b505091929093600090815b838310613b6257505050505090565b613b6b8161340e565b81865151809211600014613c0b57613b8291612506565b905b613b8c613924565b60005b838110613bd7575091613bcb91613bb0613bab613bd195613c6b565b613d4d565b613bc5613bbf8888515161342a565b8b613522565b5261342a565b926120f0565b91613b53565b613c0690613ad7613bfc613bf68b51613bf0858961342a565b90613522565b51151590565b613ad08386613522565b613b8f565b505060fe90613b84565b90613c1f826105d4565b613c2c604051918261056a565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06134eb82946105d4565b60ff1660ff8114611d905760010190565b613c7e613c78825161341c565b60031c90565b613c8781613c15565b916000915b808310613c995750505090565b60009492939492835b60ff8082166008811015613d0557613cbd81613ac58a611d7a565b865181109081613cf0575b50613cde575b5050613cd990613c5a565b613ca2565b6001901b1690941793613cd938613cce565b613cff9150613bf69088613522565b38613cc8565b50505094937fff00000000000000000000000000000000000000000000000000000000000000613d47929460f81b1660001a613d418287613913565b536120f0565b91613c8c565b90600091825b8151841015613d9657613d668483613913565b5160f81c8460031b85810460081486151715611d90571b8101809111611d9057613d9090936120f0565b92613d53565b7f40000000000000000000000000000000224698fc094cf91b992d30ed000000019006925050565b60405190613dcb82610532565b60606020838281520152565b919091613de2613dbe565b50613df5613b168251518551519061342a565b926020820191825151613e12613b1660208501928351519061342a565b9460005b83518051821015613e3f5790613e2f81613e3a93613522565b51613596828b613522565b613e16565b505091939490929460005b86518051821015613e785790613e6381613e7393613522565b51613596613bbf838a515161342a565b613e4a565b50509291959450925060005b82518051821015613eb25790613ad7613ea3613bf683613ead95613522565b613ad08388613522565b613e84565b505092909360005b84518051821015613eed5790613ad7613ed9613bf683613ee895613522565b613ad061363f848b515161342a565b613eba565b505093509150613efb6105ab565b91825260208201529056fea264697066735822122045c974aabc54d3eb217228809f70a8ebb5b214a0349b2fa4bef9555c6d47894864736f6c63430008140033",
  "devdoc": {
    "details": "Verifies signatures over message generated using mina-signer.",
    "kind": "dev",
    "methods": {
      "cleanupVMLifecycle(uint256)": {
        "details": "Can only be called by the creator of the verification process",
        "params": {
          "vmId": "The ID of the verification process to clean up"
        }
      },
      "decodeVMStateBytesCompressed(bytes)": {
        "details": "The prefix is set conditionally based on the mainnet flag:      - mainnet=true: \"MinaSignatureMainnet\"      - mainnet=false: \"CodaSignature*******\"",
        "params": {
          "data": "The compressed bytes containing all VM state fields. Expected minimum length is 195 bytes             plus additional bytes for the dynamic message string"
        },
        "returns": {
          "state": "The decoded VerifyMessageStateCompressed struct containing:               - verifyType (1 byte)               - vmId (32 bytes)               - mainnet flag (1 byte)               - isValid flag (1 byte)               - publicKey (x,y coordinates, 64 bytes)               - signature (r,s values, 64 bytes)               - messageHash (32 bytes)               - prefix (network-dependent string)               - message (dynamic string starting at byte 195)"
        }
      },
      "getVMState(uint256)": {
        "details": "Returns a copy of the state, not a reference",
        "params": {
          "vmId": "The ID of the verification process"
        },
        "returns": {
          "state": "The complete verification state structure"
        }
      },
      "getVMStateBytesCompressed(uint256)": {
        "params": {
          "vmId": "The ID of the verification process"
        },
        "returns": {
          "_0": "state The complete verification state structure in bytes"
        }
      },
      "isValidPublicKey((uint256,uint256))": {
        "details": "Checks if the point coordinates satisfy the curve equation y² = x³ + 5",
        "params": {
          "point": "The point to validate with x and y coordinates"
        },
        "returns": {
          "_0": "bool True if the point lies on the curve, false otherwise"
        }
      },
      "packVerifyMessageStateCompressed((bool,bool,bool,uint8,(uint256,uint256),(uint256,uint256),uint256,(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),string,string),uint256)": {
        "details": "Combines fixed-length data with the dynamic message string using abi.encodePacked and abi.encode",
        "params": {
          "state": "The VerifyMessageState to be compressed",
          "vmId": "The unique identifier for this message verification state"
        },
        "returns": {
          "_0": "bytes The packed binary representation of the state"
        }
      },
      "poseidonLegacyHash(uint256[])": {
        "details": "Main hashing function without prefix",
        "params": {
          "input": "Array to hash"
        },
        "returns": {
          "_0": "uint256 Hash result"
        }
      },
      "poseidonLegacyHashWithPrefix(string,uint256[])": {
        "details": "Hashes prefix followed by input array",
        "params": {
          "input": "Array to hash",
          "prefix": "String prefix"
        },
        "returns": {
          "_0": "uint256 Hash result"
        }
      },
      "step_0_VM_assignValues((uint256,uint256),(uint256,uint256),string,bool)": {
        "params": {
          "message": "The string message to verify",
          "network": "Network identifier (true for mainnet, false for testnet)",
          "publicKey": "The public key point (x,y)",
          "signature": "Contains r (x-coordinate) and s (scalar)"
        }
      },
      "step_1_VM(uint256)": {
        "params": {
          "vmId": "Verification state identifier"
        }
      },
      "step_2_VM(uint256)": {
        "params": {
          "vmId": "Verification state identifier"
        }
      },
      "step_3_VM(uint256)": {
        "params": {
          "vmId": "Verification state identifier"
        }
      },
      "step_4_VM(uint256)": {
        "params": {
          "vmId": "Verification state identifier"
        }
      },
      "step_5_VM(uint256)": {
        "params": {
          "vmId": "Verification state identifier"
        }
      },
      "step_6_VM(uint256)": {
        "params": {
          "vmId": "Verification state identifier"
        },
        "returns": {
          "_0": "bool True if signature is valid, false otherwise"
        }
      }
    },
    "stateVariables": {
      "vmCounter": {
        "details": "Used as a unique ID. Incremented for each new verification process"
      },
      "vmLifeCycle": {
        "details": "Main storage for verification process states"
      },
      "vmLifeCycleCreator": {
        "details": "Used for access control in cleanup operations"
      }
    },
    "title": "PallasMessageSignatureVerifier",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BEQ()": {
        "notice": "Curve equation constant (B) where y² = x³ + B"
      },
      "DEFAULT_STRING_LENGTH()": {
        "notice": "Default length for string operations"
      },
      "FIELD_MODULUS()": {
        "notice": "Field modulus for Pallas curve"
      },
      "G_X()": {
        "notice": "Generator point x-coordinate"
      },
      "G_Y()": {
        "notice": "Generator point y-coordinate"
      },
      "MAINNET_SIGNATURE_PREFIX()": {
        "notice": "Signature prefix for mainnet"
      },
      "SCALAR_MODULUS()": {
        "notice": "Scalar field modulus for Pallas curve"
      },
      "SIGNATURE_PREFIX()": {
        "notice": "Default signature prefix for testnet"
      },
      "cleanupVMLifecycle(uint256)": {
        "notice": "Removes a verification process state from storage"
      },
      "decodeVMStateBytesCompressed(bytes)": {
        "notice": "Decodes a compressed byte array into a VerifyMessageStateCompressed struct"
      },
      "getVMState(uint256)": {
        "notice": "Retrieves the complete state of a verification process"
      },
      "getVMStateBytesCompressed(uint256)": {
        "notice": "Retrieves the complete state of a verification process in bytes"
      },
      "isValidPublicKey((uint256,uint256))": {
        "notice": "Validates if a point lies on the Pallas curve"
      },
      "packVerifyMessageStateCompressed((bool,bool,bool,uint8,(uint256,uint256),(uint256,uint256),uint256,(uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),string,string),uint256)": {
        "notice": "Packs a VerifyMessageState into a compressed bytes format for efficient storage"
      },
      "poseidonLegacyHashWithPrefix(string,uint256[])": {
        "notice": "Computes Poseidon hash with prefix"
      },
      "step_0_VM_assignValues((uint256,uint256),(uint256,uint256),string,bool)": {
        "notice": "Zero step - Input assignment for message verification ================================================== Initializes the verification state for a message signature"
      },
      "step_1_VM(uint256)": {
        "notice": "Compute hash of the message with network prefix ================================================== Matches the first part of verify(): let e = hashMessage(message, pk, r, networkId) Process: 1. Convert string message to bytes 2. Append public key coordinates and signature.r 3. Apply network prefix and hash"
      },
      "step_2_VM(uint256)": {
        "notice": "Convert public key to curve point ================================================== From o1js: PublicKey.toGroup(publicKey) This converts compressed public key format (x, isOdd) to full curve point representation by: 1. Computing y² = x³ + 5 (Pallas curve equation) 2. Taking square root 3. Selecting appropriate y value based on isOdd"
      },
      "step_3_VM(uint256)": {
        "notice": "Compute s*G where G is generator point ================================================== From o1js: scale(one, s) Critical: Do not reduce scalar by SCALAR_MODULUS Uses projective coordinates internally for efficiency Must use exact generator point coordinates from o1js: G.x = 1 G.y = specific value from PallasConstants"
      },
      "step_4_VM(uint256)": {
        "notice": "Compute e*publicKey ================================================== From o1js: scale(Group.toProjective(pk), e) where e is the message hash computed in step 1 Uses same scalar multiplication as s*G Takes public key point from step 2"
      },
      "step_5_VM(uint256)": {
        "notice": "Compute R = sG - ePk ================================================== From o1js: sub(scale(one, s), scale(Group.toProjective(pk), e)) Implemented as point addition with negated ePk Point negation on Pallas: (x, -y) R will be used for final verification"
      },
      "step_6_VM(uint256)": {
        "notice": "Final signature verification ================================================== From o1js: let { x: rx, y: ry } = Group.fromProjective(R); return Field.isEven(ry) && Field.equal(rx, r); Two conditions must be met: 1. R.x equals signature.r 2. R.y is even"
      },
      "vmCounter()": {
        "notice": "Counter for tracking total number of verification processes"
      },
      "vmLifeCycle(uint256)": {
        "notice": "Maps verification IDs to their respective state structures"
      },
      "vmLifeCycleBytesCompressed(uint256)": {
        "notice": "Maps verification IDs to their respective state structures compressed into bytes form. Doesn't store intermediate states but only the important bits."
      },
      "vmLifeCycleCreator(uint256)": {
        "notice": "Maps verification IDs to their creators' addresses"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1100,
        "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
        "label": "mdsMatrix",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_array(t_uint256)3_storage)3_storage"
      },
      {
        "astId": 1507,
        "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
        "label": "roundConstants",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_array(t_uint256)3_storage)100_storage"
      },
      {
        "astId": 17,
        "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
        "label": "vmCounter",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 22,
        "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
        "label": "vmLifeCycleCreator",
        "offset": 0,
        "slot": "310",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 28,
        "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
        "label": "vmLifeCycle",
        "offset": 0,
        "slot": "311",
        "type": "t_mapping(t_uint256,t_struct(VerifyMessageState)1032_storage)"
      },
      {
        "astId": 33,
        "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
        "label": "vmLifeCycleBytesCompressed",
        "offset": 0,
        "slot": "312",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint256)3_storage)100_storage": {
        "base": "t_array(t_uint256)3_storage",
        "encoding": "inplace",
        "label": "uint256[3][100]",
        "numberOfBytes": "9600"
      },
      "t_array(t_array(t_uint256)3_storage)3_storage": {
        "base": "t_array(t_uint256)3_storage",
        "encoding": "inplace",
        "label": "uint256[3][3]",
        "numberOfBytes": "288"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_struct(VerifyMessageState)1032_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PallasTypes.VerifyMessageState)",
        "numberOfBytes": "32",
        "value": "t_struct(VerifyMessageState)1032_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Point)885_storage": {
        "encoding": "inplace",
        "label": "struct PallasTypes.Point",
        "members": [
          {
            "astId": 882,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 884,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Signature)897_storage": {
        "encoding": "inplace",
        "label": "struct PallasTypes.Signature",
        "members": [
          {
            "astId": 894,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "r",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 896,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "s",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VerifyMessageState)1032_storage": {
        "encoding": "inplace",
        "label": "struct PallasTypes.VerifyMessageState",
        "members": [
          {
            "astId": 989,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "init",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 992,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "mainnet",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 995,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "isValid",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 998,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "atStep",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1002,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "publicKey",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Point)885_storage"
          },
          {
            "astId": 1006,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "signature",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Signature)897_storage"
          },
          {
            "astId": 1009,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "messageHash",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1013,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "pkInGroup",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(Point)885_storage"
          },
          {
            "astId": 1017,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "sG",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(Point)885_storage"
          },
          {
            "astId": 1021,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "ePk",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(Point)885_storage"
          },
          {
            "astId": 1025,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "R",
            "offset": 0,
            "slot": "12",
            "type": "t_struct(Point)885_storage"
          },
          {
            "astId": 1028,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "message",
            "offset": 0,
            "slot": "14",
            "type": "t_string_storage"
          },
          {
            "astId": 1031,
            "contract": "contracts/CORE_MessageVerification.sol:PallasMessageSignatureVerifier",
            "label": "prefix",
            "offset": 0,
            "slot": "15",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}